
EXTI_WITH_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dc0  20000010  08004800  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003dd0  08004800  00023dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001219f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c83  00000000  00000000  000321df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001078  00000000  00000000  00034e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00035ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b6b  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9af  00000000  00000000  0005995b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d41e2  00000000  00000000  0006730a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b4ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  0013b568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004754 	.word	0x08004754

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004754 	.word	0x08004754

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationMallocFailedHook>:
/* Hook prototypes */
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b092      	sub	sp, #72	; 0x48
 8000524:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	osMutexDef(mutex_led);
 8000526:	2300      	movs	r3, #0
 8000528:	647b      	str	r3, [r7, #68]	; 0x44
    led_Handle = osMutexCreate(osMutex(mutex_led));
 800052a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fe52 	bl	80021d8 <osMutexCreate>
 8000534:	4602      	mov	r2, r0
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <MX_FREERTOS_Init+0x9c>)
 8000538:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semaphore_bt */
  osSemaphoreDef(semaphore_bt);
 800053a:	2300      	movs	r3, #0
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
  bt_Handle = osSemaphoreCreate(osSemaphore(semaphore_bt), 1);
 800053e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f001 fed7 	bl	80022f8 <osSemaphoreCreate>
 800054a:	4602      	mov	r2, r0
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_FREERTOS_Init+0xa0>)
 800054e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of th1_led */
  osThreadDef(th1_led, th1_led_fun, osPriorityAboveNormal, 0, 128);
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_FREERTOS_Init+0xa4>)
 8000552:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	682b      	ldr	r3, [r5, #0]
 800055e:	6023      	str	r3, [r4, #0]
  th1_ledHandle = osThreadCreate(osThread(th1_led), NULL);
 8000560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fdfb 	bl	8002162 <osThreadCreate>
 800056c:	4602      	mov	r2, r0
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_FREERTOS_Init+0xa8>)
 8000570:	601a      	str	r2, [r3, #0]

  /* definition and creation of th2_led */
  osThreadDef(th2_led, th2_led_fun, osPriorityNormal, 0, 128);
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_FREERTOS_Init+0xac>)
 8000574:	f107 0418 	add.w	r4, r7, #24
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	682b      	ldr	r3, [r5, #0]
 8000580:	6023      	str	r3, [r4, #0]
  th2_ledHandle = osThreadCreate(osThread(th2_led), NULL);
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fdea 	bl	8002162 <osThreadCreate>
 800058e:	4602      	mov	r2, r0
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_FREERTOS_Init+0xb0>)
 8000592:	601a      	str	r2, [r3, #0]

  /* definition and creation of th3_sos */
  osThreadDef(th3_sos, th3_sos_fun, osPriorityHigh, 0, 128);
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_FREERTOS_Init+0xb4>)
 8000596:	1d3c      	adds	r4, r7, #4
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	682b      	ldr	r3, [r5, #0]
 80005a0:	6023      	str	r3, [r4, #0]
  th3_sosHandle = osThreadCreate(osThread(th3_sos), NULL);
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fddb 	bl	8002162 <osThreadCreate>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MX_FREERTOS_Init+0xb8>)
 80005b0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005b2:	bf00      	nop
 80005b4:	3748      	adds	r7, #72	; 0x48
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bdb0      	pop	{r4, r5, r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20003d78 	.word	0x20003d78
 80005c0:	20003d84 	.word	0x20003d84
 80005c4:	08004774 	.word	0x08004774
 80005c8:	20003d88 	.word	0x20003d88
 80005cc:	08004790 	.word	0x08004790
 80005d0:	20003d80 	.word	0x20003d80
 80005d4:	080047ac 	.word	0x080047ac
 80005d8:	20003d7c 	.word	0x20003d7c

080005dc <th1_led_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_th1_led_fun */
void th1_led_fun(void const * argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN th1_led_fun */
  /* Infinite loop */
  for(;;)
  {
	if(osMutexWait(led_Handle,osWaitForever)==osOK){
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <th1_led_fun+0x50>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fdff 	bl	80021f0 <osMutexWait>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d114      	bne.n	8000622 <th1_led_fun+0x46>
		uint32_t i = 15;
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
		while(i--){
 80005fc:	e007      	b.n	800060e <th1_led_fun+0x32>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005fe:	2120      	movs	r1, #32
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <th1_led_fun+0x54>)
 8000602:	f000 fd70 	bl	80010e6 <HAL_GPIO_TogglePin>
		  osDelay(700);
 8000606:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800060a:	f001 fdd1 	bl	80021b0 <osDelay>
		while(i--){
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	60fa      	str	r2, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <th1_led_fun+0x22>
		}
		osMutexRelease(led_Handle);
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <th1_led_fun+0x50>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fe35 	bl	800228c <osMutexRelease>
	}
   osDelay(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f001 fdc4 	bl	80021b0 <osDelay>
	if(osMutexWait(led_Handle,osWaitForever)==osOK){
 8000628:	e7dc      	b.n	80005e4 <th1_led_fun+0x8>
 800062a:	bf00      	nop
 800062c:	20003d78 	.word	0x20003d78
 8000630:	40020000 	.word	0x40020000

08000634 <th2_led_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_th2_led_fun */
void th2_led_fun(void const * argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN th2_led_fun */
  /* Infinite loop */
	  for(;;)
	    {
	  	if(osMutexWait(led_Handle,osWaitForever)==osOK){
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <th2_led_fun+0x48>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f04f 31ff 	mov.w	r1, #4294967295
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fdd3 	bl	80021f0 <osMutexWait>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f5      	bne.n	800063c <th2_led_fun+0x8>
	  		uint32_t i = 15;
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
	  		while(i--){
 8000654:	e007      	b.n	8000666 <th2_led_fun+0x32>
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000656:	2120      	movs	r1, #32
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <th2_led_fun+0x4c>)
 800065a:	f000 fd44 	bl	80010e6 <HAL_GPIO_TogglePin>
	  		  osDelay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000662:	f001 fda5 	bl	80021b0 <osDelay>
	  		while(i--){
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f2      	bne.n	8000656 <th2_led_fun+0x22>
	  		}
	  		osMutexRelease(led_Handle);
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <th2_led_fun+0x48>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fe09 	bl	800228c <osMutexRelease>
	  	if(osMutexWait(led_Handle,osWaitForever)==osOK){
 800067a:	e7df      	b.n	800063c <th2_led_fun+0x8>
 800067c:	20003d78 	.word	0x20003d78
 8000680:	40020000 	.word	0x40020000

08000684 <th3_sos_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_th3_sos_fun */
void th3_sos_fun(void const * argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN th3_sos_fun */
   osSemaphoreWait(bt_Handle,0);
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <th3_sos_fun+0x50>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fe4e 	bl	8002334 <osSemaphoreWait>
	/* Infinite loop */
  for(;;)
  {
   if(osSemaphoreWait(bt_Handle, osWaitForever) == osOK){
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <th3_sos_fun+0x50>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe47 	bl	8002334 <osSemaphoreWait>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10e      	bne.n	80006ca <th3_sos_fun+0x46>
   uint32_t i = 100;
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	60fb      	str	r3, [r7, #12]
   while(i--){
 80006b0:	e006      	b.n	80006c0 <th3_sos_fun+0x3c>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b2:	2120      	movs	r1, #32
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <th3_sos_fun+0x54>)
 80006b6:	f000 fd16 	bl	80010e6 <HAL_GPIO_TogglePin>
	   osDelay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f001 fd78 	bl	80021b0 <osDelay>
   while(i--){
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	1e5a      	subs	r2, r3, #1
 80006c4:	60fa      	str	r2, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f3      	bne.n	80006b2 <th3_sos_fun+0x2e>
    }
   }
   osDelay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 fd70 	bl	80021b0 <osDelay>
   if(osSemaphoreWait(bt_Handle, osWaitForever) == osOK){
 80006d0:	e7e2      	b.n	8000698 <th3_sos_fun+0x14>
 80006d2:	bf00      	nop
 80006d4:	20003d84 	.word	0x20003d84
 80006d8:	40020000 	.word	0x40020000

080006dc <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END th3_sos_fun */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ec:	d104      	bne.n	80006f8 <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease(bt_Handle);
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_GPIO_EXTI_Callback+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fe6c 	bl	80023d0 <osSemaphoreRelease>
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20003d84 	.word	0x20003d84

08000704 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <MX_GPIO_Init+0x100>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a38      	ldr	r2, [pc, #224]	; (8000804 <MX_GPIO_Init+0x100>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <MX_GPIO_Init+0x100>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <MX_GPIO_Init+0x100>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <MX_GPIO_Init+0x100>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0x100>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x100>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <MX_GPIO_Init+0x100>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_GPIO_Init+0x100>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_GPIO_Init+0x100>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <MX_GPIO_Init+0x100>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_GPIO_Init+0x100>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2120      	movs	r1, #32
 800078e:	481e      	ldr	r0, [pc, #120]	; (8000808 <MX_GPIO_Init+0x104>)
 8000790:	f000 fc90 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0x108>)
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <MX_GPIO_Init+0x10c>)
 80007aa:	f000 faf1 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ae:	230c      	movs	r3, #12
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007be:	2307      	movs	r3, #7
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <MX_GPIO_Init+0x104>)
 80007ca:	f000 fae1 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <MX_GPIO_Init+0x104>)
 80007e6:	f000 fad3 	bl	8000d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2105      	movs	r1, #5
 80007ee:	2028      	movs	r0, #40	; 0x28
 80007f0:	f000 faa4 	bl	8000d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 fabd 	bl	8000d74 <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	10210000 	.word	0x10210000
 8000810:	40020800 	.word	0x40020800

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 f996 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f808 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff ff70 	bl	8000704 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000824:	f7ff fe7c 	bl	8000520 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8000828:	f001 fc94 	bl	8002154 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0x18>
	...

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2234      	movs	r2, #52	; 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 ff7f 	bl	8004742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0xdc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a2b      	ldr	r2, [pc, #172]	; (800090c <SystemClock_Config+0xdc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xdc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xe0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a25      	ldr	r2, [pc, #148]	; (8000910 <SystemClock_Config+0xe0>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008a4:	23b4      	movs	r3, #180	; 0xb4
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 ff89 	bl	80017d0 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008c4:	f000 f838 	bl	8000938 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c8:	f000 fc5a 	bl	8001180 <HAL_PWREx_EnableOverDrive>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008d2:	f000 f831 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2105      	movs	r1, #5
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fc93 	bl	8001220 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000900:	f000 f81a 	bl	8000938 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 f931 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_MspInit+0x64>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <HAL_MspInit+0x64>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_MspInit+0x64>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x64>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x64>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x64>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 f9d5 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2105      	movs	r1, #5
 8000996:	2001      	movs	r0, #1
 8000998:	f000 f9d0 	bl	8000d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800099c:	2001      	movs	r0, #1
 800099e:	f000 f9e9 	bl	8000d74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	2036      	movs	r0, #54	; 0x36
 80009c6:	f000 f9b9 	bl	8000d3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80009ca:	2036      	movs	r0, #54	; 0x36
 80009cc:	f000 f9d2 	bl	8000d74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <HAL_InitTick+0xa4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <HAL_InitTick+0xa4>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_InitTick+0xa4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ec:	f107 0210 	add.w	r2, r7, #16
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fd18 	bl	800142c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009fc:	f000 fd02 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8000a00:	4603      	mov	r3, r0
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_InitTick+0xa8>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	0c9b      	lsrs	r3, r3, #18
 8000a10:	3b01      	subs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_InitTick+0xac>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_InitTick+0xb0>)
 8000a18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_InitTick+0xac>)
 8000a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_InitTick+0xac>)
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_InitTick+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_InitTick+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_InitTick+0xac>)
 8000a36:	f001 f925 	bl	8001c84 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_InitTick+0xac>)
 8000a42:	f001 f954 	bl	8001cee <HAL_TIM_Base_Start_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	20003d8c 	.word	0x20003d8c
 8000a60:	40001000 	.word	0x40001000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000a9c:	f000 fb56 	bl	800114c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000aa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aac:	f000 fb36 	bl	800111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM6_DAC_IRQHandler+0x10>)
 8000aba:	f001 f93c 	bl	8001d36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20003d8c 	.word	0x20003d8c

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x28>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x28>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x28>)
 8000ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr  r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd3 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 fddf 	bl	80046e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fe75 	bl	8000814 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b30:	080047f0 	.word	0x080047f0
  ldr  r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b3c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b40:	20003dd0 	.word	0x20003dd0

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff1a 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fee4 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20003dcc 	.word	0x20003dcc

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20003dcc 	.word	0x20003dcc

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e165      	b.n	8001078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 8154 	bne.w	8001072 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d00b      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dde:	2b11      	cmp	r3, #17
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0xfc>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ae 	beq.w	8001072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b5c      	ldr	r3, [pc, #368]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b59      	ldr	r3, [pc, #356]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x206>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x202>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e00c      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e00a      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f96:	2305      	movs	r3, #5
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4934      	ldr	r1, [pc, #208]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fee:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_GPIO_Init+0x320>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_GPIO_Init+0x320>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_GPIO_Init+0x320>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f ae96 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	3724      	adds	r7, #36	; 0x24
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40023800 	.word	0x40023800
 8001090:	40013800 	.word	0x40013800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	401a      	ands	r2, r3
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d104      	bne.n	800110a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001108:	e002      	b.n	8001110 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff face 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800115c:	f000 f808 	bl	8001170 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001162:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001166:	615a      	str	r2, [r3, #20]
  }
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_PWREx_EnableOverDrive+0x90>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_PWREx_EnableOverDrive+0x90>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_PWREx_EnableOverDrive+0x90>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_PWREx_EnableOverDrive+0x94>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ac:	f7ff fd02 	bl	8000bb4 <HAL_GetTick>
 80011b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b2:	e009      	b.n	80011c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011b4:	f7ff fcfe 	bl	8000bb4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c2:	d901      	bls.n	80011c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e01f      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_PWREx_EnableOverDrive+0x98>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d1ee      	bne.n	80011b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011dc:	f7ff fcea 	bl	8000bb4 <HAL_GetTick>
 80011e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e2:	e009      	b.n	80011f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011e4:	f7ff fce6 	bl	8000bb4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f2:	d901      	bls.n	80011f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e007      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_PWREx_EnableOverDrive+0x98>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001204:	d1ee      	bne.n	80011e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	420e0040 	.word	0x420e0040
 8001218:	40007000 	.word	0x40007000
 800121c:	420e0044 	.word	0x420e0044

08001220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0cc      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d90c      	bls.n	800125c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800127e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d044      	beq.n	8001340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d119      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e067      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f023 0203 	bic.w	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4934      	ldr	r1, [pc, #208]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fc50 	bl	8000bb4 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	e00a      	b.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fc4c 	bl	8000bb4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e04f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 020c 	and.w	r2, r3, #12
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1eb      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d20c      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f873 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 80013aa:	4601      	mov	r1, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	fa21 f303 	lsr.w	r3, r1, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff faf2 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	080047c8 	.word	0x080047c8
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_RCC_GetHCLKFreq+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff0 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 800140c:	4601      	mov	r1, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	080047d8 	.word	0x080047d8

0800142c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	220f      	movs	r2, #15
 800143a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_GetClockConfig+0x5c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_RCC_GetClockConfig+0x60>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 020f 	and.w	r2, r3, #15
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40023c00 	.word	0x40023c00

08001490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014aa:	4bc6      	ldr	r3, [pc, #792]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	f200 817e 	bhi.w	80017b4 <HAL_RCC_GetSysClockFreq+0x324>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <HAL_RCC_GetSysClockFreq+0x30>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014f5 	.word	0x080014f5
 80014c4:	080017b5 	.word	0x080017b5
 80014c8:	080017b5 	.word	0x080017b5
 80014cc:	080017b5 	.word	0x080017b5
 80014d0:	080014fb 	.word	0x080014fb
 80014d4:	080017b5 	.word	0x080017b5
 80014d8:	080017b5 	.word	0x080017b5
 80014dc:	080017b5 	.word	0x080017b5
 80014e0:	08001501 	.word	0x08001501
 80014e4:	080017b5 	.word	0x080017b5
 80014e8:	080017b5 	.word	0x080017b5
 80014ec:	080017b5 	.word	0x080017b5
 80014f0:	0800165d 	.word	0x0800165d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f4:	4bb4      	ldr	r3, [pc, #720]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80014f6:	613b      	str	r3, [r7, #16]
       break;
 80014f8:	e15f      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014fa:	4bb4      	ldr	r3, [pc, #720]	; (80017cc <HAL_RCC_GetSysClockFreq+0x33c>)
 80014fc:	613b      	str	r3, [r7, #16]
      break;
 80014fe:	e15c      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001500:	4bb0      	ldr	r3, [pc, #704]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001508:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150a:	4bae      	ldr	r3, [pc, #696]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d04a      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001516:	4bab      	ldr	r3, [pc, #684]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	ea03 0501 	and.w	r5, r3, r1
 800152c:	ea04 0602 	and.w	r6, r4, r2
 8001530:	4629      	mov	r1, r5
 8001532:	4632      	mov	r2, r6
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	f04f 0400 	mov.w	r4, #0
 800153c:	0154      	lsls	r4, r2, #5
 800153e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001542:	014b      	lsls	r3, r1, #5
 8001544:	4619      	mov	r1, r3
 8001546:	4622      	mov	r2, r4
 8001548:	1b49      	subs	r1, r1, r5
 800154a:	eb62 0206 	sbc.w	r2, r2, r6
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	0194      	lsls	r4, r2, #6
 8001558:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800155c:	018b      	lsls	r3, r1, #6
 800155e:	1a5b      	subs	r3, r3, r1
 8001560:	eb64 0402 	sbc.w	r4, r4, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	00e2      	lsls	r2, r4, #3
 800156e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001572:	00d9      	lsls	r1, r3, #3
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	195b      	adds	r3, r3, r5
 800157a:	eb44 0406 	adc.w	r4, r4, r6
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	0262      	lsls	r2, r4, #9
 8001588:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800158c:	0259      	lsls	r1, r3, #9
 800158e:	460b      	mov	r3, r1
 8001590:	4614      	mov	r4, r2
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f04f 0400 	mov.w	r4, #0
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	f7fe fe36 	bl	8000210 <__aeabi_uldivmod>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e049      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	ea03 0501 	and.w	r5, r3, r1
 80015c2:	ea04 0602 	and.w	r6, r4, r2
 80015c6:	4629      	mov	r1, r5
 80015c8:	4632      	mov	r2, r6
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	0154      	lsls	r4, r2, #5
 80015d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015d8:	014b      	lsls	r3, r1, #5
 80015da:	4619      	mov	r1, r3
 80015dc:	4622      	mov	r2, r4
 80015de:	1b49      	subs	r1, r1, r5
 80015e0:	eb62 0206 	sbc.w	r2, r2, r6
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	f04f 0400 	mov.w	r4, #0
 80015ec:	0194      	lsls	r4, r2, #6
 80015ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f2:	018b      	lsls	r3, r1, #6
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	eb64 0402 	sbc.w	r4, r4, r2
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	00e2      	lsls	r2, r4, #3
 8001604:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001608:	00d9      	lsls	r1, r3, #3
 800160a:	460b      	mov	r3, r1
 800160c:	4614      	mov	r4, r2
 800160e:	195b      	adds	r3, r3, r5
 8001610:	eb44 0406 	adc.w	r4, r4, r6
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	02a2      	lsls	r2, r4, #10
 800161e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001622:	0299      	lsls	r1, r3, #10
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	4618      	mov	r0, r3
 800162a:	4621      	mov	r1, r4
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f04f 0400 	mov.w	r4, #0
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	f7fe fdeb 	bl	8000210 <__aeabi_uldivmod>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001640:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	3301      	adds	r3, #1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	613b      	str	r3, [r7, #16]
      break;
 800165a:	e0ae      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04a      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	ea03 0501 	and.w	r5, r3, r1
 8001688:	ea04 0602 	and.w	r6, r4, r2
 800168c:	4629      	mov	r1, r5
 800168e:	4632      	mov	r2, r6
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	f04f 0400 	mov.w	r4, #0
 8001698:	0154      	lsls	r4, r2, #5
 800169a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800169e:	014b      	lsls	r3, r1, #5
 80016a0:	4619      	mov	r1, r3
 80016a2:	4622      	mov	r2, r4
 80016a4:	1b49      	subs	r1, r1, r5
 80016a6:	eb62 0206 	sbc.w	r2, r2, r6
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	0194      	lsls	r4, r2, #6
 80016b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b8:	018b      	lsls	r3, r1, #6
 80016ba:	1a5b      	subs	r3, r3, r1
 80016bc:	eb64 0402 	sbc.w	r4, r4, r2
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ce:	00d9      	lsls	r1, r3, #3
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	195b      	adds	r3, r3, r5
 80016d6:	eb44 0406 	adc.w	r4, r4, r6
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	0262      	lsls	r2, r4, #9
 80016e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016e8:	0259      	lsls	r1, r3, #9
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7fe fd88 	bl	8000210 <__aeabi_uldivmod>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e049      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	f04f 0400 	mov.w	r4, #0
 8001712:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	ea03 0501 	and.w	r5, r3, r1
 800171e:	ea04 0602 	and.w	r6, r4, r2
 8001722:	4629      	mov	r1, r5
 8001724:	4632      	mov	r2, r6
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	0154      	lsls	r4, r2, #5
 8001730:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001734:	014b      	lsls	r3, r1, #5
 8001736:	4619      	mov	r1, r3
 8001738:	4622      	mov	r2, r4
 800173a:	1b49      	subs	r1, r1, r5
 800173c:	eb62 0206 	sbc.w	r2, r2, r6
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f04f 0400 	mov.w	r4, #0
 8001748:	0194      	lsls	r4, r2, #6
 800174a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	1a5b      	subs	r3, r3, r1
 8001752:	eb64 0402 	sbc.w	r4, r4, r2
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	00e2      	lsls	r2, r4, #3
 8001760:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001764:	00d9      	lsls	r1, r3, #3
 8001766:	460b      	mov	r3, r1
 8001768:	4614      	mov	r4, r2
 800176a:	195b      	adds	r3, r3, r5
 800176c:	eb44 0406 	adc.w	r4, r4, r6
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	02a2      	lsls	r2, r4, #10
 800177a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800177e:	0299      	lsls	r1, r3, #10
 8001780:	460b      	mov	r3, r1
 8001782:	4614      	mov	r4, r2
 8001784:	4618      	mov	r0, r3
 8001786:	4621      	mov	r1, r4
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	461a      	mov	r2, r3
 8001790:	4623      	mov	r3, r4
 8001792:	f7fe fd3d 	bl	8000210 <__aeabi_uldivmod>
 8001796:	4603      	mov	r3, r0
 8001798:	460c      	mov	r4, r1
 800179a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x334>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0f1b      	lsrs	r3, r3, #28
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x338>)
 80017b6:	613b      	str	r3, [r7, #16]
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	693b      	ldr	r3, [r7, #16]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8083 	beq.w	80018f0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017ea:	4b95      	ldr	r3, [pc, #596]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f6:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001802:	4b8f      	ldr	r3, [pc, #572]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d00c      	beq.n	800182a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001810:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d112      	bne.n	8001842 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181c:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001828:	d10b      	bne.n	8001842 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d05b      	beq.n	80018ee <HAL_RCC_OscConfig+0x11e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d157      	bne.n	80018ee <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e216      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x8a>
 800184c:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e01d      	b.n	8001896 <HAL_RCC_OscConfig+0xc6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0xae>
 8001864:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a75      	ldr	r2, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0xc6>
 800187e:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6c      	ldr	r2, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d013      	beq.n	80018c6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f989 	bl	8000bb4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff f985 	bl	8000bb4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1db      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0xd6>
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f975 	bl	8000bb4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ce:	f7ff f971 	bl	8000bb4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1c7      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0xfe>
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06f      	beq.n	80019dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b00      	cmp	r3, #0
 8001906:	d017      	beq.n	8001938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001910:	2b08      	cmp	r3, #8
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d11c      	bne.n	8001966 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x180>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e18f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4938      	ldr	r1, [pc, #224]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001964:	e03a      	b.n	80019dc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d020      	beq.n	80019b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f91e 	bl	8000bb4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff f91a 	bl	8000bb4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e170      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4925      	ldr	r1, [pc, #148]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
 80019ae:	e015      	b.n	80019dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f8fd 	bl	8000bb4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f8f9 	bl	8000bb4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e14f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d037      	beq.n	8001a58 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d016      	beq.n	8001a1e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f8dd 	bl	8000bb4 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff f8d9 	bl	8000bb4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e12f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x270>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x22e>
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f8c6 	bl	8000bb4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8c2 	bl	8000bb4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e118      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470000 	.word	0x42470000
 8001a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8097 	beq.w	8001b94 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b83      	ldr	r3, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b79      	ldr	r3, [pc, #484]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f881 	bl	8000bb4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff f87d 	bl	8000bb4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0d3      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x31a>
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x354>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x33c>
 8001af2:	4b61      	ldr	r3, [pc, #388]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a5d      	ldr	r2, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x354>
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a59      	ldr	r2, [pc, #356]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b1e:	f023 0304 	bic.w	r3, r3, #4
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f842 	bl	8000bb4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f83e 	bl	8000bb4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e092      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ee      	beq.n	8001b34 <HAL_RCC_OscConfig+0x364>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f82c 	bl	8000bb4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f828 	bl	8000bb4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e07c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ee      	bne.n	8001b60 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d068      	beq.n	8001c6e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d060      	beq.n	8001c6a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d145      	bne.n	8001c3c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7fe fffd 	bl	8000bb4 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fff9 	bl	8000bb4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e04f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	019b      	lsls	r3, r3, #6
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	071b      	lsls	r3, r3, #28
 8001c08:	491b      	ldr	r1, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7fe ffce 	bl	8000bb4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe ffca 	bl	8000bb4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e020      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x44c>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe ffb7 	bl	8000bb4 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ffb3 	bl	8000bb4 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x4a8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x47a>
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	42470060 	.word	0x42470060

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e01d      	b.n	8001cd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f815 	bl	8001cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 f968 	bl	8001f98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d122      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d11b      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0202 	mvn.w	r2, #2
 8001d62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f8ee 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001d7e:	e005      	b.n	8001d8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8e0 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8f1 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d122      	bne.n	8001de6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d11b      	bne.n	8001de6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0204 	mvn.w	r2, #4
 8001db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8c4 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001dd2:	e005      	b.n	8001de0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8b6 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8c7 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d122      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11b      	bne.n	8001e3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0208 	mvn.w	r2, #8
 8001e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f89a 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001e26:	e005      	b.n	8001e34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f88c 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f89d 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d122      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d11b      	bne.n	8001e8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0210 	mvn.w	r2, #16
 8001e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2208      	movs	r2, #8
 8001e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f870 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001e7a:	e005      	b.n	8001e88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f862 	bl	8001f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f873 	bl	8001f6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10e      	bne.n	8001eba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 0201 	mvn.w	r2, #1
 8001eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fd2d 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d107      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f903 	bl	80020ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d10e      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f838 	bl	8001f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d10e      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d107      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0220 	mvn.w	r2, #32
 8001f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8cd 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a40      	ldr	r2, [pc, #256]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3a      	ldr	r2, [pc, #232]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d027      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <TIM_Base_SetConfig+0x118>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d023      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <TIM_Base_SetConfig+0x11c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <TIM_Base_SetConfig+0x120>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <TIM_Base_SetConfig+0x124>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d017      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <TIM_Base_SetConfig+0x128>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <TIM_Base_SetConfig+0x12c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00f      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <TIM_Base_SetConfig+0x130>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00b      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <TIM_Base_SetConfig+0x134>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <TIM_Base_SetConfig+0x138>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <TIM_Base_SetConfig+0x13c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d108      	bne.n	800205c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <TIM_Base_SetConfig+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0xf8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <TIM_Base_SetConfig+0x124>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	615a      	str	r2, [r3, #20]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800
 80020cc:	40001800 	.word	0x40001800
 80020d0:	40001c00 	.word	0x40001c00
 80020d4:	40002000 	.word	0x40002000

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002112:	2b84      	cmp	r3, #132	; 0x84
 8002114:	d005      	beq.n	8002122 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002116:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	3303      	adds	r3, #3
 8002120:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002136:	f3ef 8305 	mrs	r3, IPSR
 800213a:	607b      	str	r3, [r7, #4]
  return(result);
 800213c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002158:	f001 f8a4 	bl	80032a4 <vTaskStartScheduler>
  
  return osOK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}

08002162 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002164:	b087      	sub	sp, #28
 8002166:	af02      	add	r7, sp, #8
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685c      	ldr	r4, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002178:	b29e      	uxth	r6, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffbd 	bl	8002100 <makeFreeRtosPriority>
 8002186:	4602      	mov	r2, r0
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	9200      	str	r2, [sp, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4632      	mov	r2, r6
 8002194:	4629      	mov	r1, r5
 8002196:	4620      	mov	r0, r4
 8002198:	f000 ff27 	bl	8002fea <xTaskCreate>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <osDelay+0x16>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	e000      	b.n	80021c8 <osDelay+0x18>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f837 	bl	800323c <vTaskDelay>
  
  return osOK;
 80021ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80021e0:	2001      	movs	r0, #1
 80021e2:	f000 fab9 	bl	8002758 <xQueueCreateMutex>
 80021e6:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <osMutexWait+0x18>
    return osErrorParameter;
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	e03a      	b.n	800227e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002212:	d103      	bne.n	800221c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e009      	b.n	8002230 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d006      	beq.n	8002230 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <osMutexWait+0x40>
      ticks = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002230:	f7ff ff7e 	bl	8002130 <inHandlerMode>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d017      	beq.n	800226a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	461a      	mov	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fd2c 	bl	8002ca0 <xQueueReceiveFromISR>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <osMutexWait+0x62>
      return osErrorOS;
 800224e:	23ff      	movs	r3, #255	; 0xff
 8002250:	e015      	b.n	800227e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d011      	beq.n	800227c <osMutexWait+0x8c>
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <osMutexWait+0x98>)
 800225a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	e008      	b.n	800227c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fc0f 	bl	8002a90 <xQueueSemaphoreTake>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <osMutexWait+0x8c>
    return osErrorOS;
 8002278:	23ff      	movs	r3, #255	; 0xff
 800227a:	e000      	b.n	800227e <osMutexWait+0x8e>
  }
  
  return osOK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800229c:	f7ff ff48 	bl	8002130 <inHandlerMode>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fb65 	bl	800297c <xQueueGiveFromISR>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d001      	beq.n	80022bc <osMutexRelease+0x30>
      return osErrorOS;
 80022b8:	23ff      	movs	r3, #255	; 0xff
 80022ba:	e017      	b.n	80022ec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d013      	beq.n	80022ea <osMutexRelease+0x5e>
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <osMutexRelease+0x68>)
 80022c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	e00a      	b.n	80022ea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80022d4:	2300      	movs	r3, #0
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fa54 	bl	8002788 <xQueueGenericSend>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d110      	bne.n	800232a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8002308:	2203      	movs	r2, #3
 800230a:	2100      	movs	r1, #0
 800230c:	2001      	movs	r0, #1
 800230e:	f000 f9b1 	bl	8002674 <xQueueGenericCreate>
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <osSemaphoreCreate+0x2e>
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa31 	bl	8002788 <xQueueGenericSend>
    return sema;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	e000      	b.n	800232c <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800232a:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	e03a      	b.n	80023c2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d103      	bne.n	8002360 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e009      	b.n	8002374 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <osSemaphoreWait+0x40>
      ticks = 1;
 8002370:	2301      	movs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002374:	f7ff fedc 	bl	8002130 <inHandlerMode>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d017      	beq.n	80023ae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	461a      	mov	r2, r3
 8002384:	2100      	movs	r1, #0
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fc8a 	bl	8002ca0 <xQueueReceiveFromISR>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002392:	23ff      	movs	r3, #255	; 0xff
 8002394:	e015      	b.n	80023c2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d011      	beq.n	80023c0 <osSemaphoreWait+0x8c>
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <osSemaphoreWait+0x98>)
 800239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	e008      	b.n	80023c0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fb6d 	bl	8002a90 <xQueueSemaphoreTake>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d001      	beq.n	80023c0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80023bc:	23ff      	movs	r3, #255	; 0xff
 80023be:	e000      	b.n	80023c2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000ed04 	.word	0xe000ed04

080023d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80023e0:	f7ff fea6 	bl	8002130 <inHandlerMode>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fac3 	bl	800297c <xQueueGiveFromISR>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d001      	beq.n	8002400 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80023fc:	23ff      	movs	r3, #255	; 0xff
 80023fe:	e017      	b.n	8002430 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <osSemaphoreRelease+0x5e>
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <osSemaphoreRelease+0x68>)
 8002408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	e00a      	b.n	800242e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002418:	2300      	movs	r3, #0
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9b2 	bl	8002788 <xQueueGenericSend>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800242a:	23ff      	movs	r3, #255	; 0xff
 800242c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0208 	add.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0208 	add.w	r2, r3, #8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d103      	bne.n	80024fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e00c      	b.n	8002518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3308      	adds	r3, #8
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e002      	b.n	800250c <vListInsert+0x2e>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d2f6      	bcs.n	8002506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6852      	ldr	r2, [r2, #4]
 8002570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d103      	bne.n	8002584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	e7fe      	b.n	80025ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80025cc:	f001 fd96 	bl	80040fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	441a      	add	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	3b01      	subs	r3, #1
 80025fe:	68f9      	ldr	r1, [r7, #12]
 8002600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	441a      	add	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	22ff      	movs	r2, #255	; 0xff
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d114      	bne.n	800264c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01a      	beq.n	8002660 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3310      	adds	r3, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f001 f862 	bl	80036f8 <xTaskRemoveFromEventList>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <xQueueGenericReset+0xcc>)
 800263c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	e009      	b.n	8002660 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3310      	adds	r3, #16
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fef3 	bl	800243c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3324      	adds	r3, #36	; 0x24
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff feee 	bl	800243c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002660:	f001 fd7a 	bl	8004158 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xQueueGenericCreate+0x28>
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e7fe      	b.n	800269a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e004      	b.n	80026b2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3348      	adds	r3, #72	; 0x48
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fe3a 	bl	8004330 <pvPortMalloc>
 80026bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3348      	adds	r3, #72	; 0x48
 80026c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ca:	79fa      	ldrb	r2, [r7, #7]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f805 	bl	80026e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026dc:	69bb      	ldr	r3, [r7, #24]
	}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e002      	b.n	8002708 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002714:	2101      	movs	r1, #1
 8002716:	69b8      	ldr	r0, [r7, #24]
 8002718:	f7ff ff44 	bl	80025a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00e      	beq.n	8002750 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f81c 	bl	8002788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002762:	2301      	movs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	461a      	mov	r2, r3
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f7ff ff7f 	bl	8002674 <xQueueGenericCreate>
 8002776:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ffd3 	bl	8002724 <prvInitialiseMutex>

		return pxNewQueue;
 800277e:	68fb      	ldr	r3, [r7, #12]
	}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	; 0x38
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <xQueueGenericSend+0x30>
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b6:	e7fe      	b.n	80027b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <xQueueGenericSend+0x3e>
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueGenericSend+0x42>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueGenericSend+0x44>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <xQueueGenericSend+0x5c>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	e7fe      	b.n	80027e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d103      	bne.n	80027f2 <xQueueGenericSend+0x6a>
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <xQueueGenericSend+0x6e>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <xQueueGenericSend+0x70>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <xQueueGenericSend+0x88>
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	e7fe      	b.n	800280e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002810:	f001 f910 	bl	8003a34 <xTaskGetSchedulerState>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <xQueueGenericSend+0x98>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <xQueueGenericSend+0x9c>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <xQueueGenericSend+0x9e>
 8002824:	2300      	movs	r3, #0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <xQueueGenericSend+0xb6>
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	e7fe      	b.n	800283c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800283e:	f001 fc5d 	bl	80040fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <xQueueGenericSend+0xcc>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d129      	bne.n	80028a8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285a:	f000 fab6 	bl	8002dca <prvCopyDataToQueue>
 800285e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b00      	cmp	r3, #0
 8002866:	d010      	beq.n	800288a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	4618      	mov	r0, r3
 800286e:	f000 ff43 	bl	80036f8 <xTaskRemoveFromEventList>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <xQueueGenericSend+0x1f0>)
 800287a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	e00a      	b.n	80028a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <xQueueGenericSend+0x1f0>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028a0:	f001 fc5a 	bl	8004158 <vPortExitCritical>
				return pdPASS;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e063      	b.n	8002970 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ae:	f001 fc53 	bl	8004158 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e05c      	b.n	8002970 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 ff7b 	bl	80037bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ca:	f001 fc45 	bl	8004158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ce:	f000 fd2f 	bl	8003330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d2:	f001 fc13 	bl	80040fc <vPortEnterCritical>
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d103      	bne.n	80028ec <xQueueGenericSend+0x164>
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d103      	bne.n	8002902 <xQueueGenericSend+0x17a>
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002902:	f001 fc29 	bl	8004158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002906:	1d3a      	adds	r2, r7, #4
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff6a 	bl	80037e8 <xTaskCheckForTimeOut>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d124      	bne.n	8002964 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800291a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800291c:	f000 fb4d 	bl	8002fba <prvIsQueueFull>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d018      	beq.n	8002958 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	3310      	adds	r3, #16
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 febe 	bl	80036b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002936:	f000 fad8 	bl	8002eea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800293a:	f000 fd07 	bl	800334c <xTaskResumeAll>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f af7c 	bne.w	800283e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <xQueueGenericSend+0x1f0>)
 8002948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	e772      	b.n	800283e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800295a:	f000 fac6 	bl	8002eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800295e:	f000 fcf5 	bl	800334c <xTaskResumeAll>
 8002962:	e76c      	b.n	800283e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002966:	f000 fac0 	bl	8002eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800296a:	f000 fcef 	bl	800334c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800296e:	2300      	movs	r3, #0
		}
	}
}
 8002970:	4618      	mov	r0, r3
 8002972:	3738      	adds	r7, #56	; 0x38
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	; 0x38
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <xQueueGiveFromISR+0x28>
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	e7fe      	b.n	80029a2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <xQueueGiveFromISR+0x44>
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e7fe      	b.n	80029be <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <xQueueGiveFromISR+0x54>
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <xQueueGiveFromISR+0x58>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <xQueueGiveFromISR+0x5a>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <xQueueGiveFromISR+0x72>
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e7fe      	b.n	80029ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029ee:	f001 fc61 	bl	80042b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029f2:	f3ef 8211 	mrs	r2, BASEPRI
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	617a      	str	r2, [r7, #20]
 8002a08:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d22b      	bcs.n	8002a76 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d112      	bne.n	8002a60 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	3324      	adds	r3, #36	; 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe56 	bl	80036f8 <xTaskRemoveFromEventList>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00e      	beq.n	8002a70 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e007      	b.n	8002a70 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a64:	3301      	adds	r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	b25a      	sxtb	r2, r3
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
 8002a74:	e001      	b.n	8002a7a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3738      	adds	r7, #56	; 0x38
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e7fe      	b.n	8002abe <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <xQueueSemaphoreTake+0x4c>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e7fe      	b.n	8002ada <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002adc:	f000 ffaa 	bl	8003a34 <xTaskGetSchedulerState>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <xQueueSemaphoreTake+0x5c>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <xQueueSemaphoreTake+0x60>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <xQueueSemaphoreTake+0x62>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <xQueueSemaphoreTake+0x7a>
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	e7fe      	b.n	8002b08 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b0a:	f001 faf7 	bl	80040fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d024      	beq.n	8002b64 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002b2a:	f001 f949 	bl	8003dc0 <pvTaskIncrementMutexHeldCount>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	3310      	adds	r3, #16
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fdd9 	bl	80036f8 <xTaskRemoveFromEventList>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <xQueueSemaphoreTake+0x20c>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b5c:	f001 fafc 	bl	8004158 <vPortExitCritical>
				return pdPASS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e096      	b.n	8002c92 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d110      	bne.n	8002b8c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <xQueueSemaphoreTake+0xf4>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e7fe      	b.n	8002b82 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b84:	f001 fae8 	bl	8004158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	e082      	b.n	8002c92 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fe10 	bl	80037bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ba0:	f001 fada 	bl	8004158 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ba4:	f000 fbc4 	bl	8003330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ba8:	f001 faa8 	bl	80040fc <vPortEnterCritical>
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d103      	bne.n	8002bc2 <xQueueSemaphoreTake+0x132>
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d103      	bne.n	8002bd8 <xQueueSemaphoreTake+0x148>
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd8:	f001 fabe 	bl	8004158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bdc:	463a      	mov	r2, r7
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fdff 	bl	80037e8 <xTaskCheckForTimeOut>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d132      	bne.n	8002c56 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bf2:	f000 f9cc 	bl	8002f8e <prvIsQueueEmpty>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d026      	beq.n	8002c4a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002c04:	f001 fa7a 	bl	80040fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 ff2f 	bl	8003a70 <xTaskPriorityInherit>
 8002c12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002c14:	f001 faa0 	bl	8004158 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	3324      	adds	r3, #36	; 0x24
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd45 	bl	80036b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c28:	f000 f95f 	bl	8002eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c2c:	f000 fb8e 	bl	800334c <xTaskResumeAll>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f af69 	bne.w	8002b0a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <xQueueSemaphoreTake+0x20c>)
 8002c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	e75f      	b.n	8002b0a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c4c:	f000 f94d 	bl	8002eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c50:	f000 fb7c 	bl	800334c <xTaskResumeAll>
 8002c54:	e759      	b.n	8002b0a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c58:	f000 f947 	bl	8002eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c5c:	f000 fb76 	bl	800334c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c62:	f000 f994 	bl	8002f8e <prvIsQueueEmpty>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f43f af4e 	beq.w	8002b0a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002c74:	f001 fa42 	bl	80040fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c7a:	f000 f88e 	bl	8002d9a <prvGetDisinheritPriorityAfterTimeout>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fffc 	bl	8003c84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c8c:	f001 fa64 	bl	8004158 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3738      	adds	r7, #56	; 0x38
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <xQueueReceiveFromISR+0x2a>
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <xQueueReceiveFromISR+0x38>
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <xQueueReceiveFromISR+0x3c>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <xQueueReceiveFromISR+0x3e>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <xQueueReceiveFromISR+0x56>
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cf6:	f001 fadd 	bl	80042b4 <vPortValidateInterruptPriority>
	__asm volatile
 8002cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61ba      	str	r2, [r7, #24]
 8002d10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002d12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02f      	beq.n	8002d82 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d30:	f000 f8b5 	bl	8002e9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d112      	bne.n	8002d6c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	3310      	adds	r3, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fcd0 	bl	80036f8 <xTaskRemoveFromEventList>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00e      	beq.n	8002d7c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e007      	b.n	8002d7c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	b25a      	sxtb	r2, r3
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d80:	e001      	b.n	8002d86 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3738      	adds	r7, #56	; 0x38
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1c3 0307 	rsb	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e001      	b.n	8002dbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
	}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14d      	bne.n	8002e8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fec1 	bl	8003b7c <xTaskPriorityDisinherit>
 8002dfa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e043      	b.n	8002e8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d119      	bne.n	8002e3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6898      	ldr	r0, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	461a      	mov	r2, r3
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	f001 fc89 	bl	800472c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d32b      	bcc.n	8002e8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e026      	b.n	8002e8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68d8      	ldr	r0, [r3, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	461a      	mov	r2, r3
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	f001 fc6f 	bl	800472c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	425b      	negs	r3, r3
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d207      	bcs.n	8002e7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	425b      	negs	r3, r3
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d105      	bne.n	8002e8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e94:	697b      	ldr	r3, [r7, #20]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d303      	bcc.n	8002ed2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	461a      	mov	r2, r3
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f001 fc25 	bl	800472c <memcpy>
	}
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ef2:	f001 f903 	bl	80040fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002efe:	e011      	b.n	8002f24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3324      	adds	r3, #36	; 0x24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fbf3 	bl	80036f8 <xTaskRemoveFromEventList>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f18:	f000 fcc6 	bl	80038a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	dce9      	bgt.n	8002f00 <prvUnlockQueue+0x16>
 8002f2c:	e000      	b.n	8002f30 <prvUnlockQueue+0x46>
					break;
 8002f2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	22ff      	movs	r2, #255	; 0xff
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f38:	f001 f90e 	bl	8004158 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f3c:	f001 f8de 	bl	80040fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f48:	e011      	b.n	8002f6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3310      	adds	r3, #16
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fbce 	bl	80036f8 <xTaskRemoveFromEventList>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f62:	f000 fca1 	bl	80038a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dce9      	bgt.n	8002f4a <prvUnlockQueue+0x60>
 8002f76:	e000      	b.n	8002f7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f82:	f001 f8e9 	bl	8004158 <vPortExitCritical>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f96:	f001 f8b1 	bl	80040fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e001      	b.n	8002fac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fac:	f001 f8d4 	bl	8004158 <vPortExitCritical>

	return xReturn;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fc2:	f001 f89b 	bl	80040fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d102      	bne.n	8002fd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e001      	b.n	8002fdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fdc:	f001 f8bc 	bl	8004158 <vPortExitCritical>

	return xReturn;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08c      	sub	sp, #48	; 0x30
 8002fee:	af04      	add	r7, sp, #16
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f996 	bl	8004330 <pvPortMalloc>
 8003004:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00e      	beq.n	800302a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800300c:	2054      	movs	r0, #84	; 0x54
 800300e:	f001 f98f 	bl	8004330 <pvPortMalloc>
 8003012:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
 8003020:	e005      	b.n	800302e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f001 fa4a 	bl	80044bc <vPortFree>
 8003028:	e001      	b.n	800302e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	2300      	movs	r3, #0
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	9301      	str	r3, [sp, #4]
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f80e 	bl	800306c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003050:	69f8      	ldr	r0, [r7, #28]
 8003052:	f000 f889 	bl	8003168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003056:	2301      	movs	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e002      	b.n	8003062 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003062:	69bb      	ldr	r3, [r7, #24]
	}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003084:	3b01      	subs	r3, #1
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f023 0307 	bic.w	r3, r3, #7
 8003092:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <prvInitialiseNewTask+0x46>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e7fe      	b.n	80030b0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e012      	b.n	80030de <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	7819      	ldrb	r1, [r3, #0]
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	3334      	adds	r3, #52	; 0x34
 80030c8:	460a      	mov	r2, r1
 80030ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d9e9      	bls.n	80030b8 <prvInitialiseNewTask+0x4c>
 80030e4:	e000      	b.n	80030e8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80030e6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d901      	bls.n	80030fa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f6:	2306      	movs	r3, #6
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f9b3 	bl	800247c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	3318      	adds	r3, #24
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f9ae 	bl	800247c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	f1c3 0207 	rsb	r2, r3, #7
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003134:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	68f9      	ldr	r1, [r7, #12]
 8003148:	69b8      	ldr	r0, [r7, #24]
 800314a:	f000 feb3 	bl	8003eb4 <pxPortInitialiseStack>
 800314e:	4602      	mov	r2, r0
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003170:	f000 ffc4 	bl	80040fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <prvAddNewTaskToReadyList+0xb8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a29      	ldr	r2, [pc, #164]	; (8003220 <prvAddNewTaskToReadyList+0xb8>)
 800317c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <prvAddNewTaskToReadyList+0xbc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <prvAddNewTaskToReadyList+0xbc>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <prvAddNewTaskToReadyList+0xb8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d110      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003194:	f000 fbac 	bl	80038f0 <prvInitialiseTaskLists>
 8003198:	e00d      	b.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <prvAddNewTaskToReadyList+0xc0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <prvAddNewTaskToReadyList+0xbc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d802      	bhi.n	80031b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <prvAddNewTaskToReadyList+0xbc>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <prvAddNewTaskToReadyList+0xc4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <prvAddNewTaskToReadyList+0xc4>)
 80031be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <prvAddNewTaskToReadyList+0xc8>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <prvAddNewTaskToReadyList+0xcc>)
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7ff f954 	bl	8002496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031ee:	f000 ffb3 	bl	8004158 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <prvAddNewTaskToReadyList+0xc0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <prvAddNewTaskToReadyList+0xbc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	429a      	cmp	r2, r3
 8003206:	d207      	bcs.n	8003218 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <prvAddNewTaskToReadyList+0xd0>)
 800320a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000012c 	.word	0x2000012c
 8003224:	2000002c 	.word	0x2000002c
 8003228:	20000138 	.word	0x20000138
 800322c:	20000148 	.word	0x20000148
 8003230:	20000134 	.word	0x20000134
 8003234:	20000030 	.word	0x20000030
 8003238:	e000ed04 	.word	0xe000ed04

0800323c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <vTaskDelay+0x60>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <vTaskDelay+0x2e>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e7fe      	b.n	8003268 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800326a:	f000 f861 	bl	8003330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800326e:	2100      	movs	r1, #0
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fdb9 	bl	8003de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003276:	f000 f869 	bl	800334c <xTaskResumeAll>
 800327a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <vTaskDelay+0x64>)
 8003284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000154 	.word	0x20000154
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <vTaskStartScheduler+0x74>)
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	4919      	ldr	r1, [pc, #100]	; (800331c <vTaskStartScheduler+0x78>)
 80032b8:	4819      	ldr	r0, [pc, #100]	; (8003320 <vTaskStartScheduler+0x7c>)
 80032ba:	f7ff fe96 	bl	8002fea <xTaskCreate>
 80032be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d115      	bne.n	80032f2 <vTaskStartScheduler+0x4e>
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <vTaskStartScheduler+0x80>)
 80032da:	f04f 32ff 	mov.w	r2, #4294967295
 80032de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <vTaskStartScheduler+0x84>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <vTaskStartScheduler+0x88>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032ec:	f000 fe68 	bl	8003fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032f0:	e00d      	b.n	800330e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d109      	bne.n	800330e <vTaskStartScheduler+0x6a>
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e7fe      	b.n	800330c <vTaskStartScheduler+0x68>
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000150 	.word	0x20000150
 800331c:	080047c0 	.word	0x080047c0
 8003320:	080038c1 	.word	0x080038c1
 8003324:	2000014c 	.word	0x2000014c
 8003328:	20000138 	.word	0x20000138
 800332c:	20000130 	.word	0x20000130

08003330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <vTaskSuspendAll+0x18>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a03      	ldr	r2, [pc, #12]	; (8003348 <vTaskSuspendAll+0x18>)
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	20000154 	.word	0x20000154

0800334c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800335a:	4b41      	ldr	r3, [pc, #260]	; (8003460 <xTaskResumeAll+0x114>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <xTaskResumeAll+0x2a>
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	e7fe      	b.n	8003374 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003376:	f000 fec1 	bl	80040fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <xTaskResumeAll+0x114>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a37      	ldr	r2, [pc, #220]	; (8003460 <xTaskResumeAll+0x114>)
 8003382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <xTaskResumeAll+0x114>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d161      	bne.n	8003450 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <xTaskResumeAll+0x118>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05d      	beq.n	8003450 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003394:	e02e      	b.n	80033f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003396:	4b34      	ldr	r3, [pc, #208]	; (8003468 <xTaskResumeAll+0x11c>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3318      	adds	r3, #24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f8d4 	bl	8002550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f8cf 	bl	8002550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <xTaskResumeAll+0x120>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	4a2a      	ldr	r2, [pc, #168]	; (800346c <xTaskResumeAll+0x120>)
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <xTaskResumeAll+0x124>)
 80033d2:	441a      	add	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff f85b 	bl	8002496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <xTaskResumeAll+0x128>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <xTaskResumeAll+0x12c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f4:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <xTaskResumeAll+0x11c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1cc      	bne.n	8003396 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003402:	f000 faf1 	bl	80039e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <xTaskResumeAll+0x130>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d010      	beq.n	8003434 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003412:	f000 f837 	bl	8003484 <xTaskIncrementTick>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <xTaskResumeAll+0x12c>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3b01      	subs	r3, #1
 8003426:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f1      	bne.n	8003412 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <xTaskResumeAll+0x130>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <xTaskResumeAll+0x12c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <xTaskResumeAll+0x134>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003450:	f000 fe82 	bl	8004158 <vPortExitCritical>

	return xAlreadyYielded;
 8003454:	68bb      	ldr	r3, [r7, #8]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000154 	.word	0x20000154
 8003464:	2000012c 	.word	0x2000012c
 8003468:	200000ec 	.word	0x200000ec
 800346c:	20000134 	.word	0x20000134
 8003470:	20000030 	.word	0x20000030
 8003474:	2000002c 	.word	0x2000002c
 8003478:	20000140 	.word	0x20000140
 800347c:	2000013c 	.word	0x2000013c
 8003480:	e000ed04 	.word	0xe000ed04

08003484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800348e:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <xTaskIncrementTick+0x14c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 808c 	bne.w	80035b0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003498:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <xTaskIncrementTick+0x150>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a0:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <xTaskIncrementTick+0x150>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11f      	bne.n	80034ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80034ac:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <xTaskIncrementTick+0x154>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <xTaskIncrementTick+0x46>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	e7fe      	b.n	80034c8 <xTaskIncrementTick+0x44>
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <xTaskIncrementTick+0x154>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <xTaskIncrementTick+0x158>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <xTaskIncrementTick+0x154>)
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4a40      	ldr	r2, [pc, #256]	; (80035dc <xTaskIncrementTick+0x158>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <xTaskIncrementTick+0x15c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a3e      	ldr	r2, [pc, #248]	; (80035e0 <xTaskIncrementTick+0x15c>)
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	f000 fa7e 	bl	80039e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034ec:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <xTaskIncrementTick+0x160>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d34d      	bcc.n	8003592 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <xTaskIncrementTick+0x154>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <xTaskIncrementTick+0x80>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <xTaskIncrementTick+0x82>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <xTaskIncrementTick+0x160>)
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	601a      	str	r2, [r3, #0]
					break;
 8003512:	e03e      	b.n	8003592 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <xTaskIncrementTick+0x154>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d203      	bcs.n	8003534 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800352c:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <xTaskIncrementTick+0x160>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6013      	str	r3, [r2, #0]
						break;
 8003532:	e02e      	b.n	8003592 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3304      	adds	r3, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f809 	bl	8002550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3318      	adds	r3, #24
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f800 	bl	8002550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <xTaskIncrementTick+0x164>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <xTaskIncrementTick+0x164>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <xTaskIncrementTick+0x168>)
 8003570:	441a      	add	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fe ff8c 	bl	8002496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <xTaskIncrementTick+0x16c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d3b4      	bcc.n	80034f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003590:	e7b1      	b.n	80034f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <xTaskIncrementTick+0x16c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4914      	ldr	r1, [pc, #80]	; (80035ec <xTaskIncrementTick+0x168>)
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d907      	bls.n	80035ba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e004      	b.n	80035ba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <xTaskIncrementTick+0x170>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <xTaskIncrementTick+0x170>)
 80035b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <xTaskIncrementTick+0x174>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80035c2:	2301      	movs	r3, #1
 80035c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035c6:	697b      	ldr	r3, [r7, #20]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000154 	.word	0x20000154
 80035d4:	20000130 	.word	0x20000130
 80035d8:	200000e4 	.word	0x200000e4
 80035dc:	200000e8 	.word	0x200000e8
 80035e0:	20000144 	.word	0x20000144
 80035e4:	2000014c 	.word	0x2000014c
 80035e8:	20000134 	.word	0x20000134
 80035ec:	20000030 	.word	0x20000030
 80035f0:	2000002c 	.word	0x2000002c
 80035f4:	2000013c 	.word	0x2000013c
 80035f8:	20000140 	.word	0x20000140

080035fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <vTaskSwitchContext+0xa0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <vTaskSwitchContext+0xa4>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003610:	e03e      	b.n	8003690 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <vTaskSwitchContext+0xa4>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <vTaskSwitchContext+0xa8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003626:	7afb      	ldrb	r3, [r7, #11]
 8003628:	f1c3 031f 	rsb	r3, r3, #31
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	491e      	ldr	r1, [pc, #120]	; (80036a8 <vTaskSwitchContext+0xac>)
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	e7fe      	b.n	8003654 <vTaskSwitchContext+0x58>
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <vTaskSwitchContext+0xac>)
 8003662:	4413      	add	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3308      	adds	r3, #8
 8003678:	429a      	cmp	r2, r3
 800367a:	d104      	bne.n	8003686 <vTaskSwitchContext+0x8a>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <vTaskSwitchContext+0xb0>)
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	20000154 	.word	0x20000154
 80036a0:	20000140 	.word	0x20000140
 80036a4:	20000134 	.word	0x20000134
 80036a8:	20000030 	.word	0x20000030
 80036ac:	2000002c 	.word	0x2000002c

080036b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <vTaskPlaceOnEventList+0x24>
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e7fe      	b.n	80036d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <vTaskPlaceOnEventList+0x44>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3318      	adds	r3, #24
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fe fefe 	bl	80024de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036e2:	2101      	movs	r1, #1
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f000 fb7f 	bl	8003de8 <prvAddCurrentTaskToDelayedList>
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000002c 	.word	0x2000002c

080036f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <xTaskRemoveFromEventList+0x2a>
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e7fe      	b.n	8003720 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3318      	adds	r3, #24
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff12 	bl	8002550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800372c:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <xTaskRemoveFromEventList+0xac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11c      	bne.n	800376e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe ff09 	bl	8002550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	2201      	movs	r2, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <xTaskRemoveFromEventList+0xb0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <xTaskRemoveFromEventList+0xb0>)
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <xTaskRemoveFromEventList+0xb4>)
 800375e:	441a      	add	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7fe fe95 	bl	8002496 <vListInsertEnd>
 800376c:	e005      	b.n	800377a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3318      	adds	r3, #24
 8003772:	4619      	mov	r1, r3
 8003774:	480e      	ldr	r0, [pc, #56]	; (80037b0 <xTaskRemoveFromEventList+0xb8>)
 8003776:	f7fe fe8e 	bl	8002496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <xTaskRemoveFromEventList+0xbc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	d905      	bls.n	8003794 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <xTaskRemoveFromEventList+0xc0>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e001      	b.n	8003798 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003798:	697b      	ldr	r3, [r7, #20]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000154 	.word	0x20000154
 80037a8:	20000134 	.word	0x20000134
 80037ac:	20000030 	.word	0x20000030
 80037b0:	200000ec 	.word	0x200000ec
 80037b4:	2000002c 	.word	0x2000002c
 80037b8:	20000140 	.word	0x20000140

080037bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <vTaskInternalSetTimeOutState+0x24>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <vTaskInternalSetTimeOutState+0x28>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000144 	.word	0x20000144
 80037e4:	20000130 	.word	0x20000130

080037e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <xTaskCheckForTimeOut+0x24>
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e7fe      	b.n	800380a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <xTaskCheckForTimeOut+0x3e>
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e7fe      	b.n	8003824 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003826:	f000 fc69 	bl	80040fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <xTaskCheckForTimeOut+0xb8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d102      	bne.n	800384a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e023      	b.n	8003892 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <xTaskCheckForTimeOut+0xbc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d007      	beq.n	8003866 <xTaskCheckForTimeOut+0x7e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	e015      	b.n	8003892 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	d20b      	bcs.n	8003888 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad2      	subs	r2, r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff9d 	bl	80037bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	e004      	b.n	8003892 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800388e:	2301      	movs	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003892:	f000 fc61 	bl	8004158 <vPortExitCritical>

	return xReturn;
 8003896:	69fb      	ldr	r3, [r7, #28]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000130 	.word	0x20000130
 80038a4:	20000144 	.word	0x20000144

080038a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <vTaskMissedYield+0x14>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	20000140 	.word	0x20000140

080038c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038c8:	f000 f852 	bl	8003970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <prvIdleTask+0x28>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d9f9      	bls.n	80038c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <prvIdleTask+0x2c>)
 80038d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038e4:	e7f0      	b.n	80038c8 <prvIdleTask+0x8>
 80038e6:	bf00      	nop
 80038e8:	20000030 	.word	0x20000030
 80038ec:	e000ed04 	.word	0xe000ed04

080038f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e00c      	b.n	8003916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4a12      	ldr	r2, [pc, #72]	; (8003950 <prvInitialiseTaskLists+0x60>)
 8003908:	4413      	add	r3, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fd96 	bl	800243c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3301      	adds	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b06      	cmp	r3, #6
 800391a:	d9ef      	bls.n	80038fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800391c:	480d      	ldr	r0, [pc, #52]	; (8003954 <prvInitialiseTaskLists+0x64>)
 800391e:	f7fe fd8d 	bl	800243c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003922:	480d      	ldr	r0, [pc, #52]	; (8003958 <prvInitialiseTaskLists+0x68>)
 8003924:	f7fe fd8a 	bl	800243c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003928:	480c      	ldr	r0, [pc, #48]	; (800395c <prvInitialiseTaskLists+0x6c>)
 800392a:	f7fe fd87 	bl	800243c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <prvInitialiseTaskLists+0x70>)
 8003930:	f7fe fd84 	bl	800243c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003934:	480b      	ldr	r0, [pc, #44]	; (8003964 <prvInitialiseTaskLists+0x74>)
 8003936:	f7fe fd81 	bl	800243c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <prvInitialiseTaskLists+0x78>)
 800393c:	4a05      	ldr	r2, [pc, #20]	; (8003954 <prvInitialiseTaskLists+0x64>)
 800393e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvInitialiseTaskLists+0x7c>)
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <prvInitialiseTaskLists+0x68>)
 8003944:	601a      	str	r2, [r3, #0]
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000030 	.word	0x20000030
 8003954:	200000bc 	.word	0x200000bc
 8003958:	200000d0 	.word	0x200000d0
 800395c:	200000ec 	.word	0x200000ec
 8003960:	20000100 	.word	0x20000100
 8003964:	20000118 	.word	0x20000118
 8003968:	200000e4 	.word	0x200000e4
 800396c:	200000e8 	.word	0x200000e8

08003970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003976:	e019      	b.n	80039ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003978:	f000 fbc0 	bl	80040fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <prvCheckTasksWaitingTermination+0x4c>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fde1 	bl	8002550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <prvCheckTasksWaitingTermination+0x50>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <prvCheckTasksWaitingTermination+0x50>)
 8003996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <prvCheckTasksWaitingTermination+0x54>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3b01      	subs	r3, #1
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <prvCheckTasksWaitingTermination+0x54>)
 80039a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039a2:	f000 fbd9 	bl	8004158 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f80e 	bl	80039c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <prvCheckTasksWaitingTermination+0x54>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e1      	bne.n	8003978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000100 	.word	0x20000100
 80039c0:	2000012c 	.word	0x2000012c
 80039c4:	20000114 	.word	0x20000114

080039c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fd71 	bl	80044bc <vPortFree>
			vPortFree( pxTCB );
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fd6e 	bl	80044bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <prvResetNextTaskUnblockTime+0x44>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <prvResetNextTaskUnblockTime+0x14>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <prvResetNextTaskUnblockTime+0x16>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <prvResetNextTaskUnblockTime+0x48>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a0a:	e008      	b.n	8003a1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <prvResetNextTaskUnblockTime+0x44>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <prvResetNextTaskUnblockTime+0x48>)
 8003a1c:	6013      	str	r3, [r2, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	200000e4 	.word	0x200000e4
 8003a30:	2000014c 	.word	0x2000014c

08003a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <xTaskGetSchedulerState+0x34>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a42:	2301      	movs	r3, #1
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	e008      	b.n	8003a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <xTaskGetSchedulerState+0x38>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a50:	2302      	movs	r3, #2
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	e001      	b.n	8003a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a5a:	687b      	ldr	r3, [r7, #4]
	}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000138 	.word	0x20000138
 8003a6c:	20000154 	.word	0x20000154

08003a70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d06e      	beq.n	8003b64 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <xTaskPriorityInherit+0x100>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d25e      	bcs.n	8003b52 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db06      	blt.n	8003aaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <xTaskPriorityInherit+0x100>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1c3 0207 	rsb	r2, r3, #7
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6959      	ldr	r1, [r3, #20]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4a2e      	ldr	r2, [pc, #184]	; (8003b74 <xTaskPriorityInherit+0x104>)
 8003abc:	4413      	add	r3, r2
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	d101      	bne.n	8003ac6 <xTaskPriorityInherit+0x56>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <xTaskPriorityInherit+0x58>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d03a      	beq.n	8003b42 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fd3d 	bl	8002550 <uxListRemove>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d115      	bne.n	8003b08 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4924      	ldr	r1, [pc, #144]	; (8003b74 <xTaskPriorityInherit+0x104>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <xTaskPriorityInherit+0x98>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	2201      	movs	r2, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43da      	mvns	r2, r3
 8003afe:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <xTaskPriorityInherit+0x108>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4013      	ands	r3, r2
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <xTaskPriorityInherit+0x108>)
 8003b06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <xTaskPriorityInherit+0x100>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <xTaskPriorityInherit+0x108>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <xTaskPriorityInherit+0x108>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <xTaskPriorityInherit+0x104>)
 8003b32:	441a      	add	r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe fcab 	bl	8002496 <vListInsertEnd>
 8003b40:	e004      	b.n	8003b4c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <xTaskPriorityInherit+0x100>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e008      	b.n	8003b64 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <xTaskPriorityInherit+0x100>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d201      	bcs.n	8003b64 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b64:	68fb      	ldr	r3, [r7, #12]
	}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000002c 	.word	0x2000002c
 8003b74:	20000030 	.word	0x20000030
 8003b78:	20000134 	.word	0x20000134

08003b7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d06c      	beq.n	8003c6c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <xTaskPriorityDisinherit+0xfc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d009      	beq.n	8003bb0 <xTaskPriorityDisinherit+0x34>
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e7fe      	b.n	8003bae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <xTaskPriorityDisinherit+0x50>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	e7fe      	b.n	8003bca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	1e5a      	subs	r2, r3, #1
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d044      	beq.n	8003c6c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d140      	bne.n	8003c6c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fcae 	bl	8002550 <uxListRemove>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	491f      	ldr	r1, [pc, #124]	; (8003c7c <xTaskPriorityDisinherit+0x100>)
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xTaskPriorityDisinherit+0xaa>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	2201      	movs	r2, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <xTaskPriorityDisinherit+0x104>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4013      	ands	r3, r2
 8003c22:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <xTaskPriorityDisinherit+0x104>)
 8003c24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f1c3 0207 	rsb	r2, r3, #7
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <xTaskPriorityDisinherit+0x104>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <xTaskPriorityDisinherit+0x104>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <xTaskPriorityDisinherit+0x100>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7fe fc17 	bl	8002496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c6c:	697b      	ldr	r3, [r7, #20]
	}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	2000002c 	.word	0x2000002c
 8003c7c:	20000030 	.word	0x20000030
 8003c80:	20000134 	.word	0x20000134

08003c84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8086 	beq.w	8003daa <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e7fe      	b.n	8003cb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e002      	b.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d067      	beq.n	8003daa <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d162      	bne.n	8003daa <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003ce4:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d109      	bne.n	8003d02 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	e7fe      	b.n	8003d00 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db04      	blt.n	8003d20 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f1c3 0207 	rsb	r2, r3, #7
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6959      	ldr	r1, [r3, #20]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003d30:	4413      	add	r3, r2
 8003d32:	4299      	cmp	r1, r3
 8003d34:	d101      	bne.n	8003d3a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d034      	beq.n	8003daa <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	3304      	adds	r3, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe fc03 	bl	8002550 <uxListRemove>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d115      	bne.n	8003d7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4918      	ldr	r1, [pc, #96]	; (8003db8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43da      	mvns	r2, r3
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4013      	ands	r3, r2
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003d7a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	2201      	movs	r2, #1
 8003d82:	409a      	lsls	r2, r3
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003d9c:	441a      	add	r2, r3
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe fb76 	bl	8002496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003daa:	bf00      	nop
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000002c 	.word	0x2000002c
 8003db8:	20000030 	.word	0x20000030
 8003dbc:	20000134 	.word	0x20000134

08003dc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003dc4:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d004      	beq.n	8003dd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd2:	3201      	adds	r2, #1
 8003dd4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003dd6:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
	}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	2000002c 	.word	0x2000002c

08003de8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df8:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fba6 	bl	8002550 <uxListRemove>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	2201      	movs	r2, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d10a      	bne.n	8003e40 <prvAddCurrentTaskToDelayedList+0x58>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	481a      	ldr	r0, [pc, #104]	; (8003ea4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e3a:	f7fe fb2c 	bl	8002496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e3e:	e026      	b.n	8003e8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d209      	bcs.n	8003e6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7fe fb3a 	bl	80024de <vListInsert>
}
 8003e6a:	e010      	b.n	8003e8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fe fb30 	bl	80024de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d202      	bcs.n	8003e8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000130 	.word	0x20000130
 8003e9c:	2000002c 	.word	0x2000002c
 8003ea0:	20000134 	.word	0x20000134
 8003ea4:	20000118 	.word	0x20000118
 8003ea8:	200000e8 	.word	0x200000e8
 8003eac:	200000e4 	.word	0x200000e4
 8003eb0:	2000014c 	.word	0x2000014c

08003eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <pxPortInitialiseStack+0x64>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b14      	subs	r3, #20
 8003eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3b04      	subs	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f06f 0202 	mvn.w	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3b20      	subs	r3, #32
 8003f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	08003f1d 	.word	0x08003f1d

08003f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <prvTaskExitError+0x50>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d009      	beq.n	8003f44 <prvTaskExitError+0x28>
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	e7fe      	b.n	8003f42 <prvTaskExitError+0x26>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f56:	bf00      	nop
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0fc      	beq.n	8003f58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c

08003f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <pxCurrentTCBConst2>)
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	6808      	ldr	r0, [r1, #0]
 8003f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	f380 8809 	msr	PSP, r0
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	4770      	bx	lr
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst2>:
 8003f90:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop

08003f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f98:	4808      	ldr	r0, [pc, #32]	; (8003fbc <prvPortStartFirstTask+0x24>)
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	6800      	ldr	r0, [r0, #0]
 8003f9e:	f380 8808 	msr	MSP, r0
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f380 8814 	msr	CONTROL, r0
 8003faa:	b662      	cpsie	i
 8003fac:	b661      	cpsie	f
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	df00      	svc	0
 8003fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fba:	bf00      	nop
 8003fbc:	e000ed08 	.word	0xe000ed08

08003fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <xPortStartScheduler+0x118>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a44      	ldr	r2, [pc, #272]	; (80040dc <xPortStartScheduler+0x11c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d109      	bne.n	8003fe4 <xPortStartScheduler+0x24>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e7fe      	b.n	8003fe2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <xPortStartScheduler+0x118>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <xPortStartScheduler+0x120>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d109      	bne.n	8004002 <xPortStartScheduler+0x42>
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e7fe      	b.n	8004000 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <xPortStartScheduler+0x124>)
 8004004:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	22ff      	movs	r2, #255	; 0xff
 8004012:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <xPortStartScheduler+0x128>)
 8004028:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800402a:	4b30      	ldr	r3, [pc, #192]	; (80040ec <xPortStartScheduler+0x12c>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004030:	e009      	b.n	8004046 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <xPortStartScheduler+0x12c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	4a2c      	ldr	r2, [pc, #176]	; (80040ec <xPortStartScheduler+0x12c>)
 800403a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d0ef      	beq.n	8004032 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004052:	4b26      	ldr	r3, [pc, #152]	; (80040ec <xPortStartScheduler+0x12c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	d009      	beq.n	8004072 <xPortStartScheduler+0xb2>
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	e7fe      	b.n	8004070 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <xPortStartScheduler+0x12c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <xPortStartScheduler+0x12c>)
 800407a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <xPortStartScheduler+0x12c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <xPortStartScheduler+0x12c>)
 8004086:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <xPortStartScheduler+0x130>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <xPortStartScheduler+0x130>)
 8004096:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800409a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <xPortStartScheduler+0x130>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <xPortStartScheduler+0x130>)
 80040a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040a8:	f000 f8d6 	bl	8004258 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <xPortStartScheduler+0x134>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040b2:	f000 f8f5 	bl	80042a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <xPortStartScheduler+0x138>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <xPortStartScheduler+0x138>)
 80040bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040c2:	f7ff ff69 	bl	8003f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040c6:	f7ff fa99 	bl	80035fc <vTaskSwitchContext>
	prvTaskExitError();
 80040ca:	f7ff ff27 	bl	8003f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed00 	.word	0xe000ed00
 80040dc:	410fc271 	.word	0x410fc271
 80040e0:	410fc270 	.word	0x410fc270
 80040e4:	e000e400 	.word	0xe000e400
 80040e8:	20000158 	.word	0x20000158
 80040ec:	2000015c 	.word	0x2000015c
 80040f0:	e000ed20 	.word	0xe000ed20
 80040f4:	2000000c 	.word	0x2000000c
 80040f8:	e000ef34 	.word	0xe000ef34

080040fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <vPortEnterCritical+0x54>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3301      	adds	r3, #1
 800411a:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <vPortEnterCritical+0x54>)
 800411c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <vPortEnterCritical+0x54>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d10e      	bne.n	8004144 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <vPortEnterCritical+0x58>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <vPortEnterCritical+0x48>
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	e7fe      	b.n	8004142 <vPortEnterCritical+0x46>
	}
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	2000000c 	.word	0x2000000c
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <vPortExitCritical+0x4c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <vPortExitCritical+0x22>
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e7fe      	b.n	8004178 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <vPortExitCritical+0x4c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3b01      	subs	r3, #1
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <vPortExitCritical+0x4c>)
 8004182:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <vPortExitCritical+0x4c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <vPortExitCritical+0x3e>
 800418c:	2300      	movs	r3, #0
 800418e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000000c 	.word	0x2000000c
	...

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <pxCurrentTCBConst>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	f01e 0f10 	tst.w	lr, #16
 80041c0:	bf08      	it	eq
 80041c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ca:	6010      	str	r0, [r2, #0]
 80041cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041d4:	f380 8811 	msr	BASEPRI, r0
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f7ff fa0c 	bl	80035fc <vTaskSwitchContext>
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f380 8811 	msr	BASEPRI, r0
 80041ec:	bc09      	pop	{r0, r3}
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	6808      	ldr	r0, [r1, #0]
 80041f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f6:	f01e 0f10 	tst.w	lr, #16
 80041fa:	bf08      	it	eq
 80041fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004200:	f380 8809 	msr	PSP, r0
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	f3af 8000 	nop.w

08004210 <pxCurrentTCBConst>:
 8004210:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop

08004218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004230:	f7ff f928 	bl	8003484 <xTaskIncrementTick>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <SysTick_Handler+0x3c>)
 800423c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <vPortSetupTimerInterrupt+0x34>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <vPortSetupTimerInterrupt+0x38>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <vPortSetupTimerInterrupt+0x3c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <vPortSetupTimerInterrupt+0x40>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	4a09      	ldr	r2, [pc, #36]	; (800429c <vPortSetupTimerInterrupt+0x44>)
 8004276:	3b01      	subs	r3, #1
 8004278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <vPortSetupTimerInterrupt+0x34>)
 800427c:	2207      	movs	r2, #7
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000e010 	.word	0xe000e010
 8004290:	e000e018 	.word	0xe000e018
 8004294:	20000000 	.word	0x20000000
 8004298:	10624dd3 	.word	0x10624dd3
 800429c:	e000e014 	.word	0xe000e014

080042a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042b0 <vPortEnableVFP+0x10>
 80042a4:	6801      	ldr	r1, [r0, #0]
 80042a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042aa:	6001      	str	r1, [r0, #0]
 80042ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042ae:	bf00      	nop
 80042b0:	e000ed88 	.word	0xe000ed88

080042b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	d913      	bls.n	80042ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <vPortValidateInterruptPriority+0x6c>)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <vPortValidateInterruptPriority+0x70>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	7afa      	ldrb	r2, [r7, #11]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d209      	bcs.n	80042ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e7fe      	b.n	80042ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <vPortValidateInterruptPriority+0x74>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <vPortValidateInterruptPriority+0x78>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d909      	bls.n	8004312 <vPortValidateInterruptPriority+0x5e>
 80042fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	e7fe      	b.n	8004310 <vPortValidateInterruptPriority+0x5c>
	}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e3f0 	.word	0xe000e3f0
 8004324:	20000158 	.word	0x20000158
 8004328:	e000ed0c 	.word	0xe000ed0c
 800432c:	2000015c 	.word	0x2000015c

08004330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800433c:	f7fe fff8 	bl	8003330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <pvPortMalloc+0x178>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004348:	f000 f910 	bl	800456c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800434c:	4b57      	ldr	r3, [pc, #348]	; (80044ac <pvPortMalloc+0x17c>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 808c 	bne.w	8004472 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01c      	beq.n	800439a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004360:	2208      	movs	r2, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f023 0307 	bic.w	r3, r3, #7
 8004378:	3308      	adds	r3, #8
 800437a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <pvPortMalloc+0x6a>
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e7fe      	b.n	8004398 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d068      	beq.n	8004472 <pvPortMalloc+0x142>
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <pvPortMalloc+0x180>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d863      	bhi.n	8004472 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <pvPortMalloc+0x184>)
 80043ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <pvPortMalloc+0x184>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b4:	e004      	b.n	80043c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d903      	bls.n	80043d2 <pvPortMalloc+0xa2>
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f1      	bne.n	80043b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <pvPortMalloc+0x178>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	429a      	cmp	r2, r3
 80043da:	d04a      	beq.n	8004472 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	2308      	movs	r3, #8
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d91e      	bls.n	800443c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	2b00      	cmp	r3, #0
 800440e:	d009      	beq.n	8004424 <pvPortMalloc+0xf4>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e7fe      	b.n	8004422 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1ad2      	subs	r2, r2, r3
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004436:	69b8      	ldr	r0, [r7, #24]
 8004438:	f000 f8fa 	bl	8004630 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <pvPortMalloc+0x180>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <pvPortMalloc+0x180>)
 8004448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <pvPortMalloc+0x180>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <pvPortMalloc+0x188>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d203      	bcs.n	800445e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <pvPortMalloc+0x180>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <pvPortMalloc+0x188>)
 800445c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <pvPortMalloc+0x17c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	431a      	orrs	r2, r3
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004472:	f7fe ff6b 	bl	800334c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800447c:	f7fc f848 	bl	8000510 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <pvPortMalloc+0x16e>
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e7fe      	b.n	800449c <pvPortMalloc+0x16c>
	return pvReturn;
 800449e:	69fb      	ldr	r3, [r7, #28]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20003d68 	.word	0x20003d68
 80044ac:	20003d74 	.word	0x20003d74
 80044b0:	20003d6c 	.word	0x20003d6c
 80044b4:	20003d60 	.word	0x20003d60
 80044b8:	20003d70 	.word	0x20003d70

080044bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d046      	beq.n	800455c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044ce:	2308      	movs	r3, #8
 80044d0:	425b      	negs	r3, r3
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <vPortFree+0xa8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <vPortFree+0x42>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e7fe      	b.n	80044fc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <vPortFree+0x5e>
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	e7fe      	b.n	8004518 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <vPortFree+0xa8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d019      	beq.n	800455c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d115      	bne.n	800455c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <vPortFree+0xa8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	43db      	mvns	r3, r3
 800453a:	401a      	ands	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004540:	f7fe fef6 	bl	8003330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <vPortFree+0xac>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4413      	add	r3, r2
 800454e:	4a06      	ldr	r2, [pc, #24]	; (8004568 <vPortFree+0xac>)
 8004550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004552:	6938      	ldr	r0, [r7, #16]
 8004554:	f000 f86c 	bl	8004630 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004558:	f7fe fef8 	bl	800334c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20003d74 	.word	0x20003d74
 8004568:	20003d6c 	.word	0x20003d6c

0800456c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004572:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <prvHeapInit+0xac>)
 800457a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3307      	adds	r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0307 	bic.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <prvHeapInit+0xac>)
 800459c:	4413      	add	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <prvHeapInit+0xb0>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <prvHeapInit+0xb0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045b8:	2208      	movs	r2, #8
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <prvHeapInit+0xb4>)
 80045cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <prvHeapInit+0xb4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <prvHeapInit+0xb4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <prvHeapInit+0xb4>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <prvHeapInit+0xb8>)
 80045fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <prvHeapInit+0xbc>)
 8004602:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <prvHeapInit+0xc0>)
 8004606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20000160 	.word	0x20000160
 800461c:	20003d60 	.word	0x20003d60
 8004620:	20003d68 	.word	0x20003d68
 8004624:	20003d70 	.word	0x20003d70
 8004628:	20003d6c 	.word	0x20003d6c
 800462c:	20003d74 	.word	0x20003d74

08004630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004638:	4b28      	ldr	r3, [pc, #160]	; (80046dc <prvInsertBlockIntoFreeList+0xac>)
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e002      	b.n	8004644 <prvInsertBlockIntoFreeList+0x14>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d8f7      	bhi.n	800463e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d108      	bne.n	8004672 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	441a      	add	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d118      	bne.n	80046b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <prvInsertBlockIntoFreeList+0xb0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d00d      	beq.n	80046ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e008      	b.n	80046c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <prvInsertBlockIntoFreeList+0xb0>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e003      	b.n	80046c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d002      	beq.n	80046ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20003d60 	.word	0x20003d60
 80046e0:	20003d68 	.word	0x20003d68

080046e4 <__libc_init_array>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0d      	ldr	r6, [pc, #52]	; (800471c <__libc_init_array+0x38>)
 80046e8:	4c0d      	ldr	r4, [pc, #52]	; (8004720 <__libc_init_array+0x3c>)
 80046ea:	1ba4      	subs	r4, r4, r6
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	2500      	movs	r5, #0
 80046f0:	42a5      	cmp	r5, r4
 80046f2:	d109      	bne.n	8004708 <__libc_init_array+0x24>
 80046f4:	4e0b      	ldr	r6, [pc, #44]	; (8004724 <__libc_init_array+0x40>)
 80046f6:	4c0c      	ldr	r4, [pc, #48]	; (8004728 <__libc_init_array+0x44>)
 80046f8:	f000 f82c 	bl	8004754 <_init>
 80046fc:	1ba4      	subs	r4, r4, r6
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	2500      	movs	r5, #0
 8004702:	42a5      	cmp	r5, r4
 8004704:	d105      	bne.n	8004712 <__libc_init_array+0x2e>
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800470c:	4798      	blx	r3
 800470e:	3501      	adds	r5, #1
 8004710:	e7ee      	b.n	80046f0 <__libc_init_array+0xc>
 8004712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004716:	4798      	blx	r3
 8004718:	3501      	adds	r5, #1
 800471a:	e7f2      	b.n	8004702 <__libc_init_array+0x1e>
 800471c:	080047e8 	.word	0x080047e8
 8004720:	080047e8 	.word	0x080047e8
 8004724:	080047e8 	.word	0x080047e8
 8004728:	080047ec 	.word	0x080047ec

0800472c <memcpy>:
 800472c:	b510      	push	{r4, lr}
 800472e:	1e43      	subs	r3, r0, #1
 8004730:	440a      	add	r2, r1
 8004732:	4291      	cmp	r1, r2
 8004734:	d100      	bne.n	8004738 <memcpy+0xc>
 8004736:	bd10      	pop	{r4, pc}
 8004738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800473c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004740:	e7f7      	b.n	8004732 <memcpy+0x6>

08004742 <memset>:
 8004742:	4402      	add	r2, r0
 8004744:	4603      	mov	r3, r0
 8004746:	4293      	cmp	r3, r2
 8004748:	d100      	bne.n	800474c <memset+0xa>
 800474a:	4770      	bx	lr
 800474c:	f803 1b01 	strb.w	r1, [r3], #1
 8004750:	e7f9      	b.n	8004746 <memset+0x4>
	...

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
