
ACCLEOMETER_SIMULATION_3D_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001220  0800b364  0800b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c584  0800c584  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c58c  0800c58c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c58c  0800c58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c590  0800c590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800c594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000408c  200000b0  0800c644  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000413c  0800c644  0002413c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e932  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003eee  00000000  00000000  0003ea12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001970  00000000  00000000  00042900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001800  00000000  00000000  00044270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027683  00000000  00000000  00045a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a74  00000000  00000000  0006d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e13ba  00000000  00000000  00081b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00162f21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071c8  00000000  00000000  00162f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b34c 	.word	0x0800b34c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800b34c 	.word	0x0800b34c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b972 	b.w	8000e84 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	4688      	mov	r8, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14b      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc6:	428a      	cmp	r2, r1
 8000bc8:	4615      	mov	r5, r2
 8000bca:	d967      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0720 	rsb	r7, r2, #32
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	fa20 f707 	lsr.w	r7, r0, r7
 8000bde:	4095      	lsls	r5, r2
 8000be0:	ea47 0803 	orr.w	r8, r7, r3
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf0:	fa1f fc85 	uxth.w	ip, r5
 8000bf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18eb      	adds	r3, r5, r3
 8000c06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0a:	f080 811b 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8118 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c14:	3f02      	subs	r7, #2
 8000c16:	442b      	add	r3, r5
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8107 	bcs.w	8000e48 <__udivmoddi4+0x290>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	f240 8104 	bls.w	8000e48 <__udivmoddi4+0x290>
 8000c40:	3802      	subs	r0, #2
 8000c42:	442c      	add	r4, r5
 8000c44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c48:	eba4 040c 	sub.w	r4, r4, ip
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	b11e      	cbz	r6, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c6 4300 	strd	r4, r3, [r6]
 8000c58:	4639      	mov	r1, r7
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0xbe>
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	f000 80eb 	beq.w	8000e3e <__udivmoddi4+0x286>
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c6e:	4638      	mov	r0, r7
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	fab3 f783 	clz	r7, r3
 8000c7a:	2f00      	cmp	r7, #0
 8000c7c:	d147      	bne.n	8000d0e <__udivmoddi4+0x156>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xd0>
 8000c82:	4282      	cmp	r2, r0
 8000c84:	f200 80fa 	bhi.w	8000e7c <__udivmoddi4+0x2c4>
 8000c88:	1a84      	subs	r4, r0, r2
 8000c8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4698      	mov	r8, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d0e0      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000c96:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9a:	e7dd      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000c9c:	b902      	cbnz	r2, 8000ca0 <__udivmoddi4+0xe8>
 8000c9e:	deff      	udf	#255	; 0xff
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f040 808f 	bne.w	8000dc8 <__udivmoddi4+0x210>
 8000caa:	1b49      	subs	r1, r1, r5
 8000cac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb0:	fa1f f885 	uxth.w	r8, r5
 8000cb4:	2701      	movs	r7, #1
 8000cb6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x124>
 8000ccc:	18eb      	adds	r3, r5, r3
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x122>
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ce8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x14c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x14a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80b6 	bhi.w	8000e6e <__udivmoddi4+0x2b6>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e79f      	b.n	8000c4e <__udivmoddi4+0x96>
 8000d0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d12:	40bb      	lsls	r3, r7
 8000d14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d32:	0c2c      	lsrs	r4, r5, #16
 8000d34:	fb08 3319 	mls	r3, r8, r9, r3
 8000d38:	fa1f fa8e 	uxth.w	sl, lr
 8000d3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d40:	fb09 f40a 	mul.w	r4, r9, sl
 8000d44:	429c      	cmp	r4, r3
 8000d46:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b0>
 8000d50:	eb1e 0303 	adds.w	r3, lr, r3
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d58:	f080 8087 	bcs.w	8000e6a <__udivmoddi4+0x2b2>
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	f240 8084 	bls.w	8000e6a <__udivmoddi4+0x2b2>
 8000d62:	f1a9 0902 	sub.w	r9, r9, #2
 8000d66:	4473      	add	r3, lr
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d7c:	45a2      	cmp	sl, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1da>
 8000d80:	eb1e 0404 	adds.w	r4, lr, r4
 8000d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d88:	d26b      	bcs.n	8000e62 <__udivmoddi4+0x2aa>
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	d969      	bls.n	8000e62 <__udivmoddi4+0x2aa>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4474      	add	r4, lr
 8000d92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	eba4 040a 	sub.w	r4, r4, sl
 8000d9e:	454c      	cmp	r4, r9
 8000da0:	46c2      	mov	sl, r8
 8000da2:	464b      	mov	r3, r9
 8000da4:	d354      	bcc.n	8000e50 <__udivmoddi4+0x298>
 8000da6:	d051      	beq.n	8000e4c <__udivmoddi4+0x294>
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d069      	beq.n	8000e80 <__udivmoddi4+0x2c8>
 8000dac:	ebb1 050a 	subs.w	r5, r1, sl
 8000db0:	eb64 0403 	sbc.w	r4, r4, r3
 8000db4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000db8:	40fd      	lsrs	r5, r7
 8000dba:	40fc      	lsrs	r4, r7
 8000dbc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc4:	2700      	movs	r7, #0
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000dc8:	f1c2 0320 	rsb	r3, r2, #32
 8000dcc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd0:	4095      	lsls	r5, r2
 8000dd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dde:	4338      	orrs	r0, r7
 8000de0:	0c01      	lsrs	r1, r0, #16
 8000de2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000de6:	fa1f f885 	uxth.w	r8, r5
 8000dea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df2:	fb07 f308 	mul.w	r3, r7, r8
 8000df6:	428b      	cmp	r3, r1
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x256>
 8000dfe:	1869      	adds	r1, r5, r1
 8000e00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e04:	d22f      	bcs.n	8000e66 <__udivmoddi4+0x2ae>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d92d      	bls.n	8000e66 <__udivmoddi4+0x2ae>
 8000e0a:	3f02      	subs	r7, #2
 8000e0c:	4429      	add	r1, r5
 8000e0e:	1acb      	subs	r3, r1, r3
 8000e10:	b281      	uxth	r1, r0
 8000e12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	fb00 f308 	mul.w	r3, r0, r8
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x27e>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e2c:	d217      	bcs.n	8000e5e <__udivmoddi4+0x2a6>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d915      	bls.n	8000e5e <__udivmoddi4+0x2a6>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e3c:	e73b      	b.n	8000cb6 <__udivmoddi4+0xfe>
 8000e3e:	4637      	mov	r7, r6
 8000e40:	4630      	mov	r0, r6
 8000e42:	e709      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e44:	4607      	mov	r7, r0
 8000e46:	e6e7      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fb      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e4c:	4541      	cmp	r1, r8
 8000e4e:	d2ab      	bcs.n	8000da8 <__udivmoddi4+0x1f0>
 8000e50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e54:	eb69 020e 	sbc.w	r2, r9, lr
 8000e58:	3801      	subs	r0, #1
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	e7a4      	b.n	8000da8 <__udivmoddi4+0x1f0>
 8000e5e:	4660      	mov	r0, ip
 8000e60:	e7e9      	b.n	8000e36 <__udivmoddi4+0x27e>
 8000e62:	4618      	mov	r0, r3
 8000e64:	e795      	b.n	8000d92 <__udivmoddi4+0x1da>
 8000e66:	4667      	mov	r7, ip
 8000e68:	e7d1      	b.n	8000e0e <__udivmoddi4+0x256>
 8000e6a:	4681      	mov	r9, r0
 8000e6c:	e77c      	b.n	8000d68 <__udivmoddi4+0x1b0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	442c      	add	r4, r5
 8000e72:	e747      	b.n	8000d04 <__udivmoddi4+0x14c>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	442b      	add	r3, r5
 8000e7a:	e72f      	b.n	8000cdc <__udivmoddi4+0x124>
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	e708      	b.n	8000c92 <__udivmoddi4+0xda>
 8000e80:	4637      	mov	r7, r6
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0xa0>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <inv_q30_to_float>:
	float output;
} inv_biquad_filter_t;

typedef unsigned long inv_time_t;

static inline float inv_q30_to_float(long q30) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	return (float)q30 / ((float)(1L << 30));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000eb4 <inv_q30_to_float+0x2c>
 8000e9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ea2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	4e800000 	.word	0x4e800000

08000eb8 <vApplicationMallocFailedHook>:
/* Hook prototypes */
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200000cc 	.word	0x200000cc
 8000ef8:	20000120 	.word	0x20000120

08000efc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b09e      	sub	sp, #120	; 0x78
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMailQDef (mail_sensors, 10, mpu_data_t);  // Declare mail queue
 8000f02:	230a      	movs	r3, #10
 8000f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f06:	230c      	movs	r3, #12
 8000f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f0e:	673b      	str	r3, [r7, #112]	; 0x70
  mail_sensorsHandle = osMailCreate(osMailQ(mail_sensors), NULL);
 8000f10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fe55 	bl	8007bc6 <osMailCreate>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_FREERTOS_Init+0xbc>)
 8000f20:	601a      	str	r2, [r3, #0]

  osMailQDef (mail_cmd, 10, bt_data_t);  // Declare mail queue
 8000f22:	230a      	movs	r3, #10
 8000f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f26:	2310      	movs	r3, #16
 8000f28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f2e:	663b      	str	r3, [r7, #96]	; 0x60
  mail_cmdHandle = osMailCreate(osMailQ(mail_cmd), NULL);
 8000f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f006 fe45 	bl	8007bc6 <osMailCreate>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MX_FREERTOS_Init+0xc0>)
 8000f40:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of thread_sensors */
  osThreadDef(thread_sensors, thread_sensors_func, osPriorityHigh, 0, 512);
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_FREERTOS_Init+0xc4>)
 8000f44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f48:	461d      	mov	r5, r3
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_sensorsHandle = osThreadCreate(osThread(thread_sensors), NULL);
 8000f56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fcc6 	bl	80078ee <osThreadCreate>
 8000f62:	4602      	mov	r2, r0
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_FREERTOS_Init+0xc8>)
 8000f66:	601a      	str	r2, [r3, #0]

  /* definition and creation of thread_lcd */
  osThreadDef(thread_lcd, thread_lcd_func, osPriorityLow, 0, 512);
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_FREERTOS_Init+0xcc>)
 8000f6a:	f107 0420 	add.w	r4, r7, #32
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_lcdHandle = osThreadCreate(osThread(thread_lcd), NULL);
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fcb3 	bl	80078ee <osThreadCreate>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_FREERTOS_Init+0xd0>)
 8000f8c:	601a      	str	r2, [r3, #0]

  /* definition and creation of thread_bt */
  osThreadDef(thread_bt, thread_bt_func, osPriorityNormal, 0, 128);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_FREERTOS_Init+0xd4>)
 8000f90:	1d3c      	adds	r4, r7, #4
 8000f92:	461d      	mov	r5, r3
 8000f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_btHandle = osThreadCreate(osThread(thread_bt), NULL);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 fca2 	bl	80078ee <osThreadCreate>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_FREERTOS_Init+0xd8>)
 8000fae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000fb0:	bf00      	nop
 8000fb2:	3778      	adds	r7, #120	; 0x78
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb8:	20004098 	.word	0x20004098
 8000fbc:	2000409c 	.word	0x2000409c
 8000fc0:	0800b374 	.word	0x0800b374
 8000fc4:	200040a0 	.word	0x200040a0
 8000fc8:	0800b39c 	.word	0x0800b39c
 8000fcc:	20004090 	.word	0x20004090
 8000fd0:	0800b3c4 	.word	0x0800b3c4
 8000fd4:	20004094 	.word	0x20004094

08000fd8 <thread_sensors_func>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_thread_sensors_func */
void thread_sensors_func(void const * argument)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b099      	sub	sp, #100	; 0x64
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_sensors_func */
	#define RAD2DEG (180.0f / 3.14159f)
	#define DEG2RAD (3.14159f / 180.0f)

	uint32_t counter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54

	/* Variables for all measurements */
	int32_t quat[4] = { };
 8000fe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
	uint16_t accScale = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	float gyroScale = 0.f;
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t morePackets = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t orientation[] = { 1, 0, 0,
 8001002:	4abf      	ldr	r2, [pc, #764]	; (8001300 <thread_sensors_func+0x328>)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	ca07      	ldmia	r2, {r0, r1, r2}
 800100a:	c303      	stmia	r3!, {r0, r1}
 800100c:	701a      	strb	r2, [r3, #0]

	/* Timestamp & status variables */
	int16_t intStatus;

	/* Start MPU9250 and change settings */
	mpu_i2c_init(&hi2c1);
 800100e:	48bd      	ldr	r0, [pc, #756]	; (8001304 <thread_sensors_func+0x32c>)
 8001010:	f006 fbe4 	bl	80077dc <mpu_i2c_init>
	if (mpu_init(NULL)) {
 8001014:	2000      	movs	r0, #0
 8001016:	f004 fa17 	bl	8005448 <mpu_init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <thread_sensors_func+0x4e>
		osThreadTerminate(NULL);
 8001020:	2000      	movs	r0, #0
 8001022:	f006 fcb0 	bl	8007986 <osThreadTerminate>
	}
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 8001026:	2079      	movs	r0, #121	; 0x79
 8001028:	f004 ff2c 	bl	8005e84 <mpu_set_sensors>
	mpu_set_sample_rate(400);
 800102c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001030:	f004 fdb2 	bl	8005b98 <mpu_set_sample_rate>
	mpu_get_accel_sens(&accScale);
 8001034:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fe93 	bl	8005d64 <mpu_get_accel_sens>
	mpu_get_gyro_sens(&gyroScale);
 800103e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fe56 	bl	8005cf4 <mpu_get_gyro_sens>
	mpu_set_lpf(100);
 8001048:	2064      	movs	r0, #100	; 0x64
 800104a:	f004 fd57 	bl	8005afc <mpu_set_lpf>

	/* Enable DMP */
	dmp_load_motion_driver_firmware();
 800104e:	f005 fc6d 	bl	800692c <dmp_load_motion_driver_firmware>
	dmp_set_orientation(inv_orientation_matrix_to_scalar(orientation));
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fb97 	bl	800778a <inv_orientation_matrix_to_scalar>
 800105c:	4603      	mov	r3, r0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fc74 	bl	800694c <dmp_set_orientation>
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_GYRO_CAL | DMP_FEATURE_TAP);
 8001064:	2031      	movs	r0, #49	; 0x31
 8001066:	f005 ffed 	bl	8007044 <dmp_enable_feature>
	dmp_set_fifo_rate(200);
 800106a:	20c8      	movs	r0, #200	; 0xc8
 800106c:	f005 fd60 	bl	8006b30 <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f005 fabb 	bl	80065ec <mpu_set_dmp_state>

  /* Infinite loop */
  for(;;)
  {
	  /* Get current mpu chip status */
		mpu_get_int_status(&intStatus);
 8001076:	f107 030e 	add.w	r3, r7, #14
 800107a:	4618      	mov	r0, r3
 800107c:	f004 ffe0 	bl	8006040 <mpu_get_int_status>
		if ((intStatus & MPU_INT_STATUS_DATA_READY) || morePackets > 0) {
 8001080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <thread_sensors_func+0xc0>
 800108e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 812c 	beq.w	80012f0 <thread_sensors_func+0x318>
			int16_t sensors = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	81bb      	strh	r3, [r7, #12]
			/* Get quaternion */
			dmp_read_fifo(NULL, NULL, (long *) quat, NULL, &sensors, &morePackets);
 800109c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010a0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2000      	movs	r0, #0
 80010b2:	f006 f9b1 	bl	8007418 <dmp_read_fifo>
			if (sensors & INV_WXYZ_QUAT) {
 80010b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8115 	beq.w	80012f0 <thread_sensors_func+0x318>
				qw = inv_q30_to_float(quat[0]);
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fedd 	bl	8000e88 <inv_q30_to_float>
 80010ce:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
				qx = inv_q30_to_float(quat[1]);
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fed7 	bl	8000e88 <inv_q30_to_float>
 80010da:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
				qy = inv_q30_to_float(quat[2]);
 80010de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fed1 	bl	8000e88 <inv_q30_to_float>
 80010e6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
				qz = inv_q30_to_float(quat[3]);
 80010ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fecb 	bl	8000e88 <inv_q30_to_float>
 80010f2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				if (qw < -1.0f) {
 80010f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80010fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d502      	bpl.n	800110e <thread_sensors_func+0x136>
					qw = -1.0f;
 8001108:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <thread_sensors_func+0x330>)
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
 800110c:	e00b      	b.n	8001126 <thread_sensors_func+0x14e>
				} else if (qw > 1.0f) {
 800110e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dd02      	ble.n	8001126 <thread_sensors_func+0x14e>
					qw = 1.0f;
 8001120:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001124:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (qx < -1.0f) {
 8001126:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800112a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d502      	bpl.n	800113e <thread_sensors_func+0x166>
					qx = -1.0f;
 8001138:	4b73      	ldr	r3, [pc, #460]	; (8001308 <thread_sensors_func+0x330>)
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800113c:	e00b      	b.n	8001156 <thread_sensors_func+0x17e>
				} else if (qx > 1.0f) {
 800113e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	dd02      	ble.n	8001156 <thread_sensors_func+0x17e>
					qx = 1.0f;
 8001150:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
				}
				if (qy < -1.0f) {
 8001156:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800115a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d502      	bpl.n	800116e <thread_sensors_func+0x196>
					qy = -1.0f;
 8001168:	4b67      	ldr	r3, [pc, #412]	; (8001308 <thread_sensors_func+0x330>)
 800116a:	64bb      	str	r3, [r7, #72]	; 0x48
 800116c:	e00b      	b.n	8001186 <thread_sensors_func+0x1ae>
				} else if (qy > 1.0f) {
 800116e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	dd02      	ble.n	8001186 <thread_sensors_func+0x1ae>
					qy = 1.0f;
 8001180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
				}
				if (qz < -1.0f) {
 8001186:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800118a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800118e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	d502      	bpl.n	800119e <thread_sensors_func+0x1c6>
					qz = -1.0f;
 8001198:	4b5b      	ldr	r3, [pc, #364]	; (8001308 <thread_sensors_func+0x330>)
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
 800119c:	e00b      	b.n	80011b6 <thread_sensors_func+0x1de>
				} else if (qz > 1.0f) {
 800119e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	dd02      	ble.n	80011b6 <thread_sensors_func+0x1de>
					qz = 1.0f;
 80011b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
				}
				dmpPRY[0] = asinf(-2.0f * (qx*qz - qw*qy));
 80011b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011c6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f009 f829 	bl	800a234 <asinf>
 80011e2:	eef0 7a40 	vmov.f32	s15, s0
 80011e6:	edc7 7a04 	vstr	s15, [r7, #16]
				dmpPRY[1] = atan2f(qw*qx + qy*qz, 0.5f - qx*qx - qy*qy);
 80011ea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80011ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001206:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800120a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800121e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	eeb0 0a46 	vmov.f32	s0, s12
 8001232:	f009 f857 	bl	800a2e4 <atan2f>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	edc7 7a05 	vstr	s15, [r7, #20]
				dmpPRY[2] = atan2f(qx*qy + qw*qz, 0.5f - qy*qy - qz*qz) + 3.14159 / 2;
 800123e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001242:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800124e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001256:	ee37 6a27 	vadd.f32	s12, s14, s15
 800125a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800125e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800126a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800126e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001272:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a46 	vmov.f32	s0, s12
 8001286:	f009 f82d 	bl	800a2e4 <atan2f>
 800128a:	ee10 3a10 	vmov	r3, s0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f922 	bl	80004d8 <__aeabi_f2d>
 8001294:	a318      	add	r3, pc, #96	; (adr r3, 80012f8 <thread_sensors_func+0x320>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7fe ffbf 	bl	800021c <__adddf3>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	4618      	mov	r0, r3
 80012a4:	4621      	mov	r1, r4
 80012a6:	f7ff fc1f 	bl	8000ae8 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]
				counter++;
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	3301      	adds	r3, #1
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
				/* Send every 8th sample */
				if (counter % 8 == 0) {
 80012b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <thread_sensors_func+0x318>
					/* Send data to queue */
					mpu_data_t * data = osMailAlloc(mail_sensorsHandle, 5);
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <thread_sensors_func+0x334>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2105      	movs	r1, #5
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fcd6 	bl	8007c76 <osMailAlloc>
 80012ca:	6438      	str	r0, [r7, #64]	; 0x40
					if (data != NULL) {
 80012cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00e      	beq.n	80012f0 <thread_sensors_func+0x318>
						data->pitch = dmpPRY[0];
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d6:	601a      	str	r2, [r3, #0]
						data->roll = dmpPRY[1];
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012dc:	605a      	str	r2, [r3, #4]
						data->yaw = dmpPRY[2];
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e2:	609a      	str	r2, [r3, #8]
						osMailPut(mail_sensorsHandle, data);
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <thread_sensors_func+0x334>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012ea:	4618      	mov	r0, r3
 80012ec:	f006 fcd8 	bl	8007ca0 <osMailPut>
					}
				}
			}
		}
		 osDelay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f006 fb54 	bl	800799e <osDelay>
		mpu_get_int_status(&intStatus);
 80012f6:	e6be      	b.n	8001076 <thread_sensors_func+0x9e>
 80012f8:	f01b866e 	.word	0xf01b866e
 80012fc:	3ff921f9 	.word	0x3ff921f9
 8001300:	0800b3e0 	.word	0x0800b3e0
 8001304:	200040a4 	.word	0x200040a4
 8001308:	bf800000 	.word	0xbf800000
 800130c:	20004098 	.word	0x20004098

08001310 <thread_lcd_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_lcd_func */
void thread_lcd_func(void const * argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	f5ad 6d93 	sub.w	sp, sp, #1176	; 0x498
 8001316:	af00      	add	r7, sp, #0
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN thread_lcd_func */
	osEvent event;
	Object3d__HandleTypeDef box;
	LCD_Init();
 800131c:	f003 fc40 	bl	8004ba0 <LCD_Init>
	Object3d_InitBox(&box, 120, 80, 10);
 8001320:	f107 000c 	add.w	r0, r7, #12
 8001324:	230a      	movs	r3, #10
 8001326:	2250      	movs	r2, #80	; 0x50
 8001328:	2178      	movs	r1, #120	; 0x78
 800132a:	f000 fac2 	bl	80018b2 <Object3d_InitBox>
  /* Infinite loop */
  for(;;)
  {
	  event = osMailGet(mail_sensorsHandle, 0);
 800132e:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <thread_lcd_func+0x98>)
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8001336:	2200      	movs	r2, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f006 fcef 	bl	8007d1c <osMailGet>
	  if (event.status == osEventMail) {
 800133e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8001342:	2b20      	cmp	r3, #32
 8001344:	d12b      	bne.n	800139e <thread_lcd_func+0x8e>
		  mpu_data_t * data = event.value.p;
 8001346:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800134a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
		  Object3d_CleanObject(&box);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd81 	bl	8001e5a <Object3d_CleanObject>
		  Object3d_SetRotation(&box, data->pitch, data->roll, data->yaw);
 8001358:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001364:	ed93 7a01 	vldr	s14, [r3, #4]
 8001368:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800136c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	eeb0 1a66 	vmov.f32	s2, s13
 8001378:	eef0 0a47 	vmov.f32	s1, s14
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fe9d 	bl	80020c0 <Object3d_SetRotation>
		  Object3d_DrawObject(&box);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fd48 	bl	8001e20 <Object3d_DrawObject>
		  osMailFree(mail_sensorsHandle, data);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <thread_lcd_func+0x98>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8001398:	4618      	mov	r0, r3
 800139a:	f006 fd33 	bl	8007e04 <osMailFree>
	  }
	  osDelay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f006 fafd 	bl	800799e <osDelay>
	  event = osMailGet(mail_sensorsHandle, 0);
 80013a4:	e7c3      	b.n	800132e <thread_lcd_func+0x1e>
 80013a6:	bf00      	nop
 80013a8:	20004098 	.word	0x20004098

080013ac <thread_bt_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_bt_func */
void thread_bt_func(void const * argument)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_bt_func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f006 faf2 	bl	800799e <osDelay>
 80013ba:	e7fb      	b.n	80013b4 <thread_bt_func+0x8>

080013bc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a34      	ldr	r2, [pc, #208]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_GPIO_Init+0xf0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_GPIO_Init+0xf0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2120      	movs	r1, #32
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <MX_GPIO_Init+0xf4>)
 8001448:	f001 faca 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_GPIO_Init+0xf8>)
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_GPIO_Init+0xfc>)
 8001462:	f001 f92b 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001466:	230c      	movs	r3, #12
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001476:	2307      	movs	r3, #7
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xf4>)
 8001482:	f001 f91b 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xf4>)
 800149e:	f001 f90d 	bl	80026bc <HAL_GPIO_Init>

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	10210000 	.word	0x10210000
 80014b8:	40020800 	.word	0x40020800

080014bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C1_Init+0x50>)
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <MX_I2C1_Init+0x54>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_I2C1_Init+0x50>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_I2C1_Init+0x58>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_I2C1_Init+0x50>)
 80014da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C1_Init+0x50>)
 80014fa:	f001 fa8b 	bl	8002a14 <HAL_I2C_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001504:	f000 f8e4 	bl	80016d0 <Error_Handler>
  }

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200040a4 	.word	0x200040a4
 8001510:	40005400 	.word	0x40005400
 8001514:	00061a80 	.word	0x00061a80

08001518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_I2C_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155c:	2312      	movs	r3, #18
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001568:	2304      	movs	r3, #4
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <HAL_I2C_MspInit+0x8c>)
 8001574:	f001 f8a2 	bl	80026bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40005400 	.word	0x40005400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f000 ff40 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f80a 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f7ff ff02 	bl	80013bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80015b8:	f7ff ff80 	bl	80014bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80015bc:	f7ff fc9e 	bl	8000efc <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80015c0:	f006 f98e 	bl	80078e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x1c>
	...

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 fd48 	bl	800a06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <SystemClock_Config+0xdc>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <SystemClock_Config+0xdc>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <SystemClock_Config+0xdc>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <SystemClock_Config+0xe0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <SystemClock_Config+0xe0>)
 8001612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <SystemClock_Config+0xe0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001628:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800162c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162e:	2302      	movs	r3, #2
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800163c:	23b4      	movs	r3, #180	; 0xb4
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001640:	2302      	movs	r3, #2
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fcb7 	bl	8003fc4 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800165c:	f000 f838 	bl	80016d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001660:	f002 f988 	bl	8003974 <HAL_PWREx_EnableOverDrive>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800166a:	f000 f831 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001672:	2302      	movs	r3, #2
 8001674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800167a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2105      	movs	r1, #5
 800168c:	4618      	mov	r0, r3
 800168e:	f002 f9c1 	bl	8003a14 <HAL_RCC_ClockConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001698:	f000 f81a 	bl	80016d0 <Error_Handler>
  }
}
 800169c:	bf00      	nop
 800169e:	3750      	adds	r7, #80	; 0x50
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016be:	f000 fed9 	bl	8002474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40001000 	.word	0x40001000

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_MspInit+0x54>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_MspInit+0x54>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x54>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_MspInit+0x54>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_MspInit+0x54>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_MspInit+0x54>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	210f      	movs	r1, #15
 8001722:	f06f 0001 	mvn.w	r0, #1
 8001726:	f000 ff9f 	bl	8002668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2036      	movs	r0, #54	; 0x36
 800174e:	f000 ff8b 	bl	8002668 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001752:	2036      	movs	r0, #54	; 0x36
 8001754:	f000 ffa4 	bl	80026a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_InitTick+0xa4>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_InitTick+0xa4>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_InitTick+0xa4>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001774:	f107 0210 	add.w	r2, r7, #16
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fa4e 	bl	8003c20 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001784:	f002 fa38 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8001788:	4603      	mov	r3, r0
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_InitTick+0xa8>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	3b01      	subs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_InitTick+0xac>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_InitTick+0xb0>)
 80017a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_InitTick+0xac>)
 80017a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_InitTick+0xac>)
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_InitTick+0xac>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_InitTick+0xac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <HAL_InitTick+0xac>)
 80017be:	f002 fe5b 	bl	8004478 <HAL_TIM_Base_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <HAL_InitTick+0xac>)
 80017ca:	f002 fe8a 	bl	80044e2 <HAL_TIM_Base_Start_IT>
 80017ce:	4603      	mov	r3, r0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	200040f8 	.word	0x200040f8
 80017e8:	40001000 	.word	0x40001000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <TIM6_DAC_IRQHandler+0x10>)
 8001826:	f002 fe80 	bl	800452a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200040f8 	.word	0x200040f8

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <SystemInit+0x28>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <SystemInit+0x28>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <SystemInit+0x28>)
 800184a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184e:	609a      	str	r2, [r3, #8]
#endif
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001866:	e003      	b.n	8001870 <LoopCopyDataInit>

08001868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800186a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800186c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800186e:	3104      	adds	r1, #4

08001870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001878:	d3f6      	bcc.n	8001868 <CopyDataInit>
  ldr  r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800187c:	e002      	b.n	8001884 <LoopFillZerobss>

0800187e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800187e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001880:	f842 3b04 	str.w	r3, [r2], #4

08001884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001888:	d3f9      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800188a:	f7ff ffd3 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f008 fbaf 	bl	8009ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7ff fe89 	bl	80015a8 <main>
  bx  lr    
 8001896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800189c:	0800c594 	.word	0x0800c594
  ldr  r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018a4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 80018a8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 80018ac:	2000413c 	.word	0x2000413c

080018b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>

080018b2 <Object3d_InitBox>:
	|/____|/ <-depth
	3	  2

*/

void Object3d_InitBox(Object3d__HandleTypeDef* obj,	int16_t w, int16_t d, int16_t h) {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	817b      	strh	r3, [r7, #10]
 80018c4:	460b      	mov	r3, r1
 80018c6:	813b      	strh	r3, [r7, #8]
 80018c8:	4613      	mov	r3, r2
 80018ca:	80fb      	strh	r3, [r7, #6]

	obj->width = w;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	897a      	ldrh	r2, [r7, #10]
 80018d0:	801a      	strh	r2, [r3, #0]
	obj->depth = d;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	893a      	ldrh	r2, [r7, #8]
 80018d6:	805a      	strh	r2, [r3, #2]
	obj->heigth = h;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	809a      	strh	r2, [r3, #4]

	obj->vertex_quantity = 8;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2208      	movs	r2, #8
 80018e2:	731a      	strb	r2, [r3, #12]
	obj->edge_quantity = 12;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	220c      	movs	r2, #12
 80018e8:	735a      	strb	r2, [r3, #13]

	Object3d_SetVertex(0, 0, 0, &obj->centre);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3306      	adds	r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 fa69 	bl	8001dca <Object3d_SetVertex>

	Object3d_SetBoxVertexes(obj);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f836 	bl	800196a <Object3d_SetBoxVertexes>
	Object3d_SetBoxEdges(obj);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f9cb 	bl	8001c9a <Object3d_SetBoxEdges>

	Object3d_SetEdgesColor(obj, YELLOW);
 8001904:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fac0 	bl	8001e8e <Object3d_SetEdgesColor>

	obj->x_rotate_start = 0;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
	obj->y_rotate_start = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
	obj->z_rotate_start = 0;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	619a      	str	r2, [r3, #24]

	obj->x_rotate = obj->x_rotate_start;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8001930:	601a      	str	r2, [r3, #0]
	obj->y_rotate = obj->y_rotate_start;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800193c:	601a      	str	r2, [r3, #0]
	obj->z_rotate = obj->z_rotate_start;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8001948:	601a      	str	r2, [r3, #0]

	obj->position.x = 0;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	839a      	strh	r2, [r3, #28]
	obj->position.y = 0;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	83da      	strh	r2, [r3, #30]
	obj->position.z = 0;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	841a      	strh	r2, [r3, #32]

	Object3d_CalculateObject(obj);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fbce 	bl	80020fe <Object3d_CalculateObject>

}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <Object3d_SetBoxVertexes>:

void Object3d_SetBoxVertexes(Object3d__HandleTypeDef* obj) {
 800196a:	b590      	push	{r4, r7, lr}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]

	Object3d_SetVertex(obj->centre.x-obj->width/2, obj->centre.y+obj->depth/2, obj->centre.z+obj->heigth/2, &obj->vertex_start[0]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001978:	b29a      	uxth	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	0fd9      	lsrs	r1, r3, #31
 8001982:	440b      	add	r3, r1
 8001984:	105b      	asrs	r3, r3, #1
 8001986:	b21b      	sxth	r3, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b29b      	uxth	r3, r3
 800198e:	b218      	sxth	r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001996:	b29a      	uxth	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199e:	0fd9      	lsrs	r1, r3, #31
 80019a0:	440b      	add	r3, r1
 80019a2:	105b      	asrs	r3, r3, #1
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b21c      	sxth	r4, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019bc:	0fd9      	lsrs	r1, r3, #31
 80019be:	440b      	add	r3, r1
 80019c0:	105b      	asrs	r3, r3, #1
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3322      	adds	r3, #34	; 0x22
 80019d0:	4621      	mov	r1, r4
 80019d2:	f000 f9fa 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x+obj->width/2, obj->centre.y+obj->depth/2, obj->centre.z+obj->heigth/2, &obj->vertex_start[1]);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	0fd9      	lsrs	r1, r3, #31
 80019e6:	440b      	add	r3, r1
 80019e8:	105b      	asrs	r3, r3, #1
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b218      	sxth	r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a02:	0fd9      	lsrs	r1, r3, #31
 8001a04:	440b      	add	r3, r1
 8001a06:	105b      	asrs	r3, r3, #1
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a20:	0fd9      	lsrs	r1, r3, #31
 8001a22:	440b      	add	r3, r1
 8001a24:	105b      	asrs	r3, r3, #1
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3328      	adds	r3, #40	; 0x28
 8001a34:	4621      	mov	r1, r4
 8001a36:	f000 f9c8 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x+obj->width/2, obj->centre.y+obj->depth/2, obj->centre.z-obj->heigth/2, &obj->vertex_start[2]);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a48:	0fd9      	lsrs	r1, r3, #31
 8001a4a:	440b      	add	r3, r1
 8001a4c:	105b      	asrs	r3, r3, #1
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b218      	sxth	r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a66:	0fd9      	lsrs	r1, r3, #31
 8001a68:	440b      	add	r3, r1
 8001a6a:	105b      	asrs	r3, r3, #1
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21c      	sxth	r4, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a84:	0fd9      	lsrs	r1, r3, #31
 8001a86:	440b      	add	r3, r1
 8001a88:	105b      	asrs	r3, r3, #1
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	332e      	adds	r3, #46	; 0x2e
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f000 f996 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x-obj->width/2, obj->centre.y+obj->depth/2, obj->centre.z-obj->heigth/2, &obj->vertex_start[3]);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	0fd9      	lsrs	r1, r3, #31
 8001aae:	440b      	add	r3, r1
 8001ab0:	105b      	asrs	r3, r3, #1
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b218      	sxth	r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aca:	0fd9      	lsrs	r1, r3, #31
 8001acc:	440b      	add	r3, r1
 8001ace:	105b      	asrs	r3, r3, #1
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b21c      	sxth	r4, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ae8:	0fd9      	lsrs	r1, r3, #31
 8001aea:	440b      	add	r3, r1
 8001aec:	105b      	asrs	r3, r3, #1
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3334      	adds	r3, #52	; 0x34
 8001afc:	4621      	mov	r1, r4
 8001afe:	f000 f964 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x-obj->width/2, obj->centre.y-obj->depth/2, obj->centre.z+obj->heigth/2, &obj->vertex_start[4]);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	0fd9      	lsrs	r1, r3, #31
 8001b12:	440b      	add	r3, r1
 8001b14:	105b      	asrs	r3, r3, #1
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b218      	sxth	r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b2e:	0fd9      	lsrs	r1, r3, #31
 8001b30:	440b      	add	r3, r1
 8001b32:	105b      	asrs	r3, r3, #1
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b21c      	sxth	r4, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b4c:	0fd9      	lsrs	r1, r3, #31
 8001b4e:	440b      	add	r3, r1
 8001b50:	105b      	asrs	r3, r3, #1
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	333a      	adds	r3, #58	; 0x3a
 8001b60:	4621      	mov	r1, r4
 8001b62:	f000 f932 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x+obj->width/2, obj->centre.y-obj->depth/2, obj->centre.z+obj->heigth/2, &obj->vertex_start[5]);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	0fd9      	lsrs	r1, r3, #31
 8001b76:	440b      	add	r3, r1
 8001b78:	105b      	asrs	r3, r3, #1
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b218      	sxth	r0, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b92:	0fd9      	lsrs	r1, r3, #31
 8001b94:	440b      	add	r3, r1
 8001b96:	105b      	asrs	r3, r3, #1
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b21c      	sxth	r4, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bb0:	0fd9      	lsrs	r1, r3, #31
 8001bb2:	440b      	add	r3, r1
 8001bb4:	105b      	asrs	r3, r3, #1
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3340      	adds	r3, #64	; 0x40
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	f000 f900 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x+obj->width/2, obj->centre.y-obj->depth/2, obj->centre.z-obj->heigth/2, &obj->vertex_start[6]);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	0fd9      	lsrs	r1, r3, #31
 8001bda:	440b      	add	r3, r1
 8001bdc:	105b      	asrs	r3, r3, #1
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b218      	sxth	r0, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bf6:	0fd9      	lsrs	r1, r3, #31
 8001bf8:	440b      	add	r3, r1
 8001bfa:	105b      	asrs	r3, r3, #1
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b21c      	sxth	r4, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c14:	0fd9      	lsrs	r1, r3, #31
 8001c16:	440b      	add	r3, r1
 8001c18:	105b      	asrs	r3, r3, #1
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3346      	adds	r3, #70	; 0x46
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f000 f8ce 	bl	8001dca <Object3d_SetVertex>
	Object3d_SetVertex(obj->centre.x-obj->width/2, obj->centre.y-obj->depth/2, obj->centre.z-obj->heigth/2, &obj->vertex_start[7]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	0fd9      	lsrs	r1, r3, #31
 8001c3e:	440b      	add	r3, r1
 8001c40:	105b      	asrs	r3, r3, #1
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b218      	sxth	r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5a:	0fd9      	lsrs	r1, r3, #31
 8001c5c:	440b      	add	r3, r1
 8001c5e:	105b      	asrs	r3, r3, #1
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c78:	0fd9      	lsrs	r1, r3, #31
 8001c7a:	440b      	add	r3, r1
 8001c7c:	105b      	asrs	r3, r3, #1
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	334c      	adds	r3, #76	; 0x4c
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f000 f89c 	bl	8001dca <Object3d_SetVertex>

}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}

08001c9a <Object3d_SetBoxEdges>:

void Object3d_SetBoxEdges(Object3d__HandleTypeDef* obj) {
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]

	Object3d_SetEdge(&obj->vertex[0], &obj->vertex[1], &obj->edge[0]);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f503 70a7 	add.w	r0, r3, #334	; 0x14e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f503 71a9 	add.w	r1, r3, #338	; 0x152
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f000 f8a1 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[1], &obj->vertex[2], &obj->edge[1]);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f503 70a9 	add.w	r0, r3, #338	; 0x152
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f503 71ab 	add.w	r1, r3, #342	; 0x156
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f000 f895 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[2], &obj->vertex[3], &obj->edge[2]);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 70ab 	add.w	r0, r3, #342	; 0x156
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 71ad 	add.w	r1, r3, #346	; 0x15a
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f000 f889 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[3], &obj->vertex[0], &obj->edge[3]);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f503 70ad 	add.w	r0, r3, #346	; 0x15a
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f503 71a7 	add.w	r1, r3, #334	; 0x14e
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 f87d 	bl	8001dfc <Object3d_SetEdge>

	Object3d_SetEdge(&obj->vertex[4], &obj->vertex[5], &obj->edge[4]);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f503 70af 	add.w	r0, r3, #350	; 0x15e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f503 71b1 	add.w	r1, r3, #354	; 0x162
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d14:	461a      	mov	r2, r3
 8001d16:	f000 f871 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[5], &obj->vertex[6], &obj->edge[5]);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 70b1 	add.w	r0, r3, #354	; 0x162
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f503 71b3 	add.w	r1, r3, #358	; 0x166
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f000 f865 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[6], &obj->vertex[7], &obj->edge[6]);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f503 70b3 	add.w	r0, r3, #358	; 0x166
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 71b5 	add.w	r1, r3, #362	; 0x16a
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001d44:	461a      	mov	r2, r3
 8001d46:	f000 f859 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[7], &obj->vertex[4], &obj->edge[7]);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 70b5 	add.w	r0, r3, #362	; 0x16a
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 71af 	add.w	r1, r3, #350	; 0x15e
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f000 f84d 	bl	8001dfc <Object3d_SetEdge>

	Object3d_SetEdge(&obj->vertex[0], &obj->vertex[4], &obj->edge[8]);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f503 70a7 	add.w	r0, r3, #334	; 0x14e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f503 71af 	add.w	r1, r3, #350	; 0x15e
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d74:	461a      	mov	r2, r3
 8001d76:	f000 f841 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[1], &obj->vertex[5], &obj->edge[9]);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f503 70a9 	add.w	r0, r3, #338	; 0x152
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f503 71b1 	add.w	r1, r3, #354	; 0x162
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f000 f835 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[2], &obj->vertex[6], &obj->edge[10]);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f503 70ab 	add.w	r0, r3, #342	; 0x156
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 71b3 	add.w	r1, r3, #358	; 0x166
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001da4:	461a      	mov	r2, r3
 8001da6:	f000 f829 	bl	8001dfc <Object3d_SetEdge>
	Object3d_SetEdge(&obj->vertex[3], &obj->vertex[7], &obj->edge[11]);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f503 70ad 	add.w	r0, r3, #346	; 0x15a
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f503 71b5 	add.w	r1, r3, #362	; 0x16a
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f000 f81d 	bl	8001dfc <Object3d_SetEdge>

}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <Object3d_SetVertex>:

	Object3d_SetVertex(centre_x, centre_y, centre_z, &obj->centre);

}

void Object3d_SetVertex(int16_t x, int16_t y, int16_t z, XYZ_point* point) {
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	81fb      	strh	r3, [r7, #14]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	81bb      	strh	r3, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	817b      	strh	r3, [r7, #10]

	point->x = x;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	801a      	strh	r2, [r3, #0]
	point->y = y;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	89ba      	ldrh	r2, [r7, #12]
 8001de8:	805a      	strh	r2, [r3, #2]
	point->z = z;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	897a      	ldrh	r2, [r7, #10]
 8001dee:	809a      	strh	r2, [r3, #4]

}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <Object3d_SetEdge>:

void Object3d_SetEdge(XY_point* p1, XY_point* p2, Edge* e) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]

	e->v1 = p1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]
	e->v2 = p2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	605a      	str	r2, [r3, #4]

}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <Object3d_DrawObject>:

void Object3d_DrawObject(Object3d__HandleTypeDef* obj) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

	Object3d_CalculateObject(obj);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f968 	bl	80020fe <Object3d_CalculateObject>

	uint8_t i = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < obj->edge_quantity; i++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e007      	b.n	8001e48 <Object3d_DrawObject+0x28>
		Object3d_DrawEdge(obj, i);
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f85c 	bl	8001efa <Object3d_DrawEdge>
	for (i = 0; i < obj->edge_quantity; i++) {
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7b5b      	ldrb	r3, [r3, #13]
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3f2      	bcc.n	8001e38 <Object3d_DrawObject+0x18>
	}

}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <Object3d_CleanObject>:

void Object3d_CleanObject(Object3d__HandleTypeDef* obj) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	//
	//LCD_FillScreen(BLACK);

	//Second way to clean object

	uint8_t i = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < obj->edge_quantity; i++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e007      	b.n	8001e7c <Object3d_CleanObject+0x22>
		Object3d_CleanEdge(obj, i);
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f894 	bl	8001f9e <Object3d_CleanEdge>
	for (i = 0; i < obj->edge_quantity; i++) {
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7b5b      	ldrb	r3, [r3, #13]
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d3f2      	bcc.n	8001e6c <Object3d_CleanObject+0x12>
	}

}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <Object3d_SetEdgesColor>:

void Object3d_SetEdgesColor(Object3d__HandleTypeDef* obj, uint16_t c) {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]

	uint8_t i = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < obj->edge_quantity; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e008      	b.n	8001eb6 <Object3d_SetEdgesColor+0x28>
		Object3d_SetEdgeColor(obj, i, c);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f80c 	bl	8001ec8 <Object3d_SetEdgeColor>
	for (i = 0; i < obj->edge_quantity; i++) {
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7b5b      	ldrb	r3, [r3, #13]
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3f1      	bcc.n	8001ea4 <Object3d_SetEdgesColor+0x16>
	}

}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <Object3d_SetEdgeColor>:

void Object3d_SetEdgeColor(Object3d__HandleTypeDef* obj, uint8_t n, uint16_t c) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	803b      	strh	r3, [r7, #0]

	obj->edge[n].color = c;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001eea:	883a      	ldrh	r2, [r7, #0]
 8001eec:	801a      	strh	r2, [r3, #0]

}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <Object3d_DrawEdge>:

void Object3d_DrawEdge(Object3d__HandleTypeDef* obj, uint8_t n) {
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b089      	sub	sp, #36	; 0x24
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]

	int16_t x1 = obj->edge[n].v1->x;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	82fb      	strh	r3, [r7, #22]
	int16_t x2 = obj->edge[n].v2->x;
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	82bb      	strh	r3, [r7, #20]
	int16_t y1 = obj->edge[n].v1->y;
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	827b      	strh	r3, [r7, #18]
	int16_t y2 = obj->edge[n].v2->y;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	885b      	ldrh	r3, [r3, #2]
 8001f64:	823b      	strh	r3, [r7, #16]
	uint16_t color = obj->edge[n].color;
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	81fb      	strh	r3, [r7, #14]

	LCD_DrawLine(x1, y1, x2, y2, color);
 8001f7c:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8001f80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f84:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001f88:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4623      	mov	r3, r4
 8001f92:	f003 f8fb 	bl	800518c <LCD_DrawLine>

}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}

08001f9e <Object3d_CleanEdge>:

void Object3d_CleanEdge(Object3d__HandleTypeDef* obj, uint8_t n) {
 8001f9e:	b590      	push	{r4, r7, lr}
 8001fa0:	b087      	sub	sp, #28
 8001fa2:	af02      	add	r7, sp, #8
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]

	int16_t x1 = obj->edge[n].v1->x;
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	81fb      	strh	r3, [r7, #14]
	int16_t x2 = obj->edge[n].v2->x;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	81bb      	strh	r3, [r7, #12]
	int16_t y1 = obj->edge[n].v1->y;
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	885b      	ldrh	r3, [r3, #2]
 8001ff0:	817b      	strh	r3, [r7, #10]
	int16_t y2 = obj->edge[n].v2->y;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	885b      	ldrh	r3, [r3, #2]
 8002008:	813b      	strh	r3, [r7, #8]

	LCD_DrawLine(x1, y1, x2, y2, BLACK);
 800200a:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 800200e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002012:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002016:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800201a:	2300      	movs	r3, #0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4623      	mov	r3, r4
 8002020:	f003 f8b4 	bl	800518c <LCD_DrawLine>

}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}

0800202c <Object3d_GetRealXY>:

XY_point Object3d_GetRealXY(XYZ_point* k) {
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

	XY_point k_real;

	k_real.x = (k->x) + SCALE_X0 + (k->y)*(k->x)/PERSPECTIVE_COEFICIENT_SCALE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002042:	4619      	mov	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204a:	fb03 f301 	mul.w	r3, r3, r1
 800204e:	491b      	ldr	r1, [pc, #108]	; (80020bc <Object3d_GetRealXY+0x90>)
 8002050:	fb81 0103 	smull	r0, r1, r1, r3
 8002054:	1189      	asrs	r1, r1, #6
 8002056:	17db      	asrs	r3, r3, #31
 8002058:	1acb      	subs	r3, r1, r3
 800205a:	b29b      	uxth	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	3378      	adds	r3, #120	; 0x78
 8002062:	b29b      	uxth	r3, r3
 8002064:	b21b      	sxth	r3, r3
 8002066:	813b      	strh	r3, [r7, #8]
	k_real.y = -(k->z) + SCALE_Y0 - (k->y)*(k->z)/PERSPECTIVE_COEFICIENT_SCALE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002076:	fb03 f302 	mul.w	r3, r3, r2
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <Object3d_GetRealXY+0x90>)
 800207c:	fb82 1203 	smull	r1, r2, r2, r3
 8002080:	1192      	asrs	r2, r2, #6
 8002082:	17db      	asrs	r3, r3, #31
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800208e:	b29b      	uxth	r3, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b29b      	uxth	r3, r3
 8002094:	33a0      	adds	r3, #160	; 0xa0
 8002096:	b29b      	uxth	r3, r3
 8002098:	b21b      	sxth	r3, r3
 800209a:	817b      	strh	r3, [r7, #10]

	return k_real;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	2300      	movs	r3, #0
 80020a2:	89ba      	ldrh	r2, [r7, #12]
 80020a4:	f362 030f 	bfi	r3, r2, #0, #16
 80020a8:	89fa      	ldrh	r2, [r7, #14]
 80020aa:	f362 431f 	bfi	r3, r2, #16, #16
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	51eb851f 	.word	0x51eb851f

080020c0 <Object3d_SetRotation>:

void Object3d_SetRotation(Object3d__HandleTypeDef* obj, float x_angle, float y_angle, float z_angle) {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80020cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80020d0:	ed87 1a00 	vstr	s2, [r7]

	obj->x_rotate = x_angle;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	601a      	str	r2, [r3, #0]
	obj->y_rotate = y_angle;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f203 4374 	addw	r3, r3, #1140	; 0x474
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]
	obj->z_rotate = z_angle;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]

}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <Object3d_CalculateObject>:
	obj->heigth = h;

}


void Object3d_CalculateObject(Object3d__HandleTypeDef* obj) {
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]

	uint8_t i = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
	XYZ_point new_vertex;

	for (i = 0; i < obj->vertex_quantity; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
 800210e:	e01f      	b.n	8002150 <Object3d_CalculateObject+0x52>
		new_vertex = Object3d_CalculateVertex(obj, i);
 8002110:	463b      	mov	r3, r7
 8002112:	7dfa      	ldrb	r2, [r7, #23]
 8002114:	68f9      	ldr	r1, [r7, #12]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f823 	bl	8002162 <Object3d_CalculateVertex>
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	463a      	mov	r2, r7
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
 8002126:	8892      	ldrh	r2, [r2, #4]
 8002128:	809a      	strh	r2, [r3, #4]
		obj->vertex[i] = Object3d_GetRealXY(&new_vertex);
 800212a:	7dfa      	ldrb	r2, [r7, #23]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3252      	adds	r2, #82	; 0x52
 8002130:	0094      	lsls	r4, r2, #2
 8002132:	441c      	add	r4, r3
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff77 	bl	800202c <Object3d_GetRealXY>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	80e2      	strh	r2, [r4, #6]
 8002144:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8002148:	8123      	strh	r3, [r4, #8]
	for (i = 0; i < obj->vertex_quantity; i++) {
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	3301      	adds	r3, #1
 800214e:	75fb      	strb	r3, [r7, #23]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	7dfa      	ldrb	r2, [r7, #23]
 8002156:	429a      	cmp	r2, r3
 8002158:	d3da      	bcc.n	8002110 <Object3d_CalculateObject+0x12>
	}

}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}

08002162 <Object3d_CalculateVertex>:

XYZ_point Object3d_CalculateVertex(Object3d__HandleTypeDef* obj, uint8_t n) {
 8002162:	b590      	push	{r4, r7, lr}
 8002164:	b08f      	sub	sp, #60	; 0x3c
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	4613      	mov	r3, r2
 800216e:	71fb      	strb	r3, [r7, #7]

	XYZ_point nv;

	int16_t new_x = obj->vertex_start[n].x;
 8002170:	79fa      	ldrb	r2, [r7, #7]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	440b      	add	r3, r1
 800217e:	3322      	adds	r3, #34	; 0x22
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	86fb      	strh	r3, [r7, #54]	; 0x36
	int16_t new_y = obj->vertex_start[n].y;
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	3324      	adds	r3, #36	; 0x24
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t new_z = obj->vertex_start[n].z;
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	440b      	add	r3, r1
 80021a6:	3326      	adds	r3, #38	; 0x26
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	867b      	strh	r3, [r7, #50]	; 0x32

	//x axis
	float rx = sqrt(new_z*new_z+new_y*new_y);
 80021ac:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80021b0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80021b4:	fb02 f203 	mul.w	r2, r2, r3
 80021b8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80021bc:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f974 	bl	80004b4 <__aeabi_i2d>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	ec44 3b10 	vmov	d0, r3, r4
 80021d4:	f007 ffd4 	bl	800a180 <sqrt>
 80021d8:	ec54 3b10 	vmov	r3, r4, d0
 80021dc:	4618      	mov	r0, r3
 80021de:	4621      	mov	r1, r4
 80021e0:	f7fe fc82 	bl	8000ae8 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float x_axis_angle = atan2f(new_z, new_y)+obj->x_rotate+obj->x_rotate_start;
 80021e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021f4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80021f8:	ee07 3a10 	vmov	s14, r3
 80021fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002200:	eef0 0a47 	vmov.f32	s1, s14
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	f008 f86c 	bl	800a2e4 <atan2f>
 800220c:	eeb0 7a40 	vmov.f32	s14, s0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	edd3 7a04 	vldr	s15, [r3, #16]
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	new_y = (int16_t) (cosf(x_axis_angle)*rx);
 800222c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002230:	f007 ff24 	bl	800a07c <cosf>
 8002234:	eeb0 7a40 	vmov.f32	s14, s0
 8002238:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002244:	ee17 3a90 	vmov	r3, s15
 8002248:	86bb      	strh	r3, [r7, #52]	; 0x34
	new_z = (int16_t) (sinf(x_axis_angle)*rx);
 800224a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800224e:	f007 ff55 	bl	800a0fc <sinf>
 8002252:	eeb0 7a40 	vmov.f32	s14, s0
 8002256:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002262:	ee17 3a90 	vmov	r3, s15
 8002266:	867b      	strh	r3, [r7, #50]	; 0x32

	//y axis
	float ry = sqrt(new_z*new_z+new_x*new_x);
 8002268:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800226c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002270:	fb02 f203 	mul.w	r2, r2, r3
 8002274:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002278:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f916 	bl	80004b4 <__aeabi_i2d>
 8002288:	4603      	mov	r3, r0
 800228a:	460c      	mov	r4, r1
 800228c:	ec44 3b10 	vmov	d0, r3, r4
 8002290:	f007 ff76 	bl	800a180 <sqrt>
 8002294:	ec54 3b10 	vmov	r3, r4, d0
 8002298:	4618      	mov	r0, r3
 800229a:	4621      	mov	r1, r4
 800229c:	f7fe fc24 	bl	8000ae8 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
	float y_axis_angle = atan2f(new_x, new_z)+obj->y_rotate+obj->y_rotate_start;
 80022a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80022b4:	ee07 3a10 	vmov	s14, r3
 80022b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022bc:	eef0 0a47 	vmov.f32	s1, s14
 80022c0:	eeb0 0a67 	vmov.f32	s0, s15
 80022c4:	f008 f80e 	bl	800a2e4 <atan2f>
 80022c8:	eeb0 7a40 	vmov.f32	s14, s0
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f203 4374 	addw	r3, r3, #1140	; 0x474
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	edc7 7a08 	vstr	s15, [r7, #32]
	new_z = (int16_t) (cosf(y_axis_angle)*ry);
 80022e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80022ec:	f007 fec6 	bl	800a07c <cosf>
 80022f0:	eeb0 7a40 	vmov.f32	s14, s0
 80022f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	867b      	strh	r3, [r7, #50]	; 0x32
	new_x = (int16_t) (sinf(y_axis_angle)*ry);
 8002306:	ed97 0a08 	vldr	s0, [r7, #32]
 800230a:	f007 fef7 	bl	800a0fc <sinf>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231e:	ee17 3a90 	vmov	r3, s15
 8002322:	86fb      	strh	r3, [r7, #54]	; 0x36

	//z axis
	float rz = sqrt(new_x*new_x+new_y*new_y);
 8002324:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002328:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800232c:	fb02 f203 	mul.w	r2, r2, r3
 8002330:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002334:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8b8 	bl	80004b4 <__aeabi_i2d>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	ec44 3b10 	vmov	d0, r3, r4
 800234c:	f007 ff18 	bl	800a180 <sqrt>
 8002350:	ec54 3b10 	vmov	r3, r4, d0
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	f7fe fbc6 	bl	8000ae8 <__aeabi_d2f>
 800235c:	4603      	mov	r3, r0
 800235e:	61fb      	str	r3, [r7, #28]
	float z_axis_angle = atan2f(new_y, new_x)-obj->z_rotate+obj->z_rotate_start;
 8002360:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002370:	ee07 3a10 	vmov	s14, r3
 8002374:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002378:	eef0 0a47 	vmov.f32	s1, s14
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	f007 ffb0 	bl	800a2e4 <atan2f>
 8002384:	eeb0 7a40 	vmov.f32	s14, s0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	edd3 7a06 	vldr	s15, [r3, #24]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a06 	vstr	s15, [r7, #24]
	new_x = (int16_t) (cosf(z_axis_angle)*rz);
 80023a4:	ed97 0a06 	vldr	s0, [r7, #24]
 80023a8:	f007 fe68 	bl	800a07c <cosf>
 80023ac:	eeb0 7a40 	vmov.f32	s14, s0
 80023b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	86fb      	strh	r3, [r7, #54]	; 0x36
	new_y = (int16_t) (sinf(z_axis_angle)*rz);
 80023c2:	ed97 0a06 	vldr	s0, [r7, #24]
 80023c6:	f007 fe99 	bl	800a0fc <sinf>
 80023ca:	eeb0 7a40 	vmov.f32	s14, s0
 80023ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023da:	ee17 3a90 	vmov	r3, s15
 80023de:	86bb      	strh	r3, [r7, #52]	; 0x34

	nv.x = new_x + obj->position.x;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ea:	4413      	add	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	823b      	strh	r3, [r7, #16]
	nv.y = new_y + obj->position.y;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80023fc:	4413      	add	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b21b      	sxth	r3, r3
 8002402:	827b      	strh	r3, [r7, #18]
	nv.z = new_z + obj->position.z;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800240a:	b29a      	uxth	r2, r3
 800240c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800240e:	4413      	add	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	b21b      	sxth	r3, r3
 8002414:	82bb      	strh	r3, [r7, #20]

	return nv;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	461a      	mov	r2, r3
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	6010      	str	r0, [r2, #0]
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	8093      	strh	r3, [r2, #4]

}
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	373c      	adds	r7, #60	; 0x3c
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <HAL_Init+0x40>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_Init+0x40>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_Init+0x40>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_Init+0x40>)
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 f8fa 	bl	8002652 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff f96a 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff f93c 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000008 	.word	0x20000008
 8002498:	20004138 	.word	0x20004138

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20004138 	.word	0x20004138

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ffee 	bl	800249c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_Delay+0x40>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffde 	bl	800249c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000008 	.word	0x20000008

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff4c 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267a:	f7ff ff61 	bl	8002540 <__NVIC_GetPriorityGrouping>
 800267e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f7ff ffb1 	bl	80025ec <NVIC_EncodePriority>
 800268a:	4602      	mov	r2, r0
 800268c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff80 	bl	8002598 <__NVIC_SetPriority>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff54 	bl	800255c <__NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e165      	b.n	80029a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 8154 	bne.w	800299e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00b      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800270a:	2b11      	cmp	r3, #17
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b12      	cmp	r3, #18
 8002714:	d130      	bne.n	8002778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 0201 	and.w	r2, r3, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0xfc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80ae 	beq.w	800299e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_GPIO_Init+0x2fc>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_GPIO_Init+0x2fc>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_GPIO_Init+0x2fc>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a57      	ldr	r2, [pc, #348]	; (80029bc <HAL_GPIO_Init+0x300>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4e      	ldr	r2, [pc, #312]	; (80029c0 <HAL_GPIO_Init+0x304>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d025      	beq.n	80028d6 <HAL_GPIO_Init+0x21a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4d      	ldr	r2, [pc, #308]	; (80029c4 <HAL_GPIO_Init+0x308>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01f      	beq.n	80028d2 <HAL_GPIO_Init+0x216>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_GPIO_Init+0x30c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x212>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_GPIO_Init+0x310>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_GPIO_Init+0x314>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x20a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_GPIO_Init+0x318>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x206>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x31c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x202>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00c      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028be:	2307      	movs	r3, #7
 80028c0:	e00a      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028c2:	2305      	movs	r3, #5
 80028c4:	e008      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028ca:	2303      	movs	r3, #3
 80028cc:	e004      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x21c>
 80028d6:	2300      	movs	r3, #0
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	f002 0203 	and.w	r2, r2, #3
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	4093      	lsls	r3, r2
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e8:	4934      	ldr	r1, [pc, #208]	; (80029bc <HAL_GPIO_Init+0x300>)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <HAL_GPIO_Init+0x320>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_GPIO_Init+0x320>)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_GPIO_Init+0x320>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_GPIO_Init+0x320>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_GPIO_Init+0x320>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296e:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_GPIO_Init+0x320>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x320>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_GPIO_Init+0x320>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	f67f ae96 	bls.w	80026d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029ac:	bf00      	nop
 80029ae:	3724      	adds	r7, #36	; 0x24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021400 	.word	0x40021400
 80029d8:	40021800 	.word	0x40021800
 80029dc:	40013c00 	.word	0x40013c00

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	619a      	str	r2, [r3, #24]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e11f      	b.n	8002c66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fd6c 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2224      	movs	r2, #36	; 0x24
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a78:	f001 f8be 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <HAL_I2C_Init+0x25c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d807      	bhi.n	8002a98 <HAL_I2C_Init+0x84>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_I2C_Init+0x260>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	bf94      	ite	ls
 8002a90:	2301      	movls	r3, #1
 8002a92:	2300      	movhi	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e006      	b.n	8002aa6 <HAL_I2C_Init+0x92>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_I2C_Init+0x264>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0db      	b.n	8002c66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a72      	ldr	r2, [pc, #456]	; (8002c7c <HAL_I2C_Init+0x268>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a64      	ldr	r2, [pc, #400]	; (8002c70 <HAL_I2C_Init+0x25c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <HAL_I2C_Init+0xd4>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	e009      	b.n	8002afc <HAL_I2C_Init+0xe8>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	4a63      	ldr	r2, [pc, #396]	; (8002c80 <HAL_I2C_Init+0x26c>)
 8002af4:	fba2 2303 	umull	r2, r3, r2, r3
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	3301      	adds	r3, #1
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4956      	ldr	r1, [pc, #344]	; (8002c70 <HAL_I2C_Init+0x25c>)
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	d80d      	bhi.n	8002b38 <HAL_I2C_Init+0x124>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e59      	subs	r1, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	bf38      	it	cc
 8002b34:	2304      	movcc	r3, #4
 8002b36:	e04f      	b.n	8002bd8 <HAL_I2C_Init+0x1c4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <HAL_I2C_Init+0x150>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e012      	b.n	8002b8a <HAL_I2C_Init+0x176>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e58      	subs	r0, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	0099      	lsls	r1, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Init+0x17e>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e022      	b.n	8002bd8 <HAL_I2C_Init+0x1c4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10e      	bne.n	8002bb8 <HAL_I2C_Init+0x1a4>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e58      	subs	r0, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	440b      	add	r3, r1
 8002ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb6:	e00f      	b.n	8002bd8 <HAL_I2C_Init+0x1c4>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	0099      	lsls	r1, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	6809      	ldr	r1, [r1, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6911      	ldr	r1, [r2, #16]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68d2      	ldr	r2, [r2, #12]
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	000186a0 	.word	0x000186a0
 8002c74:	001e847f 	.word	0x001e847f
 8002c78:	003d08ff 	.word	0x003d08ff
 8002c7c:	431bde83 	.word	0x431bde83
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	460b      	mov	r3, r1
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c9e:	f7ff fbfd 	bl	800249c <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	f040 80d9 	bne.w	8002e64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2319      	movs	r3, #25
 8002cb8:	2201      	movs	r2, #1
 8002cba:	496d      	ldr	r1, [pc, #436]	; (8002e70 <HAL_I2C_Mem_Write+0x1ec>)
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fc7b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0cc      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Mem_Write+0x56>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0c5      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d007      	beq.n	8002d00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2221      	movs	r2, #33	; 0x21
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a4d      	ldr	r2, [pc, #308]	; (8002e74 <HAL_I2C_Mem_Write+0x1f0>)
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d42:	88f8      	ldrh	r0, [r7, #6]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4603      	mov	r3, r0
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fab6 	bl	80032c4 <I2C_RequestMemoryWrite>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d052      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e081      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fcfc 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d107      	bne.n	8002d8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06b      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11b      	bne.n	8002e04 <HAL_I2C_Mem_Write+0x180>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1aa      	bne.n	8002d62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fce8 	bl	80037e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d107      	bne.n	8002e34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e016      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	00100002 	.word	0x00100002
 8002e74:	ffff0000 	.word	0xffff0000

08002e78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e92:	f7ff fb03 	bl	800249c <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 8208 	bne.w	80032b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2319      	movs	r3, #25
 8002eac:	2201      	movs	r2, #1
 8002eae:	497b      	ldr	r1, [pc, #492]	; (800309c <HAL_I2C_Mem_Read+0x224>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb81 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e1fb      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Mem_Read+0x56>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e1f4      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d007      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2222      	movs	r2, #34	; 0x22
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_I2C_Mem_Read+0x228>)
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f36:	88f8      	ldrh	r0, [r7, #6]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	8979      	ldrh	r1, [r7, #10]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4603      	mov	r3, r0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa50 	bl	80033ec <I2C_RequestMemoryRead>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e1b0      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e184      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e164      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11b      	bne.n	8003006 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	e144      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800301c:	e138      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b03      	cmp	r3, #3
 8003024:	f200 80f1 	bhi.w	800320a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b01      	cmp	r3, #1
 800302e:	d123      	bne.n	8003078 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fc17 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e139      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003076:	e10b      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b02      	cmp	r3, #2
 800307e:	d14e      	bne.n	800311e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	2200      	movs	r2, #0
 8003088:	4906      	ldr	r1, [pc, #24]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa94 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e10e      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000
 80030a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311c:	e0b8      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	2200      	movs	r2, #0
 8003126:	4966      	ldr	r1, [pc, #408]	; (80032c0 <HAL_I2C_Mem_Read+0x448>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fa45 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0bf      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2200      	movs	r2, #0
 8003182:	494f      	ldr	r1, [pc, #316]	; (80032c0 <HAL_I2C_Mem_Read+0x448>)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fa17 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e091      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003208:	e042      	b.n	8003290 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fb2a 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e04c      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d118      	bne.n	8003290 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f aec2 	bne.w	800301e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	00010004 	.word	0x00010004

080032c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f95c 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e05f      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800332e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	492c      	ldr	r1, [pc, #176]	; (80033e8 <I2C_RequestMemoryWrite+0x124>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f995 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e04c      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	6a39      	ldr	r1, [r7, #32]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f9ff 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b04      	cmp	r3, #4
 8003372:	d107      	bne.n	8003384 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e02b      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]
 8003398:	e021      	b.n	80033de <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800339a:	893b      	ldrh	r3, [r7, #8]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	b29b      	uxth	r3, r3
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f9d9 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e005      	b.n	80033e0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d4:	893b      	ldrh	r3, [r7, #8]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	00010002 	.word	0x00010002

080033ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003414:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2200      	movs	r2, #0
 800342e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f8c0 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0a9      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	4951      	ldr	r1, [pc, #324]	; (80035b4 <I2C_RequestMemoryRead+0x1c8>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f8f9 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e096      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f963 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e075      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	e021      	b.n	8003516 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	6a39      	ldr	r1, [r7, #32]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f93d 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04f      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f922 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b04      	cmp	r3, #4
 800352c:	d107      	bne.n	800353e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e034      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	2200      	movs	r2, #0
 800355a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f82a 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e013      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	4906      	ldr	r1, [pc, #24]	; (80035b4 <I2C_RequestMemoryRead+0x1c8>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f863 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	e025      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d021      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fe ff63 	bl	800249c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e023      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	e00c      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d0b6      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003674:	e051      	b.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d123      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e046      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe fee1 	bl	800249c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e020      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d18d      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8ce 	bl	8003914 <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d021      	beq.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe fe87 	bl	800249c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d1ca      	bne.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f88d 	bl	8003914 <I2C_IsAcknowledgeFailed>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02d      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d021      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fe fe46 	bl	800249c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1ca      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e042      	b.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e029      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fdf0 	bl	800249c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d1b5      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d11b      	bne.n	8003964 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003934:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x94>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a0:	f7fe fd7c 	bl	800249c <HAL_GetTick>
 80039a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a6:	e009      	b.n	80039bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039a8:	f7fe fd78 	bl	800249c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b6:	d901      	bls.n	80039bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e01f      	b.n	80039fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d1ee      	bne.n	80039a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039ca:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d0:	f7fe fd64 	bl	800249c <HAL_GetTick>
 80039d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039d6:	e009      	b.n	80039ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039d8:	f7fe fd60 	bl	800249c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e6:	d901      	bls.n	80039ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e007      	b.n	80039fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f8:	d1ee      	bne.n	80039d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	420e0040 	.word	0x420e0040
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	420e0044 	.word	0x420e0044

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0cc      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90c      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d044      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d119      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e067      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4934      	ldr	r1, [pc, #208]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fcca 	bl	800249c <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe fcc6 	bl	800249c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e04f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d20c      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f873 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	fa21 f303 	lsr.w	r3, r1, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fdbc 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800b440 	.word	0x0800b440
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000004 	.word	0x20000004

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4601      	mov	r1, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	0800b450 	.word	0x0800b450

08003c20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RCC_GetClockConfig+0x60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 020f 	and.w	r2, r3, #15
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9e:	4bc6      	ldr	r3, [pc, #792]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	f200 817e 	bhi.w	8003fa8 <HAL_RCC_GetSysClockFreq+0x324>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_RCC_GetSysClockFreq+0x30>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003fa9 	.word	0x08003fa9
 8003cbc:	08003fa9 	.word	0x08003fa9
 8003cc0:	08003fa9 	.word	0x08003fa9
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003fa9 	.word	0x08003fa9
 8003ccc:	08003fa9 	.word	0x08003fa9
 8003cd0:	08003fa9 	.word	0x08003fa9
 8003cd4:	08003cf5 	.word	0x08003cf5
 8003cd8:	08003fa9 	.word	0x08003fa9
 8003cdc:	08003fa9 	.word	0x08003fa9
 8003ce0:	08003fa9 	.word	0x08003fa9
 8003ce4:	08003e51 	.word	0x08003e51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4bb4      	ldr	r3, [pc, #720]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x338>)
 8003cea:	613b      	str	r3, [r7, #16]
       break;
 8003cec:	e15f      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cee:	4bb4      	ldr	r3, [pc, #720]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003cf0:	613b      	str	r3, [r7, #16]
      break;
 8003cf2:	e15c      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4bb0      	ldr	r3, [pc, #704]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfe:	4bae      	ldr	r3, [pc, #696]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d04a      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4bab      	ldr	r3, [pc, #684]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	f04f 0400 	mov.w	r4, #0
 8003d14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	ea03 0501 	and.w	r5, r3, r1
 8003d20:	ea04 0602 	and.w	r6, r4, r2
 8003d24:	4629      	mov	r1, r5
 8003d26:	4632      	mov	r2, r6
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f04f 0400 	mov.w	r4, #0
 8003d30:	0154      	lsls	r4, r2, #5
 8003d32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d36:	014b      	lsls	r3, r1, #5
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	1b49      	subs	r1, r1, r5
 8003d3e:	eb62 0206 	sbc.w	r2, r2, r6
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	f04f 0400 	mov.w	r4, #0
 8003d4a:	0194      	lsls	r4, r2, #6
 8003d4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d50:	018b      	lsls	r3, r1, #6
 8003d52:	1a5b      	subs	r3, r3, r1
 8003d54:	eb64 0402 	sbc.w	r4, r4, r2
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	00e2      	lsls	r2, r4, #3
 8003d62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d66:	00d9      	lsls	r1, r3, #3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	195b      	adds	r3, r3, r5
 8003d6e:	eb44 0406 	adc.w	r4, r4, r6
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	0262      	lsls	r2, r4, #9
 8003d7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d80:	0259      	lsls	r1, r3, #9
 8003d82:	460b      	mov	r3, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	4621      	mov	r1, r4
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f04f 0400 	mov.w	r4, #0
 8003d90:	461a      	mov	r2, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	f7fc fef8 	bl	8000b88 <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e049      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da0:	4b85      	ldr	r3, [pc, #532]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea03 0501 	and.w	r5, r3, r1
 8003db6:	ea04 0602 	and.w	r6, r4, r2
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	f04f 0400 	mov.w	r4, #0
 8003dc6:	0154      	lsls	r4, r2, #5
 8003dc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dcc:	014b      	lsls	r3, r1, #5
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	1b49      	subs	r1, r1, r5
 8003dd4:	eb62 0206 	sbc.w	r2, r2, r6
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	f04f 0400 	mov.w	r4, #0
 8003de0:	0194      	lsls	r4, r2, #6
 8003de2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003de6:	018b      	lsls	r3, r1, #6
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	eb64 0402 	sbc.w	r4, r4, r2
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	00e2      	lsls	r2, r4, #3
 8003df8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dfc:	00d9      	lsls	r1, r3, #3
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4614      	mov	r4, r2
 8003e02:	195b      	adds	r3, r3, r5
 8003e04:	eb44 0406 	adc.w	r4, r4, r6
 8003e08:	f04f 0100 	mov.w	r1, #0
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	02a2      	lsls	r2, r4, #10
 8003e12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e16:	0299      	lsls	r1, r3, #10
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	4621      	mov	r1, r4
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	461a      	mov	r2, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	f7fc fead 	bl	8000b88 <__aeabi_uldivmod>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e34:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	613b      	str	r3, [r7, #16]
      break;
 8003e4e:	e0ae      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e58:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e5a:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d04a      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e66:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	f04f 0400 	mov.w	r4, #0
 8003e70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	ea03 0501 	and.w	r5, r3, r1
 8003e7c:	ea04 0602 	and.w	r6, r4, r2
 8003e80:	4629      	mov	r1, r5
 8003e82:	4632      	mov	r2, r6
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	0154      	lsls	r4, r2, #5
 8003e8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e92:	014b      	lsls	r3, r1, #5
 8003e94:	4619      	mov	r1, r3
 8003e96:	4622      	mov	r2, r4
 8003e98:	1b49      	subs	r1, r1, r5
 8003e9a:	eb62 0206 	sbc.w	r2, r2, r6
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	f04f 0400 	mov.w	r4, #0
 8003ea6:	0194      	lsls	r4, r2, #6
 8003ea8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003eac:	018b      	lsls	r3, r1, #6
 8003eae:	1a5b      	subs	r3, r3, r1
 8003eb0:	eb64 0402 	sbc.w	r4, r4, r2
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	00e2      	lsls	r2, r4, #3
 8003ebe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ec2:	00d9      	lsls	r1, r3, #3
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4614      	mov	r4, r2
 8003ec8:	195b      	adds	r3, r3, r5
 8003eca:	eb44 0406 	adc.w	r4, r4, r6
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	0262      	lsls	r2, r4, #9
 8003ed8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003edc:	0259      	lsls	r1, r3, #9
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	461a      	mov	r2, r3
 8003eee:	4623      	mov	r3, r4
 8003ef0:	f7fc fe4a 	bl	8000b88 <__aeabi_uldivmod>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e049      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	f04f 0400 	mov.w	r4, #0
 8003f06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	ea03 0501 	and.w	r5, r3, r1
 8003f12:	ea04 0602 	and.w	r6, r4, r2
 8003f16:	4629      	mov	r1, r5
 8003f18:	4632      	mov	r2, r6
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	f04f 0400 	mov.w	r4, #0
 8003f22:	0154      	lsls	r4, r2, #5
 8003f24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f28:	014b      	lsls	r3, r1, #5
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	1b49      	subs	r1, r1, r5
 8003f30:	eb62 0206 	sbc.w	r2, r2, r6
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	f04f 0400 	mov.w	r4, #0
 8003f3c:	0194      	lsls	r4, r2, #6
 8003f3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f42:	018b      	lsls	r3, r1, #6
 8003f44:	1a5b      	subs	r3, r3, r1
 8003f46:	eb64 0402 	sbc.w	r4, r4, r2
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	00e2      	lsls	r2, r4, #3
 8003f54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f58:	00d9      	lsls	r1, r3, #3
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	195b      	adds	r3, r3, r5
 8003f60:	eb44 0406 	adc.w	r4, r4, r6
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	02a2      	lsls	r2, r4, #10
 8003f6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f72:	0299      	lsls	r1, r3, #10
 8003f74:	460b      	mov	r3, r1
 8003f76:	4614      	mov	r4, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f04f 0400 	mov.w	r4, #0
 8003f82:	461a      	mov	r2, r3
 8003f84:	4623      	mov	r3, r4
 8003f86:	f7fc fdff 	bl	8000b88 <__aeabi_uldivmod>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	0f1b      	lsrs	r3, r3, #28
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	613b      	str	r3, [r7, #16]
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x338>)
 8003faa:	613b      	str	r3, [r7, #16]
      break;
 8003fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fae:	693b      	ldr	r3, [r7, #16]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200

08003fc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8083 	beq.w	80040e4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fde:	4b95      	ldr	r3, [pc, #596]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d019      	beq.n	800401e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003fea:	4b92      	ldr	r3, [pc, #584]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ff6:	4b8f      	ldr	r3, [pc, #572]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004002:	d00c      	beq.n	800401e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004004:	4b8b      	ldr	r3, [pc, #556]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d112      	bne.n	8004036 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004010:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401c:	d10b      	bne.n	8004036 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401e:	4b85      	ldr	r3, [pc, #532]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d05b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x11e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d157      	bne.n	80040e2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e216      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x8a>
 8004040:	4b7c      	ldr	r3, [pc, #496]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7b      	ldr	r2, [pc, #492]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e01d      	b.n	800408a <HAL_RCC_OscConfig+0xc6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004056:	d10c      	bne.n	8004072 <HAL_RCC_OscConfig+0xae>
 8004058:	4b76      	ldr	r3, [pc, #472]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a75      	ldr	r2, [pc, #468]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800405e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b73      	ldr	r3, [pc, #460]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a72      	ldr	r2, [pc, #456]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e00b      	b.n	800408a <HAL_RCC_OscConfig+0xc6>
 8004072:	4b70      	ldr	r3, [pc, #448]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6f      	ldr	r2, [pc, #444]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6c      	ldr	r2, [pc, #432]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d013      	beq.n	80040ba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fe fa03 	bl	800249c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800409a:	f7fe f9ff 	bl	800249c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1db      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ac:	4b61      	ldr	r3, [pc, #388]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0xd6>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe f9ef 	bl	800249c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c2:	f7fe f9eb 	bl	800249c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e1c7      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d4:	4b57      	ldr	r3, [pc, #348]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0xfe>
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d06f      	beq.n	80041d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040fc:	4b4d      	ldr	r3, [pc, #308]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004104:	2b08      	cmp	r3, #8
 8004106:	d105      	bne.n	8004114 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004108:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004114:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d11c      	bne.n	800415a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004120:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d116      	bne.n	800415a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412c:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x180>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e18f      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4938      	ldr	r1, [pc, #224]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004158:	e03a      	b.n	80041d0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004162:	4b35      	ldr	r3, [pc, #212]	; (8004238 <HAL_RCC_OscConfig+0x274>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe f998 	bl	800249c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004170:	f7fe f994 	bl	800249c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e170      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4925      	ldr	r1, [pc, #148]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
 80041a2:	e015      	b.n	80041d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCC_OscConfig+0x274>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe f977 	bl	800249c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fe f973 	bl	800249c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e14f      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d037      	beq.n	800424c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCC_OscConfig+0x278>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fe f957 	bl	800249c <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe f953 	bl	800249c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e12f      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x270>)
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x22e>
 8004210:	e01c      	b.n	800424c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_OscConfig+0x278>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe f940 	bl	800249c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421e:	e00f      	b.n	8004240 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe f93c 	bl	800249c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d908      	bls.n	8004240 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e118      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	42470000 	.word	0x42470000
 800423c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b8a      	ldr	r3, [pc, #552]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e9      	bne.n	8004220 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8097 	beq.w	8004388 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b83      	ldr	r3, [pc, #524]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	4a7e      	ldr	r2, [pc, #504]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	4b7c      	ldr	r3, [pc, #496]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b79      	ldr	r3, [pc, #484]	; (8004470 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe f8fb 	bl	800249c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fe f8f7 	bl	800249c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0d3      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x4ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x31a>
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a65      	ldr	r2, [pc, #404]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
 80042dc:	e01c      	b.n	8004318 <HAL_RCC_OscConfig+0x354>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x33c>
 80042e6:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b5e      	ldr	r3, [pc, #376]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a5d      	ldr	r2, [pc, #372]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x354>
 8004300:	4b5a      	ldr	r3, [pc, #360]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	4a59      	ldr	r2, [pc, #356]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6713      	str	r3, [r2, #112]	; 0x70
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004312:	f023 0304 	bic.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f8bc 	bl	800249c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe f8b8 	bl	800249c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e092      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RCC_OscConfig+0x364>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fe f8a6 	bl	800249c <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fe f8a2 	bl	800249c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e07c      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436a:	4b40      	ldr	r3, [pc, #256]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ee      	bne.n	8004354 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	4a3a      	ldr	r2, [pc, #232]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d068      	beq.n	8004462 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d060      	beq.n	800445e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d145      	bne.n	8004430 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b33      	ldr	r3, [pc, #204]	; (8004474 <HAL_RCC_OscConfig+0x4b0>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fe f877 	bl	800249c <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe f873 	bl	800249c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e04f      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	019b      	lsls	r3, r3, #6
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	3b01      	subs	r3, #1
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	491b      	ldr	r1, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004402:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <HAL_RCC_OscConfig+0x4b0>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe f848 	bl	800249c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004410:	f7fe f844 	bl	800249c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e020      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x44c>
 800442e:	e018      	b.n	8004462 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_OscConfig+0x4b0>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fe f831 	bl	800249c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443e:	f7fe f82d 	bl	800249c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e009      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_OscConfig+0x4a8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCC_OscConfig+0x47a>
 800445c:	e001      	b.n	8004462 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	42470060 	.word	0x42470060

08004478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e01d      	b.n	80044c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f815 	bl	80044ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 f968 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d007      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b02      	cmp	r3, #2
 800453e:	d122      	bne.n	8004586 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d11b      	bne.n	8004586 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0202 	mvn.w	r2, #2
 8004556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8ee 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 8004572:	e005      	b.n	8004580 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8e0 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8f1 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b04      	cmp	r3, #4
 8004592:	d122      	bne.n	80045da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d11b      	bne.n	80045da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0204 	mvn.w	r2, #4
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f8c4 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 80045c6:	e005      	b.n	80045d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8b6 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8c7 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d122      	bne.n	800462e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d11b      	bne.n	800462e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0208 	mvn.w	r2, #8
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f89a 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f88c 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f89d 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b10      	cmp	r3, #16
 800463a:	d122      	bne.n	8004682 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d11b      	bne.n	8004682 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0210 	mvn.w	r2, #16
 8004652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2208      	movs	r2, #8
 8004658:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f870 	bl	800474e <HAL_TIM_IC_CaptureCallback>
 800466e:	e005      	b.n	800467c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f862 	bl	800473a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f873 	bl	8004762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0201 	mvn.w	r2, #1
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fc ffff 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b8:	2b80      	cmp	r3, #128	; 0x80
 80046ba:	d10e      	bne.n	80046da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d107      	bne.n	80046da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f903 	bl	80048e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d10e      	bne.n	8004706 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d107      	bne.n	8004706 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f838 	bl	8004776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b20      	cmp	r3, #32
 8004712:	d10e      	bne.n	8004732 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d107      	bne.n	8004732 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 0220 	mvn.w	r2, #32
 800472a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8cd 	bl	80048cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a40      	ldr	r2, [pc, #256]	; (80048a0 <TIM_Base_SetConfig+0x114>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d00f      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <TIM_Base_SetConfig+0x118>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <TIM_Base_SetConfig+0x11c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3b      	ldr	r2, [pc, #236]	; (80048ac <TIM_Base_SetConfig+0x120>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3a      	ldr	r2, [pc, #232]	; (80048b0 <TIM_Base_SetConfig+0x124>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d108      	bne.n	80047de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <TIM_Base_SetConfig+0x114>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d027      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <TIM_Base_SetConfig+0x118>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d023      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2b      	ldr	r2, [pc, #172]	; (80048a8 <TIM_Base_SetConfig+0x11c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <TIM_Base_SetConfig+0x120>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <TIM_Base_SetConfig+0x124>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <TIM_Base_SetConfig+0x128>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <TIM_Base_SetConfig+0x12c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a26      	ldr	r2, [pc, #152]	; (80048bc <TIM_Base_SetConfig+0x130>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <TIM_Base_SetConfig+0x134>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a24      	ldr	r2, [pc, #144]	; (80048c4 <TIM_Base_SetConfig+0x138>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a23      	ldr	r2, [pc, #140]	; (80048c8 <TIM_Base_SetConfig+0x13c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <TIM_Base_SetConfig+0x114>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <TIM_Base_SetConfig+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d103      	bne.n	800488c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	615a      	str	r2, [r3, #20]
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	40001800 	.word	0x40001800
 80048c4:	40001c00 	.word	0x40001c00
 80048c8:	40002000 	.word	0x40002000

080048cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 80048fc:	e003      	b.n	8004906 <delay+0x12>
 80048fe:	bf00      	nop
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3b01      	subs	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f8      	bne.n	80048fe <delay+0xa>
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d003      	beq.n	800492e <GPIO_Init+0x16>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 8081 	bne.w	8004a30 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <GPIO_Init+0x120>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4a40      	ldr	r2, [pc, #256]	; (8004a38 <GPIO_Init+0x120>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6313      	str	r3, [r2, #48]	; 0x30
 800493e:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <GPIO_Init+0x120>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	4b3a      	ldr	r3, [pc, #232]	; (8004a38 <GPIO_Init+0x120>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <GPIO_Init+0x120>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <GPIO_Init+0x120>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <GPIO_Init+0x120>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	4a32      	ldr	r2, [pc, #200]	; (8004a38 <GPIO_Init+0x120>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6313      	str	r3, [r2, #48]	; 0x30
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <GPIO_Init+0x120>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004982:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004986:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4619      	mov	r1, r3
 800499a:	4828      	ldr	r0, [pc, #160]	; (8004a3c <GPIO_Init+0x124>)
 800499c:	f7fd fe8e 	bl	80026bc <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 80049a0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80049a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4619      	mov	r1, r3
 80049b8:	4821      	ldr	r0, [pc, #132]	; (8004a40 <GPIO_Init+0x128>)
 80049ba:	f7fd fe7f 	bl	80026bc <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	4619      	mov	r1, r3
 80049d4:	481b      	ldr	r0, [pc, #108]	; (8004a44 <GPIO_Init+0x12c>)
 80049d6:	f7fd fe71 	bl	80026bc <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 80049da:	2313      	movs	r3, #19
 80049dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4619      	mov	r1, r3
 80049f0:	4812      	ldr	r0, [pc, #72]	; (8004a3c <GPIO_Init+0x124>)
 80049f2:	f7fd fe63 	bl	80026bc <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049f6:	2301      	movs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	480c      	ldr	r0, [pc, #48]	; (8004a40 <GPIO_Init+0x128>)
 8004a0e:	f7fd fe55 	bl	80026bc <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a12:	2302      	movs	r3, #2
 8004a14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <GPIO_Init+0x12c>)
 8004a2a:	f7fd fe47 	bl	80026bc <HAL_GPIO_Init>
 8004a2e:	e000      	b.n	8004a32 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8004a30:	bf00      	nop
}
 8004a32:	3728      	adds	r7, #40	; 0x28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40020000 	.word	0x40020000
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40020800 	.word	0x40020800

08004a48 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <LCD_Write8+0xa4>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	79fa      	ldrb	r2, [r7, #7]
 8004a5e:	0252      	lsls	r2, r2, #9
 8004a60:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a64:	431a      	orrs	r2, r3
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	491c      	ldr	r1, [pc, #112]	; (8004aec <LCD_Write8+0xa4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <LCD_Write8+0xa8>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8004a86:	4013      	ands	r3, r2
 8004a88:	79fa      	ldrb	r2, [r7, #7]
 8004a8a:	f002 0208 	and.w	r2, r2, #8
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	105b      	asrs	r3, r3, #1
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aac:	4910      	ldr	r1, [pc, #64]	; (8004af0 <LCD_Write8+0xa8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <LCD_Write8+0xac>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8004aba:	4013      	ands	r3, r2
 8004abc:	79fa      	ldrb	r2, [r7, #7]
 8004abe:	0192      	lsls	r2, r2, #6
 8004ac0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004ac4:	490b      	ldr	r1, [pc, #44]	; (8004af4 <LCD_Write8+0xac>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <LCD_Write8+0xa4>)
 8004acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad0:	619a      	str	r2, [r3, #24]
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7ff ff0e 	bl	80048f4 <delay>
 8004ad8:	4b04      	ldr	r3, [pc, #16]	; (8004aec <LCD_Write8+0xa4>)
 8004ada:	2202      	movs	r2, #2
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	2002      	movs	r0, #2
 8004ae0:	f7ff ff08 	bl	80048f4 <delay>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40020000 	.word	0x40020000
 8004af0:	40020400 	.word	0x40020400
 8004af4:	40020800 	.word	0x40020800

08004af8 <LCD_Write16Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	71fb      	strb	r3, [r7, #7]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <LCD_Write16Register8+0x48>)
 8004b0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b0e:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ff98 	bl	8004a48 <LCD_Write8>
	LCD_CD_DATA();
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <LCD_Write16Register8+0x48>)
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8004b1e:	88bb      	ldrh	r3, [r7, #4]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff8e 	bl	8004a48 <LCD_Write8>
	LCD_Write8(d);
 8004b2c:	88bb      	ldrh	r3, [r7, #4]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff89 	bl	8004a48 <LCD_Write8>
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40020000 	.word	0x40020000

08004b44 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	80fb      	strh	r3, [r7, #6]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <LCD_Write16Register16+0x58>)
 8004b56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b5a:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff6f 	bl	8004a48 <LCD_Write8>
	LCD_Write8(a);
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff ff6a 	bl	8004a48 <LCD_Write8>
	LCD_CD_DATA();
 8004b74:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <LCD_Write16Register16+0x58>)
 8004b76:	2210      	movs	r2, #16
 8004b78:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 8004b7a:	88bb      	ldrh	r3, [r7, #4]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ff60 	bl	8004a48 <LCD_Write8>
	LCD_Write8(d);
 8004b88:	88bb      	ldrh	r3, [r7, #4]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff5b 	bl	8004a48 <LCD_Write8>
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40020000 	.word	0x40020000

08004ba0 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8004ba6:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <LCD_Init+0xf4>)
 8004ba8:	22f0      	movs	r2, #240	; 0xf0
 8004baa:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8004bac:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <LCD_Init+0xf8>)
 8004bae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bb2:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <LCD_Init+0xfc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <LCD_Init+0x100>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <LCD_Init+0x100>)
 8004bc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <LCD_Init+0x104>)
 8004bc8:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <LCD_Init+0x108>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8004bd0:	4b36      	ldr	r3, [pc, #216]	; (8004cac <LCD_Init+0x10c>)
 8004bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	4b34      	ldr	r3, [pc, #208]	; (8004cac <LCD_Init+0x10c>)
 8004bda:	881a      	ldrh	r2, [r3, #0]
 8004bdc:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <LCD_Init+0x110>)
 8004bde:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <LCD_Init+0x114>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7ff fe96 	bl	8004918 <GPIO_Init>

	LCD_Reset();
 8004bec:	f000 f990 	bl	8004f10 <LCD_Reset>
	HAL_Delay(50);
 8004bf0:	2032      	movs	r0, #50	; 0x32
 8004bf2:	f7fd fc5f 	bl	80024b4 <HAL_Delay>

	LCD_CS_ACTIVE();
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <LCD_Init+0x118>)
 8004bf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bfc:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8004c02:	e01d      	b.n	8004c40 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	71fa      	strb	r2, [r7, #7]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <LCD_Init+0x11c>)
 8004c0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c12:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	71fa      	strb	r2, [r7, #7]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <LCD_Init+0x11c>)
 8004c1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c22:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8004c24:	88bb      	ldrh	r3, [r7, #4]
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d104      	bne.n	8004c34 <LCD_Init+0x94>
			HAL_Delay(d);
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fd fc41 	bl	80024b4 <HAL_Delay>
 8004c32:	e005      	b.n	8004c40 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	88bb      	ldrh	r3, [r7, #4]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff ff82 	bl	8004b44 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	2b65      	cmp	r3, #101	; 0x65
 8004c44:	d9de      	bls.n	8004c04 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <LCD_Init+0xfc>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fa3c 	bl	80050c8 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <LCD_Init+0xf4>)
 8004c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <LCD_Init+0xf8>)
 8004c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f000 f99a 	bl	8004fa4 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8004c70:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <LCD_Init+0x118>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 8004c76:	2000      	movs	r0, #0
 8004c78:	f000 f908 	bl	8004e8c <LCD_FillScreen>
	LCD_SetTextSize(0);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f000 fb27 	bl	80052d0 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8004c82:	2100      	movs	r1, #0
 8004c84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004c88:	f000 fb3c 	bl	8005304 <LCD_SetTextColor>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000320 	.word	0x20000320
 8004c98:	20000322 	.word	0x20000322
 8004c9c:	2000032d 	.word	0x2000032d
 8004ca0:	20000324 	.word	0x20000324
 8004ca4:	20000326 	.word	0x20000326
 8004ca8:	2000032c 	.word	0x2000032c
 8004cac:	2000032a 	.word	0x2000032a
 8004cb0:	20000328 	.word	0x20000328
 8004cb4:	2000032e 	.word	0x2000032e
 8004cb8:	40020400 	.word	0x40020400
 8004cbc:	0800b458 	.word	0x0800b458

08004cc0 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	80fb      	strh	r3, [r7, #6]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	80bb      	strh	r3, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8004cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	db51      	blt.n	8004d7e <LCD_DrawPixel+0xbe>
 8004cda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	db4d      	blt.n	8004d7e <LCD_DrawPixel+0xbe>
 8004ce2:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <LCD_DrawPixel+0xc8>)
 8004ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ce8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	da46      	bge.n	8004d7e <LCD_DrawPixel+0xbe>
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <LCD_DrawPixel+0xcc>)
 8004cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	da3f      	bge.n	8004d7e <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <LCD_DrawPixel+0xd0>)
 8004d00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d04:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <LCD_DrawPixel+0xd4>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d00d      	beq.n	8004d2a <LCD_DrawPixel+0x6a>
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d017      	beq.n	8004d42 <LCD_DrawPixel+0x82>
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d120      	bne.n	8004d58 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 8004d1a:	88bb      	ldrh	r3, [r7, #4]
 8004d1c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	80fb      	strh	r3, [r7, #6]
		y = t;
 8004d24:	89fb      	ldrh	r3, [r7, #14]
 8004d26:	80bb      	strh	r3, [r7, #4]
		break;
 8004d28:	e016      	b.n	8004d58 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8004d34:	88bb      	ldrh	r3, [r7, #4]
 8004d36:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	80bb      	strh	r3, [r7, #4]
		break;
 8004d40:	e00a      	b.n	8004d58 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	81fb      	strh	r3, [r7, #14]
		x = y;
 8004d46:	88bb      	ldrh	r3, [r7, #4]
 8004d48:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 8004d4a:	89fb      	ldrh	r3, [r7, #14]
 8004d4c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004d50:	3301      	adds	r3, #1
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	80bb      	strh	r3, [r7, #4]
		break;
 8004d56:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	2020      	movs	r0, #32
 8004d5e:	f7ff fef1 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8004d62:	88bb      	ldrh	r3, [r7, #4]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2021      	movs	r0, #33	; 0x21
 8004d68:	f7ff feec 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	2022      	movs	r0, #34	; 0x22
 8004d72:	f7ff fee7 	bl	8004b44 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <LCD_DrawPixel+0xd0>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	619a      	str	r2, [r3, #24]
 8004d7c:	e000      	b.n	8004d80 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8004d7e:	bf00      	nop
}
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000320 	.word	0x20000320
 8004d8c:	20000322 	.word	0x20000322
 8004d90:	40020400 	.word	0x40020400
 8004d94:	2000032d 	.word	0x2000032d

08004d98 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fac4 	bl	8005334 <LCD_Color565_to_R>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
	uint8_t green = LCD_Color565_to_G(color);
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 facf 	bl	8005356 <LCD_Color565_to_G>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = LCD_Color565_to_B(color);
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fada 	bl	8005378 <LCD_Color565_to_B>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	737b      	strb	r3, [r7, #13]
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <LCD_Flood+0xec>)
 8004dca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004dce:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	2022      	movs	r0, #34	; 0x22
 8004dd6:	f7ff feb5 	bl	8004b44 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	7bbb      	ldrb	r3, [r7, #14]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d141      	bne.n	8004e6c <LCD_Flood+0xd4>
 8004de8:	7bba      	ldrb	r2, [r7, #14]
 8004dea:	7b7b      	ldrb	r3, [r7, #13]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d13d      	bne.n	8004e6c <LCD_Flood+0xd4>
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d139      	bne.n	8004e6c <LCD_Flood+0xd4>
#else
	if (hi == lo) {
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8004df8:	e026      	b.n	8004e48 <LCD_Flood+0xb0>
#if defined(SSD1297)
			LCD_WR_STROBE();
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <LCD_Flood+0xf0>)
 8004dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e00:	619a      	str	r2, [r3, #24]
 8004e02:	2002      	movs	r0, #2
 8004e04:	f7ff fd76 	bl	80048f4 <delay>
 8004e08:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <LCD_Flood+0xf0>)
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	619a      	str	r2, [r3, #24]
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f7ff fd70 	bl	80048f4 <delay>
#endif
			LCD_WR_STROBE();
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <LCD_Flood+0xf0>)
 8004e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	2002      	movs	r0, #2
 8004e1e:	f7ff fd69 	bl	80048f4 <delay>
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <LCD_Flood+0xf0>)
 8004e24:	2202      	movs	r2, #2
 8004e26:	619a      	str	r2, [r3, #24]
 8004e28:	2002      	movs	r0, #2
 8004e2a:	f7ff fd63 	bl	80048f4 <delay>
			LCD_WR_STROBE();
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <LCD_Flood+0xf0>)
 8004e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	2002      	movs	r0, #2
 8004e38:	f7ff fd5c 	bl	80048f4 <delay>
 8004e3c:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <LCD_Flood+0xf0>)
 8004e3e:	2202      	movs	r2, #2
 8004e40:	619a      	str	r2, [r3, #24]
 8004e42:	2002      	movs	r0, #2
 8004e44:	f7ff fd56 	bl	80048f4 <delay>
		while (len--) {
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	603a      	str	r2, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1d3      	bne.n	8004dfa <LCD_Flood+0x62>
	if ((red == green) && (green == blue) && (red == blue)) {
 8004e52:	e010      	b.n	8004e76 <LCD_Flood+0xde>
		}
	} else {
		while (len--) {
#if defined(SSD1297)
			LCD_Write8(red);
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fdf6 	bl	8004a48 <LCD_Write8>
			LCD_Write8(green);
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fdf2 	bl	8004a48 <LCD_Write8>
			LCD_Write8(blue);
 8004e64:	7b7b      	ldrb	r3, [r7, #13]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fdee 	bl	8004a48 <LCD_Write8>
		while (len--) {
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	1e5a      	subs	r2, r3, #1
 8004e70:	603a      	str	r2, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ee      	bne.n	8004e54 <LCD_Flood+0xbc>
			LCD_Write8(lo);
#endif
		}
	}

	LCD_CS_IDLE();
 8004e76:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <LCD_Flood+0xec>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	619a      	str	r2, [r3, #24]
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40020400 	.word	0x40020400
 8004e88:	40020000 	.word	0x40020000

08004e8c <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <LCD_FillScreen+0x7c>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d00d      	beq.n	8004eba <LCD_FillScreen+0x2e>
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d011      	beq.n	8004ec6 <LCD_FillScreen+0x3a>
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d004      	beq.n	8004eb0 <LCD_FillScreen+0x24>
	default:
		x = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	81bb      	strh	r3, [r7, #12]
		break;
 8004eae:	e010      	b.n	8004ed2 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8004eb0:	23ef      	movs	r3, #239	; 0xef
 8004eb2:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	81bb      	strh	r3, [r7, #12]
		break;
 8004eb8:	e00b      	b.n	8004ed2 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 8004eba:	23ef      	movs	r3, #239	; 0xef
 8004ebc:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8004ebe:	f240 133f 	movw	r3, #319	; 0x13f
 8004ec2:	81bb      	strh	r3, [r7, #12]
		break;
 8004ec4:	e005      	b.n	8004ed2 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8004eca:	f240 133f 	movw	r3, #319	; 0x13f
 8004ece:	81bb      	strh	r3, [r7, #12]
		break;
 8004ed0:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <LCD_FillScreen+0x80>)
 8004ed4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ed8:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	4619      	mov	r1, r3
 8004ede:	204e      	movs	r0, #78	; 0x4e
 8004ee0:	f7ff fe0a 	bl	8004af8 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 8004ee4:	89bb      	ldrh	r3, [r7, #12]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	204f      	movs	r0, #79	; 0x4f
 8004eea:	f7ff fe05 	bl	8004af8 <LCD_Write16Register8>
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
#endif
	LCD_CS_IDLE();
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <LCD_FillScreen+0x80>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff4c 	bl	8004d98 <LCD_Flood>
}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	2000032d 	.word	0x2000032d
 8004f0c:	40020400 	.word	0x40020400

08004f10 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <LCD_Reset+0x88>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <LCD_Reset+0x8c>)
 8004f1e:	2210      	movs	r2, #16
 8004f20:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <LCD_Reset+0x8c>)
 8004f24:	2202      	movs	r2, #2
 8004f26:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <LCD_Reset+0x8c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <LCD_Reset+0x90>)
 8004f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f34:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8004f36:	2002      	movs	r0, #2
 8004f38:	f7fd fabc 	bl	80024b4 <HAL_Delay>
	LCD_RST_IDLE();
 8004f3c:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <LCD_Reset+0x90>)
 8004f3e:	2202      	movs	r2, #2
 8004f40:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8004f42:	2078      	movs	r0, #120	; 0x78
 8004f44:	f7fd fab6 	bl	80024b4 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8004f48:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <LCD_Reset+0x88>)
 8004f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f4e:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <LCD_Reset+0x8c>)
 8004f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f56:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f7ff fd75 	bl	8004a48 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 8004f5e:	2300      	movs	r3, #0
 8004f60:	71fb      	strb	r3, [r7, #7]
 8004f62:	e00f      	b.n	8004f84 <LCD_Reset+0x74>
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <LCD_Reset+0x8c>)
 8004f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f6a:	619a      	str	r2, [r3, #24]
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	f7ff fcc1 	bl	80048f4 <delay>
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <LCD_Reset+0x8c>)
 8004f74:	2202      	movs	r2, #2
 8004f76:	619a      	str	r2, [r3, #24]
 8004f78:	2002      	movs	r0, #2
 8004f7a:	f7ff fcbb 	bl	80048f4 <delay>
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	3301      	adds	r3, #1
 8004f82:	71fb      	strb	r3, [r7, #7]
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d9ec      	bls.n	8004f64 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 8004f8a:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <LCD_Reset+0x88>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	619a      	str	r2, [r3, #24]
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40020400 	.word	0x40020400
 8004f9c:	40020000 	.word	0x40020000
 8004fa0:	40020800 	.word	0x40020800

08004fa4 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	80fb      	strh	r3, [r7, #6]
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80bb      	strh	r3, [r7, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	807b      	strh	r3, [r7, #2]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <LCD_SetAddrWindow+0x11c>)
 8004fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fc8:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8004fca:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <LCD_SetAddrWindow+0x120>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d01c      	beq.n	800500c <LCD_SetAddrWindow+0x68>
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d037      	beq.n	8005046 <LCD_SetAddrWindow+0xa2>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d004      	beq.n	8004fe4 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	617b      	str	r3, [r7, #20]
		y = y1;
 8004fde:	88bb      	ldrh	r3, [r7, #4]
 8004fe0:	613b      	str	r3, [r7, #16]
		break;
 8004fe2:	e046      	b.n	8005072 <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8004fe4:	88bb      	ldrh	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 8004fec:	883b      	ldrh	r3, [r7, #0]
 8004fee:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004ff2:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005000:	807b      	strh	r3, [r7, #2]
		x = x2;
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	617b      	str	r3, [r7, #20]
		y = y1;
 8005006:	88bb      	ldrh	r3, [r7, #4]
 8005008:	613b      	str	r3, [r7, #16]
		break;
 800500a:	e032      	b.n	8005072 <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 8005010:	887b      	ldrh	r3, [r7, #2]
 8005012:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005016:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005020:	807b      	strh	r3, [r7, #2]
		t = y1;
 8005022:	88bb      	ldrh	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 8005026:	883b      	ldrh	r3, [r7, #0]
 8005028:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800502c:	3301      	adds	r3, #1
 800502e:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005038:	3301      	adds	r3, #1
 800503a:	803b      	strh	r3, [r7, #0]
		x = x2;
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	617b      	str	r3, [r7, #20]
		y = y2;
 8005040:	883b      	ldrh	r3, [r7, #0]
 8005042:	613b      	str	r3, [r7, #16]
		break;
 8005044:	e015      	b.n	8005072 <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005054:	3301      	adds	r3, #1
 8005056:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 8005058:	883b      	ldrh	r3, [r7, #0]
 800505a:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005064:	3301      	adds	r3, #1
 8005066:	803b      	strh	r3, [r7, #0]
		x = x1;
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	617b      	str	r3, [r7, #20]
		y = y2;
 800506c:	883b      	ldrh	r3, [r7, #0]
 800506e:	613b      	str	r3, [r7, #16]
		break;
 8005070:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	4619      	mov	r1, r3
 8005076:	2050      	movs	r0, #80	; 0x50
 8005078:	f7ff fd64 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 800507c:	887b      	ldrh	r3, [r7, #2]
 800507e:	4619      	mov	r1, r3
 8005080:	2051      	movs	r0, #81	; 0x51
 8005082:	f7ff fd5f 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8005086:	88bb      	ldrh	r3, [r7, #4]
 8005088:	4619      	mov	r1, r3
 800508a:	2052      	movs	r0, #82	; 0x52
 800508c:	f7ff fd5a 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8005090:	883b      	ldrh	r3, [r7, #0]
 8005092:	4619      	mov	r1, r3
 8005094:	2053      	movs	r0, #83	; 0x53
 8005096:	f7ff fd55 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	b29b      	uxth	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	2020      	movs	r0, #32
 80050a2:	f7ff fd4f 	bl	8004b44 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	2021      	movs	r0, #33	; 0x21
 80050ae:	f7ff fd49 	bl	8004b44 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <LCD_SetAddrWindow+0x11c>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	619a      	str	r2, [r3, #24]
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	40020400 	.word	0x40020400
 80050c4:	2000032d 	.word	0x2000032d

080050c8 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b28      	ldr	r3, [pc, #160]	; (800517c <LCD_SetRotation+0xb4>)
 80050dc:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80050de:	4b27      	ldr	r3, [pc, #156]	; (800517c <LCD_SetRotation+0xb4>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d009      	beq.n	80050fa <LCD_SetRotation+0x32>
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d007      	beq.n	80050fa <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 80050ea:	4b25      	ldr	r3, [pc, #148]	; (8005180 <LCD_SetRotation+0xb8>)
 80050ec:	22f0      	movs	r2, #240	; 0xf0
 80050ee:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80050f0:	4b24      	ldr	r3, [pc, #144]	; (8005184 <LCD_SetRotation+0xbc>)
 80050f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80050f6:	801a      	strh	r2, [r3, #0]
		break;
 80050f8:	e007      	b.n	800510a <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <LCD_SetRotation+0xb8>)
 80050fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005100:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <LCD_SetRotation+0xbc>)
 8005104:	22f0      	movs	r2, #240	; 0xf0
 8005106:	801a      	strh	r2, [r3, #0]
		break;
 8005108:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <LCD_SetRotation+0xc0>)
 800510c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005110:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <LCD_SetRotation+0xb4>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d00b      	beq.n	8005132 <LCD_SetRotation+0x6a>
 800511a:	2b03      	cmp	r3, #3
 800511c:	d00d      	beq.n	800513a <LCD_SetRotation+0x72>
 800511e:	2b01      	cmp	r3, #1
 8005120:	d003      	beq.n	800512a <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 8005122:	f241 0330 	movw	r3, #4144	; 0x1030
 8005126:	81fb      	strh	r3, [r7, #14]
 8005128:	e00b      	b.n	8005142 <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 800512a:	f241 0328 	movw	r3, #4136	; 0x1028
 800512e:	81fb      	strh	r3, [r7, #14]
 8005130:	e007      	b.n	8005142 <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 8005132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005136:	81fb      	strh	r3, [r7, #14]
 8005138:	e003      	b.n	8005142 <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 800513a:	f241 0318 	movw	r3, #4120	; 0x1018
 800513e:	81fb      	strh	r3, [r7, #14]
 8005140:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 8005142:	89fb      	ldrh	r3, [r7, #14]
 8005144:	4619      	mov	r1, r3
 8005146:	2003      	movs	r0, #3
 8005148:	f7ff fcfc 	bl	8004b44 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <LCD_SetRotation+0xb8>)
 800514e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <LCD_SetRotation+0xbc>)
 800515a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	2100      	movs	r1, #0
 8005166:	2000      	movs	r0, #0
 8005168:	f7ff ff1c 	bl	8004fa4 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <LCD_SetRotation+0xc0>)
 800516e:	2201      	movs	r2, #1
 8005170:	619a      	str	r2, [r3, #24]
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	2000032d 	.word	0x2000032d
 8005180:	20000320 	.word	0x20000320
 8005184:	20000322 	.word	0x20000322
 8005188:	40020400 	.word	0x40020400

0800518c <LCD_DrawLine>:
 * \param y1	The y-coordinate of the second point.
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4623      	mov	r3, r4
 800519c:	80fb      	strh	r3, [r7, #6]
 800519e:	4603      	mov	r3, r0
 80051a0:	80bb      	strh	r3, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	807b      	strh	r3, [r7, #2]
 80051a6:	4613      	mov	r3, r2
 80051a8:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80051aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80051ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80051b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80051bc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80051c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c4:	1acb      	subs	r3, r1, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bfb8      	it	lt
 80051ca:	425b      	neglt	r3, r3
 80051cc:	429a      	cmp	r2, r3
 80051ce:	bfcc      	ite	gt
 80051d0:	2301      	movgt	r3, #1
 80051d2:	2300      	movle	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	837b      	strh	r3, [r7, #26]
	if (steep) {
 80051d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <LCD_DrawLine+0x6c>
		swap(x0, y0);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	833b      	strh	r3, [r7, #24]
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	80fb      	strh	r3, [r7, #6]
 80051e8:	8b3b      	ldrh	r3, [r7, #24]
 80051ea:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	82fb      	strh	r3, [r7, #22]
 80051f0:	883b      	ldrh	r3, [r7, #0]
 80051f2:	807b      	strh	r3, [r7, #2]
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1) {
 80051f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005200:	429a      	cmp	r2, r3
 8005202:	dd0b      	ble.n	800521c <LCD_DrawLine+0x90>
		swap(x0, x1);
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	82bb      	strh	r3, [r7, #20]
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	80fb      	strh	r3, [r7, #6]
 800520c:	8abb      	ldrh	r3, [r7, #20]
 800520e:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 8005210:	88bb      	ldrh	r3, [r7, #4]
 8005212:	827b      	strh	r3, [r7, #18]
 8005214:	883b      	ldrh	r3, [r7, #0]
 8005216:	80bb      	strh	r3, [r7, #4]
 8005218:	8a7b      	ldrh	r3, [r7, #18]
 800521a:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 800521c:	887a      	ldrh	r2, [r7, #2]
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	b29b      	uxth	r3, r3
 8005224:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8005226:	f9b7 2000 	ldrsh.w	r2, [r7]
 800522a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfb8      	it	lt
 8005234:	425b      	neglt	r3, r3
 8005236:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8005238:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800523c:	0fda      	lsrs	r2, r3, #31
 800523e:	4413      	add	r3, r2
 8005240:	105b      	asrs	r3, r3, #1
 8005242:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1) {
 8005244:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005248:	f9b7 3000 	ldrsh.w	r3, [r7]
 800524c:	429a      	cmp	r2, r3
 800524e:	da02      	bge.n	8005256 <LCD_DrawLine+0xca>
		ystep = 1;
 8005250:	2301      	movs	r3, #1
 8005252:	83bb      	strh	r3, [r7, #28]
 8005254:	e031      	b.n	80052ba <LCD_DrawLine+0x12e>
	} else {
		ystep = -1;
 8005256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800525a:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++) {
 800525c:	e02d      	b.n	80052ba <LCD_DrawLine+0x12e>
		if (steep) {
 800525e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <LCD_DrawLine+0xec>
			LCD_DrawPixel(y0, x0, color);
 8005266:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005268:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800526c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fd25 	bl	8004cc0 <LCD_DrawPixel>
 8005276:	e007      	b.n	8005288 <LCD_DrawLine+0xfc>
		} else {
			LCD_DrawPixel(x0, y0, color);
 8005278:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800527a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800527e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fd1c 	bl	8004cc0 <LCD_DrawPixel>
		}
		err -= dy;
 8005288:	8bfa      	ldrh	r2, [r7, #30]
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	b29b      	uxth	r3, r3
 8005290:	83fb      	strh	r3, [r7, #30]
		if (err < 0) {
 8005292:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da09      	bge.n	80052ae <LCD_DrawLine+0x122>
			y0 += ystep;
 800529a:	88ba      	ldrh	r2, [r7, #4]
 800529c:	8bbb      	ldrh	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	80bb      	strh	r3, [r7, #4]
			err += dx;
 80052a4:	8bfa      	ldrh	r2, [r7, #30]
 80052a6:	8a3b      	ldrh	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++) {
 80052ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	80fb      	strh	r3, [r7, #6]
 80052ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	ddcb      	ble.n	800525e <LCD_DrawLine+0xd2>
		}
	}
}
 80052c6:	bf00      	nop
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}
	...

080052d0 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 80052da:	2201      	movs	r2, #1
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	4293      	cmp	r3, r2
 80052e0:	d305      	bcc.n	80052ee <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <LCD_SetTextSize+0x30>)
 80052ea:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 80052ec:	e002      	b.n	80052f4 <LCD_SetTextSize+0x24>
		m_font = s;
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <LCD_SetTextSize+0x30>)
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	7013      	strb	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	2000032c 	.word	0x2000032c

08005304 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	460a      	mov	r2, r1
 800530e:	80fb      	strh	r3, [r7, #6]
 8005310:	4613      	mov	r3, r2
 8005312:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8005314:	4a05      	ldr	r2, [pc, #20]	; (800532c <LCD_SetTextColor+0x28>)
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 800531a:	4a05      	ldr	r2, [pc, #20]	; (8005330 <LCD_SetTextColor+0x2c>)
 800531c:	88bb      	ldrh	r3, [r7, #4]
 800531e:	8013      	strh	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000328 	.word	0x20000328
 8005330:	2000032a 	.word	0x2000032a

08005334 <LCD_Color565_to_R>:

inline uint32_t LCD_Color565_to_888(uint16_t color) {
    return (((color & 0xF800) << 8) | ((color & 0x7E0) << 5) | ((color & 0x1F) << 3));  // transform to rrrrrrxx ggggggxx bbbbbbxx
}

inline uint8_t LCD_Color565_to_R(uint16_t color) {
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrrxx
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	121b      	asrs	r3, r3, #8
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f023 0307 	bic.w	r3, r3, #7
 8005348:	b2db      	uxtb	r3, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LCD_Color565_to_G>:
inline uint8_t LCD_Color565_to_G(uint16_t color) {
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	4603      	mov	r3, r0
 800535e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	10db      	asrs	r3, r3, #3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	b2db      	uxtb	r3, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LCD_Color565_to_B>:
inline uint8_t LCD_Color565_to_B(uint16_t color) {
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbbxx
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <set_int_enable+0xb0>)
 80053a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01c      	beq.n	80053e2 <set_int_enable+0x4e>
        if (enable)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 80053ae:	2302      	movs	r3, #2
 80053b0:	73fb      	strb	r3, [r7, #15]
 80053b2:	e001      	b.n	80053b8 <set_int_enable+0x24>
        else
            tmp = 0x00;
 80053b4:	2300      	movs	r3, #0
 80053b6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80053b8:	4b22      	ldr	r3, [pc, #136]	; (8005444 <set_int_enable+0xb0>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	7818      	ldrb	r0, [r3, #0]
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <set_int_enable+0xb0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	7c59      	ldrb	r1, [r3, #17]
 80053c4:	f107 030f 	add.w	r3, r7, #15
 80053c8:	2201      	movs	r2, #1
 80053ca:	f002 fa17 	bl	80077fc <mpu_i2c_write>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <set_int_enable+0x46>
            return -1;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	e030      	b.n	800543c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80053da:	7bfa      	ldrb	r2, [r7, #15]
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <set_int_enable+0xb0>)
 80053de:	745a      	strb	r2, [r3, #17]
 80053e0:	e02b      	b.n	800543a <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 80053e2:	4b18      	ldr	r3, [pc, #96]	; (8005444 <set_int_enable+0xb0>)
 80053e4:	7a9b      	ldrb	r3, [r3, #10]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <set_int_enable+0x5c>
            return -1;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	e025      	b.n	800543c <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <set_int_enable+0x6e>
 80053f6:	4b13      	ldr	r3, [pc, #76]	; (8005444 <set_int_enable+0xb0>)
 80053f8:	7c5b      	ldrb	r3, [r3, #17]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <set_int_enable+0x6e>
            return 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	e01c      	b.n	800543c <set_int_enable+0xa8>
        if (enable)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e001      	b.n	8005412 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <set_int_enable+0xb0>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	7818      	ldrb	r0, [r3, #0]
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <set_int_enable+0xb0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	7c59      	ldrb	r1, [r3, #17]
 800541e:	f107 030f 	add.w	r3, r7, #15
 8005422:	2201      	movs	r2, #1
 8005424:	f002 f9ea 	bl	80077fc <mpu_i2c_write>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <set_int_enable+0xa0>
            return -1;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e003      	b.n	800543c <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8005434:	7bfa      	ldrb	r2, [r7, #15]
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <set_int_enable+0xb0>)
 8005438:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	2000000c 	.word	0x2000000c

08005448 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8005454:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <mpu_init+0x180>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	7818      	ldrb	r0, [r3, #0]
 800545a:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <mpu_init+0x180>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	7d59      	ldrb	r1, [r3, #21]
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	2201      	movs	r2, #1
 8005466:	f002 f9c9 	bl	80077fc <mpu_i2c_write>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <mpu_init+0x2e>
        return -1;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	e0a3      	b.n	80055be <mpu_init+0x176>
    delay_ms(100);
 8005476:	2064      	movs	r0, #100	; 0x64
 8005478:	f7fd f81c 	bl	80024b4 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 800547c:	2300      	movs	r3, #0
 800547e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8005480:	4b51      	ldr	r3, [pc, #324]	; (80055c8 <mpu_init+0x180>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	7818      	ldrb	r0, [r3, #0]
 8005486:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <mpu_init+0x180>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	7d59      	ldrb	r1, [r3, #21]
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	2201      	movs	r2, #1
 8005492:	f002 f9b3 	bl	80077fc <mpu_i2c_write>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <mpu_init+0x5a>
        return -1;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	e08d      	b.n	80055be <mpu_init+0x176>

   st.chip_cfg.accel_half = 0;
 80054a2:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <mpu_init+0x180>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80054a8:	2348      	movs	r3, #72	; 0x48
 80054aa:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80054ac:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <mpu_init+0x180>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	7818      	ldrb	r0, [r3, #0]
 80054b2:	4b45      	ldr	r3, [pc, #276]	; (80055c8 <mpu_init+0x180>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	7a19      	ldrb	r1, [r3, #8]
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	2201      	movs	r2, #1
 80054be:	f002 f99d 	bl	80077fc <mpu_i2c_write>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <mpu_init+0x86>
        return -1;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
 80054cc:	e077      	b.n	80055be <mpu_init+0x176>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80054ce:	4b3e      	ldr	r3, [pc, #248]	; (80055c8 <mpu_init+0x180>)
 80054d0:	22ff      	movs	r2, #255	; 0xff
 80054d2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80054d4:	4b3c      	ldr	r3, [pc, #240]	; (80055c8 <mpu_init+0x180>)
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <mpu_init+0x180>)
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80054e0:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <mpu_init+0x180>)
 80054e2:	22ff      	movs	r2, #255	; 0xff
 80054e4:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80054e6:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <mpu_init+0x180>)
 80054e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054ec:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80054ee:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <mpu_init+0x180>)
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80054f4:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <mpu_init+0x180>)
 80054f6:	22ff      	movs	r2, #255	; 0xff
 80054f8:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80054fa:	4b33      	ldr	r3, [pc, #204]	; (80055c8 <mpu_init+0x180>)
 80054fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <mpu_init+0x180>)
 8005504:	2201      	movs	r2, #1
 8005506:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8005508:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <mpu_init+0x180>)
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <mpu_init+0x180>)
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <mpu_init+0x180>)
 800551a:	2200      	movs	r2, #0
 800551c:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800551e:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <mpu_init+0x180>)
 8005520:	2200      	movs	r2, #0
 8005522:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8005524:	220c      	movs	r2, #12
 8005526:	2100      	movs	r1, #0
 8005528:	4828      	ldr	r0, [pc, #160]	; (80055cc <mpu_init+0x184>)
 800552a:	f004 fd9f 	bl	800a06c <memset>
    st.chip_cfg.dmp_on = 0;
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <mpu_init+0x180>)
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <mpu_init+0x180>)
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800553e:	4b22      	ldr	r3, [pc, #136]	; (80055c8 <mpu_init+0x180>)
 8005540:	2200      	movs	r2, #0
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8005544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005548:	f000 f9e4 	bl	8005914 <mpu_set_gyro_fsr>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <mpu_init+0x110>
        return -1;
 8005552:	f04f 33ff 	mov.w	r3, #4294967295
 8005556:	e032      	b.n	80055be <mpu_init+0x176>
    if (mpu_set_accel_fsr(2))
 8005558:	2002      	movs	r0, #2
 800555a:	f000 fa67 	bl	8005a2c <mpu_set_accel_fsr>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <mpu_init+0x122>
        return -1;
 8005564:	f04f 33ff 	mov.w	r3, #4294967295
 8005568:	e029      	b.n	80055be <mpu_init+0x176>
    if (mpu_set_lpf(42))
 800556a:	202a      	movs	r0, #42	; 0x2a
 800556c:	f000 fac6 	bl	8005afc <mpu_set_lpf>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <mpu_init+0x134>
        return -1;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e020      	b.n	80055be <mpu_init+0x176>
    if (mpu_set_sample_rate(50))
 800557c:	2032      	movs	r0, #50	; 0x32
 800557e:	f000 fb0b 	bl	8005b98 <mpu_set_sample_rate>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <mpu_init+0x146>
        return -1;
 8005588:	f04f 33ff 	mov.w	r3, #4294967295
 800558c:	e017      	b.n	80055be <mpu_init+0x176>
    if (mpu_configure_fifo(0))
 800558e:	2000      	movs	r0, #0
 8005590:	f000 fc26 	bl	8005de0 <mpu_configure_fifo>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <mpu_init+0x158>
        return -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e00e      	b.n	80055be <mpu_init+0x176>
    if (int_param)
        reg_int_cb(int_param);
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 80055a0:	f001 f878 	bl	8006694 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 80055a4:	200a      	movs	r0, #10
 80055a6:	f000 fb65 	bl	8005c74 <mpu_set_compass_sample_rate>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <mpu_init+0x16e>
        return -1;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295
 80055b4:	e003      	b.n	80055be <mpu_init+0x176>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f000 fc64 	bl	8005e84 <mpu_set_sensors>
    return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	2000000c 	.word	0x2000000c
 80055cc:	20000022 	.word	0x20000022

080055d0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b28      	cmp	r3, #40	; 0x28
 80055de:	d902      	bls.n	80055e6 <mpu_lp_accel_mode+0x16>
        return -1;
 80055e0:	f04f 33ff 	mov.w	r3, #4294967295
 80055e4:	e08c      	b.n	8005700 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11c      	bne.n	8005626 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 80055ec:	2000      	movs	r0, #0
 80055ee:	f000 fe97 	bl	8006320 <mpu_set_int_latched>
        tmp[0] = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80055f6:	2307      	movs	r3, #7
 80055f8:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80055fa:	4b43      	ldr	r3, [pc, #268]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	7818      	ldrb	r0, [r3, #0]
 8005600:	4b41      	ldr	r3, [pc, #260]	; (8005708 <mpu_lp_accel_mode+0x138>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	7d59      	ldrb	r1, [r3, #21]
 8005606:	f107 030c 	add.w	r3, r7, #12
 800560a:	2202      	movs	r2, #2
 800560c:	f002 f8f6 	bl	80077fc <mpu_i2c_write>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <mpu_lp_accel_mode+0x4c>
            return -1;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	e071      	b.n	8005700 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <mpu_lp_accel_mode+0x138>)
 800561e:	2200      	movs	r2, #0
 8005620:	751a      	strb	r2, [r3, #20]
        return 0;
 8005622:	2300      	movs	r3, #0
 8005624:	e06c      	b.n	8005700 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8005626:	2001      	movs	r0, #1
 8005628:	f000 fe7a 	bl	8006320 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d102      	bne.n	8005638 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 8005632:	2302      	movs	r3, #2
 8005634:	733b      	strb	r3, [r7, #12]
 8005636:	e032      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d102      	bne.n	8005644 <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 800563e:	2303      	movs	r3, #3
 8005640:	733b      	strb	r3, [r7, #12]
 8005642:	e02c      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b05      	cmp	r3, #5
 8005648:	d802      	bhi.n	8005650 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 800564a:	2304      	movs	r3, #4
 800564c:	733b      	strb	r3, [r7, #12]
 800564e:	e026      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b0a      	cmp	r3, #10
 8005654:	d802      	bhi.n	800565c <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 8005656:	2305      	movs	r3, #5
 8005658:	733b      	strb	r3, [r7, #12]
 800565a:	e020      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	2b14      	cmp	r3, #20
 8005660:	d802      	bhi.n	8005668 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 8005662:	2306      	movs	r3, #6
 8005664:	733b      	strb	r3, [r7, #12]
 8005666:	e01a      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	2b28      	cmp	r3, #40	; 0x28
 800566c:	d802      	bhi.n	8005674 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 800566e:	2307      	movs	r3, #7
 8005670:	733b      	strb	r3, [r7, #12]
 8005672:	e014      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	2b50      	cmp	r3, #80	; 0x50
 8005678:	d802      	bhi.n	8005680 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 800567a:	2308      	movs	r3, #8
 800567c:	733b      	strb	r3, [r7, #12]
 800567e:	e00e      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	2ba0      	cmp	r3, #160	; 0xa0
 8005684:	d802      	bhi.n	800568c <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 8005686:	2309      	movs	r3, #9
 8005688:	733b      	strb	r3, [r7, #12]
 800568a:	e008      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005692:	d802      	bhi.n	800569a <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 8005694:	230a      	movs	r3, #10
 8005696:	733b      	strb	r3, [r7, #12]
 8005698:	e001      	b.n	800569e <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 800569a:	230b      	movs	r3, #11
 800569c:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	7818      	ldrb	r0, [r3, #0]
 80056a4:	4b18      	ldr	r3, [pc, #96]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	7a59      	ldrb	r1, [r3, #9]
 80056aa:	f107 030c 	add.w	r3, r7, #12
 80056ae:	2201      	movs	r2, #1
 80056b0:	f002 f8a4 	bl	80077fc <mpu_i2c_write>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <mpu_lp_accel_mode+0xf0>
        return -1;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e01f      	b.n	8005700 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 80056c0:	2320      	movs	r3, #32
 80056c2:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	7818      	ldrb	r0, [r3, #0]
 80056ca:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	7d59      	ldrb	r1, [r3, #21]
 80056d0:	f107 030c 	add.w	r3, r7, #12
 80056d4:	2201      	movs	r2, #1
 80056d6:	f002 f891 	bl	80077fc <mpu_i2c_write>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <mpu_lp_accel_mode+0x116>
        return -1;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	e00c      	b.n	8005700 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056e8:	2208      	movs	r2, #8
 80056ea:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <mpu_lp_accel_mode+0x138>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80056f8:	2000      	movs	r0, #0
 80056fa:	f000 fb71 	bl	8005de0 <mpu_configure_fifo>

    return 0;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000000c 	.word	0x2000000c

0800570c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005712:	4b7e      	ldr	r3, [pc, #504]	; (800590c <mpu_reset_fifo+0x200>)
 8005714:	7a9b      	ldrb	r3, [r3, #10]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <mpu_reset_fifo+0x14>
        return -1;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	e0f1      	b.n	8005904 <mpu_reset_fifo+0x1f8>

    data = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005724:	4b79      	ldr	r3, [pc, #484]	; (800590c <mpu_reset_fifo+0x200>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	7818      	ldrb	r0, [r3, #0]
 800572a:	4b78      	ldr	r3, [pc, #480]	; (800590c <mpu_reset_fifo+0x200>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	7c59      	ldrb	r1, [r3, #17]
 8005730:	1dfb      	adds	r3, r7, #7
 8005732:	2201      	movs	r2, #1
 8005734:	f002 f862 	bl	80077fc <mpu_i2c_write>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <mpu_reset_fifo+0x38>
        return -1;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	e0df      	b.n	8005904 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8005744:	4b71      	ldr	r3, [pc, #452]	; (800590c <mpu_reset_fifo+0x200>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	7818      	ldrb	r0, [r3, #0]
 800574a:	4b70      	ldr	r3, [pc, #448]	; (800590c <mpu_reset_fifo+0x200>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	7959      	ldrb	r1, [r3, #5]
 8005750:	1dfb      	adds	r3, r7, #7
 8005752:	2201      	movs	r2, #1
 8005754:	f002 f852 	bl	80077fc <mpu_i2c_write>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <mpu_reset_fifo+0x58>
        return -1;
 800575e:	f04f 33ff 	mov.w	r3, #4294967295
 8005762:	e0cf      	b.n	8005904 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005764:	4b69      	ldr	r3, [pc, #420]	; (800590c <mpu_reset_fifo+0x200>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	7818      	ldrb	r0, [r3, #0]
 800576a:	4b68      	ldr	r3, [pc, #416]	; (800590c <mpu_reset_fifo+0x200>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	7919      	ldrb	r1, [r3, #4]
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	2201      	movs	r2, #1
 8005774:	f002 f842 	bl	80077fc <mpu_i2c_write>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <mpu_reset_fifo+0x78>
        return -1;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	e0bf      	b.n	8005904 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <mpu_reset_fifo+0x200>)
 8005786:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d05c      	beq.n	8005848 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800578e:	230c      	movs	r3, #12
 8005790:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005792:	4b5e      	ldr	r3, [pc, #376]	; (800590c <mpu_reset_fifo+0x200>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	7818      	ldrb	r0, [r3, #0]
 8005798:	4b5c      	ldr	r3, [pc, #368]	; (800590c <mpu_reset_fifo+0x200>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	7919      	ldrb	r1, [r3, #4]
 800579e:	1dfb      	adds	r3, r7, #7
 80057a0:	2201      	movs	r2, #1
 80057a2:	f002 f82b 	bl	80077fc <mpu_i2c_write>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <mpu_reset_fifo+0xa6>
            return -1;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	e0a8      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80057b2:	2032      	movs	r0, #50	; 0x32
 80057b4:	f7fc fe7e 	bl	80024b4 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80057b8:	23c0      	movs	r3, #192	; 0xc0
 80057ba:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80057bc:	4b53      	ldr	r3, [pc, #332]	; (800590c <mpu_reset_fifo+0x200>)
 80057be:	7a9b      	ldrb	r3, [r3, #10]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80057d2:	4b4e      	ldr	r3, [pc, #312]	; (800590c <mpu_reset_fifo+0x200>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	7818      	ldrb	r0, [r3, #0]
 80057d8:	4b4c      	ldr	r3, [pc, #304]	; (800590c <mpu_reset_fifo+0x200>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	7919      	ldrb	r1, [r3, #4]
 80057de:	1dfb      	adds	r3, r7, #7
 80057e0:	2201      	movs	r2, #1
 80057e2:	f002 f80b 	bl	80077fc <mpu_i2c_write>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <mpu_reset_fifo+0xe6>
            return -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	e088      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 80057f2:	4b46      	ldr	r3, [pc, #280]	; (800590c <mpu_reset_fifo+0x200>)
 80057f4:	7c5b      	ldrb	r3, [r3, #17]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 80057fa:	2302      	movs	r3, #2
 80057fc:	71fb      	strb	r3, [r7, #7]
 80057fe:	e001      	b.n	8005804 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005804:	4b41      	ldr	r3, [pc, #260]	; (800590c <mpu_reset_fifo+0x200>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	7818      	ldrb	r0, [r3, #0]
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <mpu_reset_fifo+0x200>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	7c59      	ldrb	r1, [r3, #17]
 8005810:	1dfb      	adds	r3, r7, #7
 8005812:	2201      	movs	r2, #1
 8005814:	f001 fff2 	bl	80077fc <mpu_i2c_write>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <mpu_reset_fifo+0x118>
            return -1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e06f      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        data = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8005828:	4b38      	ldr	r3, [pc, #224]	; (800590c <mpu_reset_fifo+0x200>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	7818      	ldrb	r0, [r3, #0]
 800582e:	4b37      	ldr	r3, [pc, #220]	; (800590c <mpu_reset_fifo+0x200>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	7959      	ldrb	r1, [r3, #5]
 8005834:	1dfb      	adds	r3, r7, #7
 8005836:	2201      	movs	r2, #1
 8005838:	f001 ffe0 	bl	80077fc <mpu_i2c_write>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05f      	beq.n	8005902 <mpu_reset_fifo+0x1f6>
            return -1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	e05d      	b.n	8005904 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8005848:	2304      	movs	r3, #4
 800584a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <mpu_reset_fifo+0x200>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	7818      	ldrb	r0, [r3, #0]
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <mpu_reset_fifo+0x200>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	7919      	ldrb	r1, [r3, #4]
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	2201      	movs	r2, #1
 800585c:	f001 ffce 	bl	80077fc <mpu_i2c_write>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <mpu_reset_fifo+0x160>
            return -1;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	e04b      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800586c:	4b27      	ldr	r3, [pc, #156]	; (800590c <mpu_reset_fifo+0x200>)
 800586e:	7c9b      	ldrb	r3, [r3, #18]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <mpu_reset_fifo+0x174>
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <mpu_reset_fifo+0x200>)
 8005876:	7a9b      	ldrb	r3, [r3, #10]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	71fb      	strb	r3, [r7, #7]
 8005884:	e001      	b.n	800588a <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8005886:	2360      	movs	r3, #96	; 0x60
 8005888:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <mpu_reset_fifo+0x200>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	7818      	ldrb	r0, [r3, #0]
 8005890:	4b1e      	ldr	r3, [pc, #120]	; (800590c <mpu_reset_fifo+0x200>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	7919      	ldrb	r1, [r3, #4]
 8005896:	1dfb      	adds	r3, r7, #7
 8005898:	2201      	movs	r2, #1
 800589a:	f001 ffaf 	bl	80077fc <mpu_i2c_write>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <mpu_reset_fifo+0x19e>
            return -1;
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	e02c      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 80058aa:	2032      	movs	r0, #50	; 0x32
 80058ac:	f7fc fe02 	bl	80024b4 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <mpu_reset_fifo+0x200>)
 80058b2:	7c5b      	ldrb	r3, [r3, #17]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 80058b8:	2301      	movs	r3, #1
 80058ba:	71fb      	strb	r3, [r7, #7]
 80058bc:	e001      	b.n	80058c2 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <mpu_reset_fifo+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	7818      	ldrb	r0, [r3, #0]
 80058c8:	4b10      	ldr	r3, [pc, #64]	; (800590c <mpu_reset_fifo+0x200>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	7c59      	ldrb	r1, [r3, #17]
 80058ce:	1dfb      	adds	r3, r7, #7
 80058d0:	2201      	movs	r2, #1
 80058d2:	f001 ff93 	bl	80077fc <mpu_i2c_write>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <mpu_reset_fifo+0x1d6>
            return -1;
 80058dc:	f04f 33ff 	mov.w	r3, #4294967295
 80058e0:	e010      	b.n	8005904 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80058e2:	4b0a      	ldr	r3, [pc, #40]	; (800590c <mpu_reset_fifo+0x200>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	7818      	ldrb	r0, [r3, #0]
 80058e8:	4b08      	ldr	r3, [pc, #32]	; (800590c <mpu_reset_fifo+0x200>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	7959      	ldrb	r1, [r3, #5]
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <mpu_reset_fifo+0x204>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	f001 ff83 	bl	80077fc <mpu_i2c_write>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <mpu_reset_fifo+0x1f6>
            return -1;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	e000      	b.n	8005904 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	2000000c 	.word	0x2000000c
 8005910:	2000001c 	.word	0x2000001c

08005914 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <mpu_set_gyro_fsr+0xa0>)
 8005920:	7a9b      	ldrb	r3, [r3, #10]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <mpu_set_gyro_fsr+0x18>
        return -1;
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	e03f      	b.n	80059ac <mpu_set_gyro_fsr+0x98>

    switch (fsr) {
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005932:	d00f      	beq.n	8005954 <mpu_set_gyro_fsr+0x40>
 8005934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005938:	dc02      	bgt.n	8005940 <mpu_set_gyro_fsr+0x2c>
 800593a:	2bfa      	cmp	r3, #250	; 0xfa
 800593c:	d007      	beq.n	800594e <mpu_set_gyro_fsr+0x3a>
 800593e:	e012      	b.n	8005966 <mpu_set_gyro_fsr+0x52>
 8005940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005944:	d009      	beq.n	800595a <mpu_set_gyro_fsr+0x46>
 8005946:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800594a:	d009      	beq.n	8005960 <mpu_set_gyro_fsr+0x4c>
 800594c:	e00b      	b.n	8005966 <mpu_set_gyro_fsr+0x52>
    case 250:
        data = INV_FSR_250DPS << 3;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
        break;
 8005952:	e00b      	b.n	800596c <mpu_set_gyro_fsr+0x58>
    case 500:
        data = INV_FSR_500DPS << 3;
 8005954:	2308      	movs	r3, #8
 8005956:	73fb      	strb	r3, [r7, #15]
        break;
 8005958:	e008      	b.n	800596c <mpu_set_gyro_fsr+0x58>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800595a:	2310      	movs	r3, #16
 800595c:	73fb      	strb	r3, [r7, #15]
        break;
 800595e:	e005      	b.n	800596c <mpu_set_gyro_fsr+0x58>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8005960:	2318      	movs	r3, #24
 8005962:	73fb      	strb	r3, [r7, #15]
        break;
 8005964:	e002      	b.n	800596c <mpu_set_gyro_fsr+0x58>
    default:
        return -1;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	e01f      	b.n	80059ac <mpu_set_gyro_fsr+0x98>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800596c:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <mpu_set_gyro_fsr+0xa0>)
 800596e:	7a1a      	ldrb	r2, [r3, #8]
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	b2db      	uxtb	r3, r3
 8005976:	429a      	cmp	r2, r3
 8005978:	d101      	bne.n	800597e <mpu_set_gyro_fsr+0x6a>
        return 0;
 800597a:	2300      	movs	r3, #0
 800597c:	e016      	b.n	80059ac <mpu_set_gyro_fsr+0x98>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <mpu_set_gyro_fsr+0xa0>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	7818      	ldrb	r0, [r3, #0]
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <mpu_set_gyro_fsr+0xa0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	7999      	ldrb	r1, [r3, #6]
 800598a:	f107 030f 	add.w	r3, r7, #15
 800598e:	2201      	movs	r2, #1
 8005990:	f001 ff34 	bl	80077fc <mpu_i2c_write>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <mpu_set_gyro_fsr+0x8c>
        return -1;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295
 800599e:	e005      	b.n	80059ac <mpu_set_gyro_fsr+0x98>
    st.chip_cfg.gyro_fsr = data >> 3;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <mpu_set_gyro_fsr+0xa0>)
 80059a8:	721a      	strb	r2, [r3, #8]
    return 0;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000000c 	.word	0x2000000c

080059b8 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <mpu_get_accel_fsr+0x70>)
 80059c2:	7a5b      	ldrb	r3, [r3, #9]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d81b      	bhi.n	8005a00 <mpu_get_accel_fsr+0x48>
 80059c8:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <mpu_get_accel_fsr+0x18>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	080059e9 	.word	0x080059e9
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f9 	.word	0x080059f9
    case INV_FSR_2G:
        fsr[0] = 2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	701a      	strb	r2, [r3, #0]
        break;
 80059e6:	e00e      	b.n	8005a06 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2204      	movs	r2, #4
 80059ec:	701a      	strb	r2, [r3, #0]
        break;
 80059ee:	e00a      	b.n	8005a06 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2208      	movs	r2, #8
 80059f4:	701a      	strb	r2, [r3, #0]
        break;
 80059f6:	e006      	b.n	8005a06 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2210      	movs	r2, #16
 80059fc:	701a      	strb	r2, [r3, #0]
        break;
 80059fe:	e002      	b.n	8005a06 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295
 8005a04:	e00a      	b.n	8005a1c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <mpu_get_accel_fsr+0x70>)
 8005a08:	7cdb      	ldrb	r3, [r3, #19]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	701a      	strb	r2, [r3, #0]
    return 0;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	2000000c 	.word	0x2000000c

08005a2c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005a36:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <mpu_set_accel_fsr+0xcc>)
 8005a38:	7a9b      	ldrb	r3, [r3, #10]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <mpu_set_accel_fsr+0x18>
        return -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	e054      	b.n	8005aee <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	3b02      	subs	r3, #2
 8005a48:	2b0e      	cmp	r3, #14
 8005a4a:	d82d      	bhi.n	8005aa8 <mpu_set_accel_fsr+0x7c>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <mpu_set_accel_fsr+0x28>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a91 	.word	0x08005a91
 8005a58:	08005aa9 	.word	0x08005aa9
 8005a5c:	08005a97 	.word	0x08005a97
 8005a60:	08005aa9 	.word	0x08005aa9
 8005a64:	08005aa9 	.word	0x08005aa9
 8005a68:	08005aa9 	.word	0x08005aa9
 8005a6c:	08005a9d 	.word	0x08005a9d
 8005a70:	08005aa9 	.word	0x08005aa9
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005aa9 	.word	0x08005aa9
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	08005aa9 	.word	0x08005aa9
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005aa9 	.word	0x08005aa9
 8005a8c:	08005aa3 	.word	0x08005aa3
    case 2:
        data = INV_FSR_2G << 3;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]
        break;
 8005a94:	e00b      	b.n	8005aae <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8005a96:	2308      	movs	r3, #8
 8005a98:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9a:	e008      	b.n	8005aae <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa0:	e005      	b.n	8005aae <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8005aa2:	2318      	movs	r3, #24
 8005aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa6:	e002      	b.n	8005aae <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aac:	e01f      	b.n	8005aee <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <mpu_set_accel_fsr+0xcc>)
 8005ab0:	7a5a      	ldrb	r2, [r3, #9]
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	08db      	lsrs	r3, r3, #3
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d101      	bne.n	8005ac0 <mpu_set_accel_fsr+0x94>
        return 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	e016      	b.n	8005aee <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <mpu_set_accel_fsr+0xcc>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	7818      	ldrb	r0, [r3, #0]
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <mpu_set_accel_fsr+0xcc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	79d9      	ldrb	r1, [r3, #7]
 8005acc:	f107 030f 	add.w	r3, r7, #15
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f001 fe93 	bl	80077fc <mpu_i2c_write>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <mpu_set_accel_fsr+0xb6>
        return -1;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	e005      	b.n	8005aee <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <mpu_set_accel_fsr+0xcc>)
 8005aea:	725a      	strb	r2, [r3, #9]
    return 0;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000000c 	.word	0x2000000c

08005afc <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <mpu_set_lpf+0x98>)
 8005b08:	7a9b      	ldrb	r3, [r3, #10]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <mpu_set_lpf+0x18>
        return -1;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	e03b      	b.n	8005b8c <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	2bbb      	cmp	r3, #187	; 0xbb
 8005b18:	d902      	bls.n	8005b20 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	73fb      	strb	r3, [r7, #15]
 8005b1e:	e019      	b.n	8005b54 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	2b61      	cmp	r3, #97	; 0x61
 8005b24:	d902      	bls.n	8005b2c <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8005b26:	2302      	movs	r3, #2
 8005b28:	73fb      	strb	r3, [r7, #15]
 8005b2a:	e013      	b.n	8005b54 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b29      	cmp	r3, #41	; 0x29
 8005b30:	d902      	bls.n	8005b38 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8005b32:	2303      	movs	r3, #3
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	e00d      	b.n	8005b54 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	2b13      	cmp	r3, #19
 8005b3c:	d902      	bls.n	8005b44 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8005b3e:	2304      	movs	r3, #4
 8005b40:	73fb      	strb	r3, [r7, #15]
 8005b42:	e007      	b.n	8005b54 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d902      	bls.n	8005b50 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8005b4a:	2305      	movs	r3, #5
 8005b4c:	73fb      	strb	r3, [r7, #15]
 8005b4e:	e001      	b.n	8005b54 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8005b50:	2306      	movs	r3, #6
 8005b52:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <mpu_set_lpf+0x98>)
 8005b56:	7ada      	ldrb	r2, [r3, #11]
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d101      	bne.n	8005b62 <mpu_set_lpf+0x66>
        return 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e014      	b.n	8005b8c <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <mpu_set_lpf+0x98>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	7818      	ldrb	r0, [r3, #0]
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <mpu_set_lpf+0x98>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	7899      	ldrb	r1, [r3, #2]
 8005b6e:	f107 030f 	add.w	r3, r7, #15
 8005b72:	2201      	movs	r2, #1
 8005b74:	f001 fe42 	bl	80077fc <mpu_i2c_write>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <mpu_set_lpf+0x88>
        return -1;
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	e003      	b.n	8005b8c <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8005b84:	7bfa      	ldrb	r2, [r7, #15]
 8005b86:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <mpu_set_lpf+0x98>)
 8005b88:	72da      	strb	r2, [r3, #11]
    return 0;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	2000000c 	.word	0x2000000c

08005b98 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005ba2:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005ba4:	7a9b      	ldrb	r3, [r3, #10]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <mpu_set_sample_rate+0x18>
        return -1;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bae:	e05b      	b.n	8005c68 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 8005bb0:	4b2f      	ldr	r3, [pc, #188]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <mpu_set_sample_rate+0x28>
        return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	e053      	b.n	8005c68 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005bc2:	7d1b      	ldrb	r3, [r3, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <mpu_set_sample_rate+0x48>
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	2b28      	cmp	r3, #40	; 0x28
 8005bd2:	d805      	bhi.n	8005be0 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fcfa 	bl	80055d0 <mpu_lp_accel_mode>
                return 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e043      	b.n	8005c68 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7ff fcf5 	bl	80055d0 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d802      	bhi.n	8005bf2 <mpu_set_sample_rate+0x5a>
            rate = 4;
 8005bec:	2304      	movs	r3, #4
 8005bee:	80fb      	strh	r3, [r7, #6]
 8005bf0:	e006      	b.n	8005c00 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bf8:	d902      	bls.n	8005c00 <mpu_set_sample_rate+0x68>
            rate = 1000;
 8005bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bfe:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	7818      	ldrb	r0, [r3, #0]
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	7859      	ldrb	r1, [r3, #1]
 8005c1e:	f107 030f 	add.w	r3, r7, #15
 8005c22:	2201      	movs	r2, #1
 8005c24:	f001 fdea 	bl	80077fc <mpu_i2c_write>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <mpu_set_sample_rate+0x9c>
            return -1;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	e019      	b.n	8005c68 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	3301      	adds	r3, #1
 8005c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005c44:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	bf28      	it	cs
 8005c4e:	2364      	movcs	r3, #100	; 0x64
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f80e 	bl	8005c74 <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <mpu_set_sample_rate+0xd8>)
 8005c5a:	89db      	ldrh	r3, [r3, #14]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff4b 	bl	8005afc <mpu_set_lpf>
        return 0;
 8005c66:	2300      	movs	r3, #0
    }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000000c 	.word	0x2000000c

08005c74 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <mpu_set_compass_sample_rate+0x20>
 8005c84:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005c86:	89db      	ldrh	r3, [r3, #14]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d802      	bhi.n	8005c94 <mpu_set_compass_sample_rate+0x20>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b64      	cmp	r3, #100	; 0x64
 8005c92:	d902      	bls.n	8005c9a <mpu_set_compass_sample_rate+0x26>
        return -1;
 8005c94:	f04f 33ff 	mov.w	r3, #4294967295
 8005c98:	e026      	b.n	8005ce8 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005c9c:	89da      	ldrh	r2, [r3, #14]
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	7818      	ldrb	r0, [r3, #0]
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8005cbc:	f107 030f 	add.w	r3, r7, #15
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f001 fd9b 	bl	80077fc <mpu_i2c_write>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8005ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd0:	e00a      	b.n	8005ce8 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005cd4:	89db      	ldrh	r3, [r3, #14]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <mpu_set_compass_sample_rate+0x7c>)
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    return 0;
 8005ce6:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <mpu_get_gyro_sens+0x5c>)
 8005cfe:	7a1b      	ldrb	r3, [r3, #8]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d81b      	bhi.n	8005d3c <mpu_get_gyro_sens+0x48>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <mpu_get_gyro_sens+0x18>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d25 	.word	0x08005d25
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <mpu_get_gyro_sens+0x60>)
 8005d20:	601a      	str	r2, [r3, #0]
        break;
 8005d22:	e00e      	b.n	8005d42 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a0c      	ldr	r2, [pc, #48]	; (8005d58 <mpu_get_gyro_sens+0x64>)
 8005d28:	601a      	str	r2, [r3, #0]
        break;
 8005d2a:	e00a      	b.n	8005d42 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <mpu_get_gyro_sens+0x68>)
 8005d30:	601a      	str	r2, [r3, #0]
        break;
 8005d32:	e006      	b.n	8005d42 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <mpu_get_gyro_sens+0x6c>)
 8005d38:	601a      	str	r2, [r3, #0]
        break;
 8005d3a:	e002      	b.n	8005d42 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	e000      	b.n	8005d44 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	43030000 	.word	0x43030000
 8005d58:	42830000 	.word	0x42830000
 8005d5c:	42033333 	.word	0x42033333
 8005d60:	41833333 	.word	0x41833333

08005d64 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <mpu_get_accel_sens+0x78>)
 8005d6e:	7a5b      	ldrb	r3, [r3, #9]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d81f      	bhi.n	8005db4 <mpu_get_accel_sens+0x50>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <mpu_get_accel_sens+0x18>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d97 	.word	0x08005d97
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005dab 	.word	0x08005dab
    case INV_FSR_2G:
        sens[0] = 16384;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d92:	801a      	strh	r2, [r3, #0]
        break;
 8005d94:	e011      	b.n	8005dba <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d9c:	801a      	strh	r2, [r3, #0]
        break;
 8005d9e:	e00c      	b.n	8005dba <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005da6:	801a      	strh	r2, [r3, #0]
        break;
 8005da8:	e007      	b.n	8005dba <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db0:	801a      	strh	r2, [r3, #0]
        break;
 8005db2:	e002      	b.n	8005dba <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
 8005db8:	e00a      	b.n	8005dd0 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <mpu_get_accel_sens+0x78>)
 8005dbc:	7cdb      	ldrb	r3, [r3, #19]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	801a      	strh	r2, [r3, #0]
    return 0;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000000c 	.word	0x2000000c

08005de0 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8005df6:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <mpu_configure_fifo+0x24>
        return 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e038      	b.n	8005e76 <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e06:	7a9b      	ldrb	r3, [r3, #10]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <mpu_configure_fifo+0x32>
            return -1;
 8005e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e10:	e031      	b.n	8005e76 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8005e12:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e14:	7c1b      	ldrb	r3, [r3, #16]
 8005e16:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8005e18:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e1a:	7a9a      	ldrb	r2, [r3, #10]
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b17      	ldr	r3, [pc, #92]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e24:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8005e26:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e28:	7c1b      	ldrb	r3, [r3, #16]
 8005e2a:	79fa      	ldrb	r2, [r7, #7]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d003      	beq.n	8005e38 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8005e30:	f04f 33ff 	mov.w	r3, #4294967295
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e001      	b.n	8005e3c <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <mpu_configure_fifo+0x6a>
 8005e42:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e44:	7d1b      	ldrb	r3, [r3, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	f7ff faa2 	bl	8005394 <set_int_enable>
 8005e50:	e002      	b.n	8005e58 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8005e52:	2000      	movs	r0, #0
 8005e54:	f7ff fa9e 	bl	8005394 <set_int_enable>
        if (sensors) {
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8005e5e:	f7ff fc55 	bl	800570c <mpu_reset_fifo>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8005e68:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <mpu_configure_fifo+0xa0>)
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	7413      	strb	r3, [r2, #16]
                return -1;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e72:	e000      	b.n	8005e76 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	2000000c 	.word	0x2000000c

08005e84 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
 8005e9c:	e007      	b.n	8005eae <mpu_set_sensors+0x2a>
    else if (sensors)
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <mpu_set_sensors+0x26>
        data = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]
 8005ea8:	e001      	b.n	8005eae <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8005eae:	4b63      	ldr	r3, [pc, #396]	; (800603c <mpu_set_sensors+0x1b8>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	7818      	ldrb	r0, [r3, #0]
 8005eb4:	4b61      	ldr	r3, [pc, #388]	; (800603c <mpu_set_sensors+0x1b8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	7d59      	ldrb	r1, [r3, #21]
 8005eba:	f107 030f 	add.w	r3, r7, #15
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f001 fc9c 	bl	80077fc <mpu_i2c_write>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <mpu_set_sensors+0x1b8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	729a      	strb	r2, [r3, #10]
        return -1;
 8005ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed4:	e0ae      	b.n	8006034 <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b57      	ldr	r3, [pc, #348]	; (800603c <mpu_set_sensors+0x1b8>)
 8005ee0:	731a      	strb	r2, [r3, #12]

    data = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	f043 0304 	orr.w	r3, r3, #4
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8005efa:	79fb      	ldrb	r3, [r7, #7]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <mpu_set_sensors+0x1b8>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	7818      	ldrb	r0, [r3, #0]
 8005f3c:	4b3f      	ldr	r3, [pc, #252]	; (800603c <mpu_set_sensors+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	7d99      	ldrb	r1, [r3, #22]
 8005f42:	f107 030f 	add.w	r3, r7, #15
 8005f46:	2201      	movs	r2, #1
 8005f48:	f001 fc58 	bl	80077fc <mpu_i2c_write>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8005f52:	4b3a      	ldr	r3, [pc, #232]	; (800603c <mpu_set_sensors+0x1b8>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	729a      	strb	r2, [r3, #10]
        return -1;
 8005f58:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5c:	e06a      	b.n	8006034 <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <mpu_set_sensors+0xec>
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d002      	beq.n	8005f70 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f000 f9d8 	bl	8006320 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <mpu_set_sensors+0x1b8>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	7818      	ldrb	r0, [r3, #0]
 8005f76:	4b31      	ldr	r3, [pc, #196]	; (800603c <mpu_set_sensors+0x1b8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	7919      	ldrb	r1, [r3, #4]
 8005f7c:	f107 030e 	add.w	r3, r7, #14
 8005f80:	2201      	movs	r2, #1
 8005f82:	f001 fc5f 	bl	8007844 <mpu_i2c_read>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <mpu_set_sensors+0x10e>
        return -1;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	e050      	b.n	8006034 <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8005f9c:	2311      	movs	r3, #17
 8005f9e:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
 8005fa2:	f043 0320 	orr.w	r3, r3, #32
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	73bb      	strb	r3, [r7, #14]
 8005faa:	e006      	b.n	8005fba <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8005fac:	2310      	movs	r3, #16
 8005fae:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	f023 0320 	bic.w	r3, r3, #32
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <mpu_set_sensors+0x1b8>)
 8005fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	73bb      	strb	r3, [r7, #14]
 8005fce:	e004      	b.n	8005fda <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <mpu_set_sensors+0x1b8>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	7818      	ldrb	r0, [r3, #0]
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <mpu_set_sensors+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 8005fe8:	f107 030f 	add.w	r3, r7, #15
 8005fec:	2201      	movs	r2, #1
 8005fee:	f001 fc05 	bl	80077fc <mpu_i2c_write>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <mpu_set_sensors+0x17a>
        return -1;
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffc:	e01a      	b.n	8006034 <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <mpu_set_sensors+0x1b8>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	7818      	ldrb	r0, [r3, #0]
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <mpu_set_sensors+0x1b8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	7919      	ldrb	r1, [r3, #4]
 800600a:	f107 030e 	add.w	r3, r7, #14
 800600e:	2201      	movs	r2, #1
 8006010:	f001 fbf4 	bl	80077fc <mpu_i2c_write>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <mpu_set_sensors+0x19c>
        return -1;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	e009      	b.n	8006034 <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8006020:	4a06      	ldr	r2, [pc, #24]	; (800603c <mpu_set_sensors+0x1b8>)
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <mpu_set_sensors+0x1b8>)
 8006028:	2200      	movs	r2, #0
 800602a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800602c:	2032      	movs	r0, #50	; 0x32
 800602e:	f7fc fa41 	bl	80024b4 <HAL_Delay>
    return 0;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000000c 	.word	0x2000000c

08006040 <mpu_get_int_status>:
 *  @brief      Read the MPU interrupt status registers.
 *  @param[out] status  Mask of interrupt bits.
 *  @return     0 if successful.
 */
int mpu_get_int_status(short *status)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
    unsigned char tmp[2];
    if (!st.chip_cfg.sensors)
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <mpu_get_int_status+0x54>)
 800604a:	7a9b      	ldrb	r3, [r3, #10]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <mpu_get_int_status+0x16>
        return -1;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	e01a      	b.n	800608c <mpu_get_int_status+0x4c>
    if (i2c_read(st.hw->addr, st.reg->dmp_int_status, 2, tmp))
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <mpu_get_int_status+0x54>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	7818      	ldrb	r0, [r3, #0]
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <mpu_get_int_status+0x54>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	7c99      	ldrb	r1, [r3, #18]
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	2202      	movs	r2, #2
 8006068:	f001 fbec 	bl	8007844 <mpu_i2c_read>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <mpu_get_int_status+0x38>
        return -1;
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	e009      	b.n	800608c <mpu_get_int_status+0x4c>
    status[0] = (tmp[0] << 8) | tmp[1];
 8006078:	7b3b      	ldrb	r3, [r7, #12]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	b21a      	sxth	r2, r3
 800607e:	7b7b      	ldrb	r3, [r7, #13]
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21a      	sxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	801a      	strh	r2, [r3, #0]
    return 0;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000000c 	.word	0x2000000c

08006098 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 80060a6:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 80060a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <mpu_read_fifo_stream+0x1e>
        return -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	e068      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 80060b8:	7a9b      	ldrb	r3, [r3, #10]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <mpu_read_fifo_stream+0x2c>
        return -1;
 80060be:	f04f 33ff 	mov.w	r3, #4294967295
 80060c2:	e061      	b.n	8006188 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 80060c4:	4b32      	ldr	r3, [pc, #200]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	7818      	ldrb	r0, [r3, #0]
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	7b19      	ldrb	r1, [r3, #12]
 80060d0:	f107 0314 	add.w	r3, r7, #20
 80060d4:	2202      	movs	r2, #2
 80060d6:	f001 fbb5 	bl	8007844 <mpu_i2c_read>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <mpu_read_fifo_stream+0x4e>
        return -1;
 80060e0:	f04f 33ff 	mov.w	r3, #4294967295
 80060e4:	e050      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 80060e6:	7d3b      	ldrb	r3, [r7, #20]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	b21a      	sxth	r2, r3
 80060ec:	7d7b      	ldrb	r3, [r7, #21]
 80060ee:	b21b      	sxth	r3, r3
 80060f0:	4313      	orrs	r3, r2
 80060f2:	b21b      	sxth	r3, r3
 80060f4:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 80060f6:	8afa      	ldrh	r2, [r7, #22]
 80060f8:	89fb      	ldrh	r3, [r7, #14]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d205      	bcs.n	800610a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
        return -1;
 8006104:	f04f 33ff 	mov.w	r3, #4294967295
 8006108:	e03e      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800610a:	4b21      	ldr	r3, [pc, #132]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	885b      	ldrh	r3, [r3, #2]
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	8afa      	ldrh	r2, [r7, #22]
 8006116:	429a      	cmp	r2, r3
 8006118:	d91a      	bls.n	8006150 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800611a:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	7818      	ldrb	r0, [r3, #0]
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	7cd9      	ldrb	r1, [r3, #19]
 8006126:	f107 0314 	add.w	r3, r7, #20
 800612a:	2201      	movs	r2, #1
 800612c:	f001 fb8a 	bl	8007844 <mpu_i2c_read>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <mpu_read_fifo_stream+0xa4>
            return -1;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	e025      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800613c:	7d3b      	ldrb	r3, [r7, #20]
 800613e:	f003 0310 	and.w	r3, r3, #16
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8006146:	f7ff fae1 	bl	800570c <mpu_reset_fifo>
            return -2;
 800614a:	f06f 0301 	mvn.w	r3, #1
 800614e:	e01b      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8006150:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	7818      	ldrb	r0, [r3, #0]
 8006156:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <mpu_read_fifo_stream+0xf8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	7b59      	ldrb	r1, [r3, #13]
 800615c:	89fb      	ldrh	r3, [r7, #14]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f001 fb6f 	bl	8007844 <mpu_i2c_read>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <mpu_read_fifo_stream+0xda>
        return -1;
 800616c:	f04f 33ff 	mov.w	r3, #4294967295
 8006170:	e00a      	b.n	8006188 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8006172:	8afa      	ldrh	r2, [r7, #22]
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	701a      	strb	r2, [r3, #0]
    return 0;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2000000c 	.word	0x2000000c

08006194 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800619e:	4b5f      	ldr	r3, [pc, #380]	; (800631c <mpu_set_bypass+0x188>)
 80061a0:	7c9b      	ldrb	r3, [r3, #18]
 80061a2:	79fa      	ldrb	r2, [r7, #7]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d101      	bne.n	80061ac <mpu_set_bypass+0x18>
        return 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e0b2      	b.n	8006312 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d050      	beq.n	8006254 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <mpu_set_bypass+0x188>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	7818      	ldrb	r0, [r3, #0]
 80061b8:	4b58      	ldr	r3, [pc, #352]	; (800631c <mpu_set_bypass+0x188>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	7919      	ldrb	r1, [r3, #4]
 80061be:	f107 030f 	add.w	r3, r7, #15
 80061c2:	2201      	movs	r2, #1
 80061c4:	f001 fb3e 	bl	8007844 <mpu_i2c_read>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <mpu_set_bypass+0x40>
            return -1;
 80061ce:	f04f 33ff 	mov.w	r3, #4294967295
 80061d2:	e09e      	b.n	8006312 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	f023 0320 	bic.w	r3, r3, #32
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <mpu_set_bypass+0x188>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	7818      	ldrb	r0, [r3, #0]
 80061e4:	4b4d      	ldr	r3, [pc, #308]	; (800631c <mpu_set_bypass+0x188>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	7919      	ldrb	r1, [r3, #4]
 80061ea:	f107 030f 	add.w	r3, r7, #15
 80061ee:	2201      	movs	r2, #1
 80061f0:	f001 fb04 	bl	80077fc <mpu_i2c_write>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <mpu_set_bypass+0x6c>
            return -1;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e088      	b.n	8006312 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8006200:	2003      	movs	r0, #3
 8006202:	f7fc f957 	bl	80024b4 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8006206:	2302      	movs	r3, #2
 8006208:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800620a:	4b44      	ldr	r3, [pc, #272]	; (800631c <mpu_set_bypass+0x188>)
 800620c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800621a:	b2db      	uxtb	r3, r3
 800621c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800621e:	4b3f      	ldr	r3, [pc, #252]	; (800631c <mpu_set_bypass+0x188>)
 8006220:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800622e:	b2db      	uxtb	r3, r3
 8006230:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8006232:	4b3a      	ldr	r3, [pc, #232]	; (800631c <mpu_set_bypass+0x188>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	7818      	ldrb	r0, [r3, #0]
 8006238:	4b38      	ldr	r3, [pc, #224]	; (800631c <mpu_set_bypass+0x188>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	7dd9      	ldrb	r1, [r3, #23]
 800623e:	f107 030f 	add.w	r3, r7, #15
 8006242:	2201      	movs	r2, #1
 8006244:	f001 fada 	bl	80077fc <mpu_i2c_write>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d05d      	beq.n	800630a <mpu_set_bypass+0x176>
            return -1;
 800624e:	f04f 33ff 	mov.w	r3, #4294967295
 8006252:	e05e      	b.n	8006312 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8006254:	4b31      	ldr	r3, [pc, #196]	; (800631c <mpu_set_bypass+0x188>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	7818      	ldrb	r0, [r3, #0]
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <mpu_set_bypass+0x188>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	7919      	ldrb	r1, [r3, #4]
 8006260:	f107 030f 	add.w	r3, r7, #15
 8006264:	2201      	movs	r2, #1
 8006266:	f001 faed 	bl	8007844 <mpu_i2c_read>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <mpu_set_bypass+0xe2>
            return -1;
 8006270:	f04f 33ff 	mov.w	r3, #4294967295
 8006274:	e04d      	b.n	8006312 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8006276:	4b29      	ldr	r3, [pc, #164]	; (800631c <mpu_set_bypass+0x188>)
 8006278:	7a9b      	ldrb	r3, [r3, #10]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	f043 0320 	orr.w	r3, r3, #32
 8006288:	b2db      	uxtb	r3, r3
 800628a:	73fb      	strb	r3, [r7, #15]
 800628c:	e004      	b.n	8006298 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	f023 0320 	bic.w	r3, r3, #32
 8006294:	b2db      	uxtb	r3, r3
 8006296:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <mpu_set_bypass+0x188>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	7818      	ldrb	r0, [r3, #0]
 800629e:	4b1f      	ldr	r3, [pc, #124]	; (800631c <mpu_set_bypass+0x188>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	7919      	ldrb	r1, [r3, #4]
 80062a4:	f107 030f 	add.w	r3, r7, #15
 80062a8:	2201      	movs	r2, #1
 80062aa:	f001 faa7 	bl	80077fc <mpu_i2c_write>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <mpu_set_bypass+0x126>
            return -1;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	e02b      	b.n	8006312 <mpu_set_bypass+0x17e>
        delay_ms(3);
 80062ba:	2003      	movs	r0, #3
 80062bc:	f7fc f8fa 	bl	80024b4 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <mpu_set_bypass+0x188>)
 80062c2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	e001      	b.n	80062d4 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <mpu_set_bypass+0x188>)
 80062d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <mpu_set_bypass+0x188>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	7818      	ldrb	r0, [r3, #0]
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <mpu_set_bypass+0x188>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	7dd9      	ldrb	r1, [r3, #23]
 80062f4:	f107 030f 	add.w	r3, r7, #15
 80062f8:	2201      	movs	r2, #1
 80062fa:	f001 fa7f 	bl	80077fc <mpu_i2c_write>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <mpu_set_bypass+0x176>
            return -1;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e003      	b.n	8006312 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800630a:	4a04      	ldr	r2, [pc, #16]	; (800631c <mpu_set_bypass+0x188>)
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	7493      	strb	r3, [r2, #18]
    return 0;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2000000c 	.word	0x2000000c

08006320 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800632a:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <mpu_set_int_latched+0x84>)
 800632c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006330:	79fa      	ldrb	r2, [r7, #7]
 8006332:	429a      	cmp	r2, r3
 8006334:	d101      	bne.n	800633a <mpu_set_int_latched+0x1a>
        return 0;
 8006336:	2300      	movs	r3, #0
 8006338:	e030      	b.n	800639c <mpu_set_int_latched+0x7c>

    if (enable)
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8006340:	2330      	movs	r3, #48	; 0x30
 8006342:	73fb      	strb	r3, [r7, #15]
 8006344:	e001      	b.n	800634a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800634a:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <mpu_set_int_latched+0x84>)
 800634c:	7c9b      	ldrb	r3, [r3, #18]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	f043 0302 	orr.w	r3, r3, #2
 8006358:	b2db      	uxtb	r3, r3
 800635a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <mpu_set_int_latched+0x84>)
 800635e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800636c:	b2db      	uxtb	r3, r3
 800636e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <mpu_set_int_latched+0x84>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	7818      	ldrb	r0, [r3, #0]
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <mpu_set_int_latched+0x84>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	7dd9      	ldrb	r1, [r3, #23]
 800637c:	f107 030f 	add.w	r3, r7, #15
 8006380:	2201      	movs	r2, #1
 8006382:	f001 fa3b 	bl	80077fc <mpu_i2c_write>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <mpu_set_int_latched+0x72>
        return -1;
 800638c:	f04f 33ff 	mov.w	r3, #4294967295
 8006390:	e004      	b.n	800639c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8006392:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <mpu_set_int_latched+0x84>)
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000000c 	.word	0x2000000c

080063a8 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	603a      	str	r2, [r7, #0]
 80063b2:	80fb      	strh	r3, [r7, #6]
 80063b4:	460b      	mov	r3, r1
 80063b6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <mpu_write_mem+0x1c>
        return -1;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	e03d      	b.n	8006440 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 80063c4:	4b20      	ldr	r3, [pc, #128]	; (8006448 <mpu_write_mem+0xa0>)
 80063c6:	7a9b      	ldrb	r3, [r3, #10]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <mpu_write_mem+0x2a>
        return -1;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295
 80063d0:	e036      	b.n	8006440 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80063e2:	7b7b      	ldrb	r3, [r7, #13]
 80063e4:	461a      	mov	r2, r3
 80063e6:	88bb      	ldrh	r3, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <mpu_write_mem+0xa0>)
 80063ec:	6852      	ldr	r2, [r2, #4]
 80063ee:	8952      	ldrh	r2, [r2, #10]
 80063f0:	4293      	cmp	r3, r2
 80063f2:	dd02      	ble.n	80063fa <mpu_write_mem+0x52>
        return -1;
 80063f4:	f04f 33ff 	mov.w	r3, #4294967295
 80063f8:	e022      	b.n	8006440 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <mpu_write_mem+0xa0>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	7818      	ldrb	r0, [r3, #0]
 8006400:	4b11      	ldr	r3, [pc, #68]	; (8006448 <mpu_write_mem+0xa0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	7ed9      	ldrb	r1, [r3, #27]
 8006406:	f107 030c 	add.w	r3, r7, #12
 800640a:	2202      	movs	r2, #2
 800640c:	f001 f9f6 	bl	80077fc <mpu_i2c_write>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <mpu_write_mem+0x74>
        return -1;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	e011      	b.n	8006440 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <mpu_write_mem+0xa0>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	7818      	ldrb	r0, [r3, #0]
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <mpu_write_mem+0xa0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	7e19      	ldrb	r1, [r3, #24]
 8006428:	88bb      	ldrh	r3, [r7, #4]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f001 f9e5 	bl	80077fc <mpu_i2c_write>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <mpu_write_mem+0x96>
        return -1;
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e000      	b.n	8006440 <mpu_write_mem+0x98>
    return 0;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	2000000c 	.word	0x2000000c

0800644c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	603a      	str	r2, [r7, #0]
 8006456:	80fb      	strh	r3, [r7, #6]
 8006458:	460b      	mov	r3, r1
 800645a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <mpu_read_mem+0x1c>
        return -1;
 8006462:	f04f 33ff 	mov.w	r3, #4294967295
 8006466:	e03d      	b.n	80064e4 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8006468:	4b20      	ldr	r3, [pc, #128]	; (80064ec <mpu_read_mem+0xa0>)
 800646a:	7a9b      	ldrb	r3, [r3, #10]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <mpu_read_mem+0x2a>
        return -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	e036      	b.n	80064e4 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	461a      	mov	r2, r3
 800648a:	88bb      	ldrh	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <mpu_read_mem+0xa0>)
 8006490:	6852      	ldr	r2, [r2, #4]
 8006492:	8952      	ldrh	r2, [r2, #10]
 8006494:	4293      	cmp	r3, r2
 8006496:	dd02      	ble.n	800649e <mpu_read_mem+0x52>
        return -1;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	e022      	b.n	80064e4 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <mpu_read_mem+0xa0>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	7818      	ldrb	r0, [r3, #0]
 80064a4:	4b11      	ldr	r3, [pc, #68]	; (80064ec <mpu_read_mem+0xa0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	7ed9      	ldrb	r1, [r3, #27]
 80064aa:	f107 030c 	add.w	r3, r7, #12
 80064ae:	2202      	movs	r2, #2
 80064b0:	f001 f9a4 	bl	80077fc <mpu_i2c_write>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <mpu_read_mem+0x74>
        return -1;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	e011      	b.n	80064e4 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80064c0:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <mpu_read_mem+0xa0>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	7818      	ldrb	r0, [r3, #0]
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <mpu_read_mem+0xa0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	7e19      	ldrb	r1, [r3, #24]
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f001 f9b7 	bl	8007844 <mpu_i2c_read>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <mpu_read_mem+0x96>
        return -1;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e000      	b.n	80064e4 <mpu_read_mem+0x98>
    return 0;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2000000c 	.word	0x2000000c

080064f0 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	4611      	mov	r1, r2
 80064fa:	461a      	mov	r2, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	81fb      	strh	r3, [r7, #14]
 8006500:	460b      	mov	r3, r1
 8006502:	81bb      	strh	r3, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8006508:	4b37      	ldr	r3, [pc, #220]	; (80065e8 <mpu_load_firmware+0xf8>)
 800650a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	e062      	b.n	80065de <mpu_load_firmware+0xee>

    if (!firmware)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <mpu_load_firmware+0x34>
        return -1;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	e05c      	b.n	80065de <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8006524:	2300      	movs	r3, #0
 8006526:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006528:	e034      	b.n	8006594 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800652a:	89fa      	ldrh	r2, [r7, #14]
 800652c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b10      	cmp	r3, #16
 8006532:	bfa8      	it	ge
 8006534:	2310      	movge	r3, #16
 8006536:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8006538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	441a      	add	r2, r3
 800653e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ff30 	bl	80063a8 <mpu_write_mem>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <mpu_load_firmware+0x64>
            return -1;
 800654e:	f04f 33ff 	mov.w	r3, #4294967295
 8006552:	e044      	b.n	80065de <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 8006554:	f107 0214 	add.w	r2, r7, #20
 8006558:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800655a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff75 	bl	800644c <mpu_read_mem>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <mpu_load_firmware+0x7e>
            return -1;
 8006568:	f04f 33ff 	mov.w	r3, #4294967295
 800656c:	e037      	b.n	80065de <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 800656e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4413      	add	r3, r2
 8006574:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006576:	f107 0114 	add.w	r1, r7, #20
 800657a:	4618      	mov	r0, r3
 800657c:	f003 fd5c 	bl	800a038 <memcmp>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <mpu_load_firmware+0x9c>
            return -2;
 8006586:	f06f 0301 	mvn.w	r3, #1
 800658a:	e028      	b.n	80065de <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800658c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800658e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006590:	4413      	add	r3, r2
 8006592:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006594:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006596:	89fb      	ldrh	r3, [r7, #14]
 8006598:	429a      	cmp	r2, r3
 800659a:	d3c6      	bcc.n	800652a <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800659c:	89bb      	ldrh	r3, [r7, #12]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80065a6:	89bb      	ldrh	r3, [r7, #12]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80065ac:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <mpu_load_firmware+0xf8>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	7818      	ldrb	r0, [r3, #0]
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <mpu_load_firmware+0xf8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	7f59      	ldrb	r1, [r3, #29]
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	2202      	movs	r2, #2
 80065be:	f001 f91d 	bl	80077fc <mpu_i2c_write>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <mpu_load_firmware+0xde>
        return -1;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295
 80065cc:	e007      	b.n	80065de <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <mpu_load_firmware+0xf8>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80065d6:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <mpu_load_firmware+0xf8>)
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3728      	adds	r7, #40	; 0x28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000000c 	.word	0x2000000c

080065ec <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 80065f6:	4b26      	ldr	r3, [pc, #152]	; (8006690 <mpu_set_dmp_state+0xa4>)
 80065f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065fc:	79fa      	ldrb	r2, [r7, #7]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d101      	bne.n	8006606 <mpu_set_dmp_state+0x1a>
        return 0;
 8006602:	2300      	movs	r3, #0
 8006604:	e040      	b.n	8006688 <mpu_set_dmp_state+0x9c>

    if (enable) {
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d027      	beq.n	800665c <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 800660c:	4b20      	ldr	r3, [pc, #128]	; (8006690 <mpu_set_dmp_state+0xa4>)
 800660e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <mpu_set_dmp_state+0x30>
            return -1;
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
 800661a:	e035      	b.n	8006688 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800661c:	2000      	movs	r0, #0
 800661e:	f7fe feb9 	bl	8005394 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 8006622:	2000      	movs	r0, #0
 8006624:	f7ff fdb6 	bl	8006194 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8006628:	4b19      	ldr	r3, [pc, #100]	; (8006690 <mpu_set_dmp_state+0xa4>)
 800662a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fab3 	bl	8005b98 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <mpu_set_dmp_state+0xa4>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	7818      	ldrb	r0, [r3, #0]
 800663c:	f107 030f 	add.w	r3, r7, #15
 8006640:	2201      	movs	r2, #1
 8006642:	2123      	movs	r1, #35	; 0x23
 8006644:	f001 f8da 	bl	80077fc <mpu_i2c_write>
        st.chip_cfg.dmp_on = 1;
 8006648:	4b11      	ldr	r3, [pc, #68]	; (8006690 <mpu_set_dmp_state+0xa4>)
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 8006650:	2001      	movs	r0, #1
 8006652:	f7fe fe9f 	bl	8005394 <set_int_enable>
        mpu_reset_fifo();
 8006656:	f7ff f859 	bl	800570c <mpu_reset_fifo>
 800665a:	e014      	b.n	8006686 <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800665c:	2000      	movs	r0, #0
 800665e:	f7fe fe99 	bl	8005394 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <mpu_set_dmp_state+0xa4>)
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <mpu_set_dmp_state+0xa4>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	7818      	ldrb	r0, [r3, #0]
 800666e:	f107 030f 	add.w	r3, r7, #15
 8006672:	2201      	movs	r2, #1
 8006674:	2123      	movs	r1, #35	; 0x23
 8006676:	f001 f8c1 	bl	80077fc <mpu_i2c_write>
        st.chip_cfg.dmp_on = 0;
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <mpu_set_dmp_state+0xa4>)
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 8006682:	f7ff f843 	bl	800570c <mpu_reset_fifo>
    }
    return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	2000000c 	.word	0x2000000c

08006694 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 800669a:	2001      	movs	r0, #1
 800669c:	f7ff fd7a 	bl	8006194 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80066a0:	230c      	movs	r3, #12
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e00f      	b.n	80066c6 <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	7bf8      	ldrb	r0, [r7, #15]
 80066aa:	2201      	movs	r2, #1
 80066ac:	2100      	movs	r1, #0
 80066ae:	f001 f8c9 	bl	8007844 <mpu_i2c_read>
 80066b2:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <setup_compass+0x2c>
 80066ba:	793b      	ldrb	r3, [r7, #4]
 80066bc:	2b48      	cmp	r3, #72	; 0x48
 80066be:	d006      	beq.n	80066ce <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	3301      	adds	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d9ec      	bls.n	80066a6 <setup_compass+0x12>
 80066cc:	e000      	b.n	80066d0 <setup_compass+0x3c>
            break;
 80066ce:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	d902      	bls.n	80066dc <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e112      	b.n	8006902 <setup_compass+0x26e>
    }

    st.chip_cfg.compass_addr = akm_addr;
 80066dc:	4a8b      	ldr	r2, [pc, #556]	; (800690c <setup_compass+0x278>)
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 80066e4:	2310      	movs	r3, #16
 80066e6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80066e8:	4b88      	ldr	r3, [pc, #544]	; (800690c <setup_compass+0x278>)
 80066ea:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	2201      	movs	r2, #1
 80066f2:	210a      	movs	r1, #10
 80066f4:	f001 f882 	bl	80077fc <mpu_i2c_write>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <setup_compass+0x70>
        return -1;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e0fe      	b.n	8006902 <setup_compass+0x26e>
    delay_ms(1);
 8006704:	2001      	movs	r0, #1
 8006706:	f7fb fed5 	bl	80024b4 <HAL_Delay>

    data[0] = AKM_FUSE_ROM_ACCESS;
 800670a:	231f      	movs	r3, #31
 800670c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800670e:	4b7f      	ldr	r3, [pc, #508]	; (800690c <setup_compass+0x278>)
 8006710:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	2201      	movs	r2, #1
 8006718:	210a      	movs	r1, #10
 800671a:	f001 f86f 	bl	80077fc <mpu_i2c_write>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <setup_compass+0x96>
        return -1;
 8006724:	f04f 33ff 	mov.w	r3, #4294967295
 8006728:	e0eb      	b.n	8006902 <setup_compass+0x26e>
    delay_ms(1);
 800672a:	2001      	movs	r0, #1
 800672c:	f7fb fec2 	bl	80024b4 <HAL_Delay>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8006730:	4b76      	ldr	r3, [pc, #472]	; (800690c <setup_compass+0x278>)
 8006732:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	2203      	movs	r2, #3
 800673a:	2110      	movs	r1, #16
 800673c:	f001 f882 	bl	8007844 <mpu_i2c_read>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <setup_compass+0xb8>
        return -1;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295
 800674a:	e0da      	b.n	8006902 <setup_compass+0x26e>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800674c:	793b      	ldrb	r3, [r7, #4]
 800674e:	b29b      	uxth	r3, r3
 8006750:	3380      	adds	r3, #128	; 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	b21a      	sxth	r2, r3
 8006756:	4b6d      	ldr	r3, [pc, #436]	; (800690c <setup_compass+0x278>)
 8006758:	859a      	strh	r2, [r3, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800675a:	797b      	ldrb	r3, [r7, #5]
 800675c:	b29b      	uxth	r3, r3
 800675e:	3380      	adds	r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	b21a      	sxth	r2, r3
 8006764:	4b69      	ldr	r3, [pc, #420]	; (800690c <setup_compass+0x278>)
 8006766:	85da      	strh	r2, [r3, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8006768:	79bb      	ldrb	r3, [r7, #6]
 800676a:	b29b      	uxth	r3, r3
 800676c:	3380      	adds	r3, #128	; 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	b21a      	sxth	r2, r3
 8006772:	4b66      	ldr	r3, [pc, #408]	; (800690c <setup_compass+0x278>)
 8006774:	861a      	strh	r2, [r3, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 8006776:	2310      	movs	r3, #16
 8006778:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800677a:	4b64      	ldr	r3, [pc, #400]	; (800690c <setup_compass+0x278>)
 800677c:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	2201      	movs	r2, #1
 8006784:	210a      	movs	r1, #10
 8006786:	f001 f839 	bl	80077fc <mpu_i2c_write>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <setup_compass+0x102>
        return -1;
 8006790:	f04f 33ff 	mov.w	r3, #4294967295
 8006794:	e0b5      	b.n	8006902 <setup_compass+0x26e>
    delay_ms(1);
 8006796:	2001      	movs	r0, #1
 8006798:	f7fb fe8c 	bl	80024b4 <HAL_Delay>

    mpu_set_bypass(0);
 800679c:	2000      	movs	r0, #0
 800679e:	f7ff fcf9 	bl	8006194 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80067a6:	4b59      	ldr	r3, [pc, #356]	; (800690c <setup_compass+0x278>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	7818      	ldrb	r0, [r3, #0]
 80067ac:	4b57      	ldr	r3, [pc, #348]	; (800690c <setup_compass+0x278>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	7e99      	ldrb	r1, [r3, #26]
 80067b2:	1d3b      	adds	r3, r7, #4
 80067b4:	2201      	movs	r2, #1
 80067b6:	f001 f821 	bl	80077fc <mpu_i2c_write>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <setup_compass+0x132>
        return -1;
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
 80067c4:	e09d      	b.n	8006902 <setup_compass+0x26e>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80067c6:	4b51      	ldr	r3, [pc, #324]	; (800690c <setup_compass+0x278>)
 80067c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80067cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80067d4:	4b4d      	ldr	r3, [pc, #308]	; (800690c <setup_compass+0x278>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	7818      	ldrb	r0, [r3, #0]
 80067da:	4b4c      	ldr	r3, [pc, #304]	; (800690c <setup_compass+0x278>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	7f99      	ldrb	r1, [r3, #30]
 80067e0:	1d3b      	adds	r3, r7, #4
 80067e2:	2201      	movs	r2, #1
 80067e4:	f001 f80a 	bl	80077fc <mpu_i2c_write>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <setup_compass+0x160>
        return -1;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	e086      	b.n	8006902 <setup_compass+0x26e>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 80067f4:	2302      	movs	r3, #2
 80067f6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80067f8:	4b44      	ldr	r3, [pc, #272]	; (800690c <setup_compass+0x278>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	7818      	ldrb	r0, [r3, #0]
 80067fe:	4b43      	ldr	r3, [pc, #268]	; (800690c <setup_compass+0x278>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	7fd9      	ldrb	r1, [r3, #31]
 8006804:	1d3b      	adds	r3, r7, #4
 8006806:	2201      	movs	r2, #1
 8006808:	f000 fff8 	bl	80077fc <mpu_i2c_write>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <setup_compass+0x184>
        return -1;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	e074      	b.n	8006902 <setup_compass+0x26e>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8006818:	2388      	movs	r3, #136	; 0x88
 800681a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800681c:	4b3b      	ldr	r3, [pc, #236]	; (800690c <setup_compass+0x278>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	7818      	ldrb	r0, [r3, #0]
 8006822:	4b3a      	ldr	r3, [pc, #232]	; (800690c <setup_compass+0x278>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f893 1020 	ldrb.w	r1, [r3, #32]
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	2201      	movs	r2, #1
 800682e:	f000 ffe5 	bl	80077fc <mpu_i2c_write>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <setup_compass+0x1aa>
        return -1;
 8006838:	f04f 33ff 	mov.w	r3, #4294967295
 800683c:	e061      	b.n	8006902 <setup_compass+0x26e>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 800683e:	4b33      	ldr	r3, [pc, #204]	; (800690c <setup_compass+0x278>)
 8006840:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8006844:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8006846:	4b31      	ldr	r3, [pc, #196]	; (800690c <setup_compass+0x278>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	7818      	ldrb	r0, [r3, #0]
 800684c:	4b2f      	ldr	r3, [pc, #188]	; (800690c <setup_compass+0x278>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 8006854:	1d3b      	adds	r3, r7, #4
 8006856:	2201      	movs	r2, #1
 8006858:	f000 ffd0 	bl	80077fc <mpu_i2c_write>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <setup_compass+0x1d4>
        return -1;
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	e04c      	b.n	8006902 <setup_compass+0x26e>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8006868:	230a      	movs	r3, #10
 800686a:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800686c:	4b27      	ldr	r3, [pc, #156]	; (800690c <setup_compass+0x278>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	7818      	ldrb	r0, [r3, #0]
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <setup_compass+0x278>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	2201      	movs	r2, #1
 800687e:	f000 ffbd 	bl	80077fc <mpu_i2c_write>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <setup_compass+0x1fa>
        return -1;
 8006888:	f04f 33ff 	mov.w	r3, #4294967295
 800688c:	e039      	b.n	8006902 <setup_compass+0x26e>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 800688e:	2381      	movs	r3, #129	; 0x81
 8006890:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <setup_compass+0x278>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	7818      	ldrb	r0, [r3, #0]
 8006898:	4b1c      	ldr	r3, [pc, #112]	; (800690c <setup_compass+0x278>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	2201      	movs	r2, #1
 80068a4:	f000 ffaa 	bl	80077fc <mpu_i2c_write>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <setup_compass+0x220>
        return -1;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	e026      	b.n	8006902 <setup_compass+0x26e>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 80068b4:	2311      	movs	r3, #17
 80068b6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80068b8:	4b14      	ldr	r3, [pc, #80]	; (800690c <setup_compass+0x278>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	7818      	ldrb	r0, [r3, #0]
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <setup_compass+0x278>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	2201      	movs	r2, #1
 80068ca:	f000 ff97 	bl	80077fc <mpu_i2c_write>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <setup_compass+0x246>
        return -1;
 80068d4:	f04f 33ff 	mov.w	r3, #4294967295
 80068d8:	e013      	b.n	8006902 <setup_compass+0x26e>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 80068da:	2303      	movs	r3, #3
 80068dc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <setup_compass+0x278>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	7818      	ldrb	r0, [r3, #0]
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <setup_compass+0x278>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
 80068ec:	1d3b      	adds	r3, r7, #4
 80068ee:	2201      	movs	r2, #1
 80068f0:	f000 ff84 	bl	80077fc <mpu_i2c_write>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <setup_compass+0x26c>
        return -1;
 80068fa:	f04f 33ff 	mov.w	r3, #4294967295
 80068fe:	e000      	b.n	8006902 <setup_compass+0x26e>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000000c 	.word	0x2000000c

08006910 <get_ms>:
#if defined EMPL_TARGET_STM32F4
#include "mpu_drv.h"
#define i2c_write	MPU_I2C_Write
#define i2c_read	MPU_I2C_Read
#define delay_ms	HAL_Delay
static inline void get_ms(unsigned long *count) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	*count = HAL_GetTick();
 8006918:	f7fb fdc0 	bl	800249c <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8006930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006934:	23c8      	movs	r3, #200	; 0xc8
 8006936:	4904      	ldr	r1, [pc, #16]	; (8006948 <dmp_load_motion_driver_firmware+0x1c>)
 8006938:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800693c:	f7ff fdd8 	bl	80064f0 <mpu_load_firmware>
 8006940:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8006942:	4618      	mov	r0, r3
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	0800b590 	.word	0x0800b590

0800694c <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8006956:	4a71      	ldr	r2, [pc, #452]	; (8006b1c <dmp_set_orientation+0x1d0>)
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	4611      	mov	r1, r2
 8006960:	8019      	strh	r1, [r3, #0]
 8006962:	3302      	adds	r3, #2
 8006964:	0c12      	lsrs	r2, r2, #16
 8006966:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8006968:	4a6d      	ldr	r2, [pc, #436]	; (8006b20 <dmp_set_orientation+0x1d4>)
 800696a:	f107 0310 	add.w	r3, r7, #16
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	4611      	mov	r1, r2
 8006972:	8019      	strh	r1, [r3, #0]
 8006974:	3302      	adds	r3, #2
 8006976:	0c12      	lsrs	r2, r2, #16
 8006978:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800697a:	4a6a      	ldr	r2, [pc, #424]	; (8006b24 <dmp_set_orientation+0x1d8>)
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	4611      	mov	r1, r2
 8006984:	8019      	strh	r1, [r3, #0]
 8006986:	3302      	adds	r3, #2
 8006988:	0c12      	lsrs	r2, r2, #16
 800698a:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800698c:	4a66      	ldr	r2, [pc, #408]	; (8006b28 <dmp_set_orientation+0x1dc>)
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	4611      	mov	r1, r2
 8006996:	8019      	strh	r1, [r3, #0]
 8006998:	3302      	adds	r3, #2
 800699a:	0c12      	lsrs	r2, r2, #16
 800699c:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	f107 0220 	add.w	r2, r7, #32
 80069a8:	4413      	add	r3, r2
 80069aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80069ae:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	f107 0220 	add.w	r2, r7, #32
 80069be:	4413      	add	r3, r2
 80069c0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80069c4:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	099b      	lsrs	r3, r3, #6
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	f107 0220 	add.w	r2, r7, #32
 80069d4:	4413      	add	r3, r2
 80069d6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80069da:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	f107 0220 	add.w	r2, r7, #32
 80069e6:	4413      	add	r3, r2
 80069e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80069ec:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	08db      	lsrs	r3, r3, #3
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	f107 0220 	add.w	r2, r7, #32
 80069fc:	4413      	add	r3, r2
 80069fe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006a02:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	099b      	lsrs	r3, r3, #6
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	f107 0220 	add.w	r2, r7, #32
 8006a12:	4413      	add	r3, r2
 8006a14:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006a18:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8006a1a:	f107 031c 	add.w	r3, r7, #28
 8006a1e:	461a      	mov	r2, r3
 8006a20:	2103      	movs	r1, #3
 8006a22:	f240 4026 	movw	r0, #1062	; 0x426
 8006a26:	f7ff fcbf 	bl	80063a8 <mpu_write_mem>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <dmp_set_orientation+0xea>
        return -1;
 8006a30:	f04f 33ff 	mov.w	r3, #4294967295
 8006a34:	e06e      	b.n	8006b14 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	2103      	movs	r1, #3
 8006a3e:	f240 402a 	movw	r0, #1066	; 0x42a
 8006a42:	f7ff fcb1 	bl	80063a8 <mpu_write_mem>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <dmp_set_orientation+0x106>
        return -1;
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	e060      	b.n	8006b14 <dmp_set_orientation+0x1c8>

    memcpy(gyro_regs, gyro_sign, 3);
 8006a52:	f107 031c 	add.w	r3, r7, #28
 8006a56:	f107 020c 	add.w	r2, r7, #12
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	8019      	strh	r1, [r3, #0]
 8006a60:	3302      	adds	r3, #2
 8006a62:	0c12      	lsrs	r2, r2, #16
 8006a64:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8006a66:	f107 0318 	add.w	r3, r7, #24
 8006a6a:	f107 0208 	add.w	r2, r7, #8
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	4611      	mov	r1, r2
 8006a72:	8019      	strh	r1, [r3, #0]
 8006a74:	3302      	adds	r3, #2
 8006a76:	0c12      	lsrs	r2, r2, #16
 8006a78:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <dmp_set_orientation+0x14c>
        gyro_regs[0] |= 1;
 8006a84:	7f3b      	ldrb	r3, [r7, #28]
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8006a8e:	7e3b      	ldrb	r3, [r7, #24]
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <dmp_set_orientation+0x16a>
        gyro_regs[1] |= 1;
 8006aa2:	7f7b      	ldrb	r3, [r7, #29]
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8006aac:	7e7b      	ldrb	r3, [r7, #25]
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <dmp_set_orientation+0x188>
        gyro_regs[2] |= 1;
 8006ac0:	7fbb      	ldrb	r3, [r7, #30]
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8006aca:	7ebb      	ldrb	r3, [r7, #26]
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8006ad4:	f107 031c 	add.w	r3, r7, #28
 8006ad8:	461a      	mov	r2, r3
 8006ada:	2103      	movs	r1, #3
 8006adc:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8006ae0:	f7ff fc62 	bl	80063a8 <mpu_write_mem>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <dmp_set_orientation+0x1a4>
        return -1;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	e011      	b.n	8006b14 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8006af0:	f107 0318 	add.w	r3, r7, #24
 8006af4:	461a      	mov	r2, r3
 8006af6:	2103      	movs	r1, #3
 8006af8:	f240 4031 	movw	r0, #1073	; 0x431
 8006afc:	f7ff fc54 	bl	80063a8 <mpu_write_mem>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <dmp_set_orientation+0x1c0>
        return -1;
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	e003      	b.n	8006b14 <dmp_set_orientation+0x1c8>
    dmp.orient = orient;
 8006b0c:	4a07      	ldr	r2, [pc, #28]	; (8006b2c <dmp_set_orientation+0x1e0>)
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	8113      	strh	r3, [r2, #8]
    return 0;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	0800b3ec 	.word	0x0800b3ec
 8006b20:	0800b3f0 	.word	0x0800b3f0
 8006b24:	0800b3f4 	.word	0x0800b3f4
 8006b28:	0800b3f8 	.word	0x0800b3f8
 8006b2c:	20000330 	.word	0x20000330

08006b30 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <dmp_set_fifo_rate+0x88>)
 8006b3c:	f107 0310 	add.w	r3, r7, #16
 8006b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2bc8      	cmp	r3, #200	; 0xc8
 8006b4a:	d902      	bls.n	8006b52 <dmp_set_fifo_rate+0x22>
        return -1;
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	e02e      	b.n	8006bb0 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	22c8      	movs	r2, #200	; 0xc8
 8006b56:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8006b60:	8bfb      	ldrh	r3, [r7, #30]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8006b6a:	8bfb      	ldrh	r3, [r7, #30]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8006b70:	f107 0308 	add.w	r3, r7, #8
 8006b74:	461a      	mov	r2, r3
 8006b76:	2102      	movs	r1, #2
 8006b78:	f240 2016 	movw	r0, #534	; 0x216
 8006b7c:	f7ff fc14 	bl	80063a8 <mpu_write_mem>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <dmp_set_fifo_rate+0x5c>
        return -1;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e011      	b.n	8006bb0 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8006b8c:	f107 0310 	add.w	r3, r7, #16
 8006b90:	461a      	mov	r2, r3
 8006b92:	210c      	movs	r1, #12
 8006b94:	f640 20c1 	movw	r0, #2753	; 0xac1
 8006b98:	f7ff fc06 	bl	80063a8 <mpu_write_mem>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <dmp_set_fifo_rate+0x78>
        return -1;
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	e003      	b.n	8006bb0 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <dmp_set_fifo_rate+0x8c>)
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	8193      	strh	r3, [r2, #12]
    return 0;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	0800b3fc 	.word	0x0800b3fc
 8006bbc:	20000330 	.word	0x20000330

08006bc0 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460a      	mov	r2, r1
 8006bca:	71fb      	strb	r3, [r7, #7]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <dmp_set_tap_thresh+0x22>
 8006bda:	88bb      	ldrh	r3, [r7, #4]
 8006bdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006be0:	d902      	bls.n	8006be8 <dmp_set_tap_thresh+0x28>
        return -1;
 8006be2:	f04f 33ff 	mov.w	r3, #4294967295
 8006be6:	e10b      	b.n	8006e00 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8006be8:	88bb      	ldrh	r3, [r7, #4]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bf2:	eddf 6a85 	vldr	s13, [pc, #532]	; 8006e08 <dmp_set_tap_thresh+0x248>
 8006bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bfa:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8006bfe:	f107 030b 	add.w	r3, r7, #11
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fed8 	bl	80059b8 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3b02      	subs	r3, #2
 8006c0c:	2b0e      	cmp	r3, #14
 8006c0e:	d87d      	bhi.n	8006d0c <dmp_set_tap_thresh+0x14c>
 8006c10:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <dmp_set_tap_thresh+0x58>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006d0d 	.word	0x08006d0d
 8006c20:	08006c83 	.word	0x08006c83
 8006c24:	08006d0d 	.word	0x08006d0d
 8006c28:	08006d0d 	.word	0x08006d0d
 8006c2c:	08006d0d 	.word	0x08006d0d
 8006c30:	08006cb1 	.word	0x08006cb1
 8006c34:	08006d0d 	.word	0x08006d0d
 8006c38:	08006d0d 	.word	0x08006d0d
 8006c3c:	08006d0d 	.word	0x08006d0d
 8006c40:	08006d0d 	.word	0x08006d0d
 8006c44:	08006d0d 	.word	0x08006d0d
 8006c48:	08006d0d 	.word	0x08006d0d
 8006c4c:	08006d0d 	.word	0x08006d0d
 8006c50:	08006cdf 	.word	0x08006cdf
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8006c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c58:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8006e0c <dmp_set_tap_thresh+0x24c>
 8006c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c64:	ee17 3a90 	vmov	r3, s15
 8006c68:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8006c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c6e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006e10 <dmp_set_tap_thresh+0x250>
 8006c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7a:	ee17 3a90 	vmov	r3, s15
 8006c7e:	82bb      	strh	r3, [r7, #20]
        break;
 8006c80:	e047      	b.n	8006d12 <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8006c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c86:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8006e14 <dmp_set_tap_thresh+0x254>
 8006c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c92:	ee17 3a90 	vmov	r3, s15
 8006c96:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8006c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c9c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006e18 <dmp_set_tap_thresh+0x258>
 8006ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca8:	ee17 3a90 	vmov	r3, s15
 8006cac:	82bb      	strh	r3, [r7, #20]
        break;
 8006cae:	e030      	b.n	8006d12 <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8006cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cb4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006e1c <dmp_set_tap_thresh+0x25c>
 8006cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc0:	ee17 3a90 	vmov	r3, s15
 8006cc4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8006cc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cca:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006e20 <dmp_set_tap_thresh+0x260>
 8006cce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd6:	ee17 3a90 	vmov	r3, s15
 8006cda:	82bb      	strh	r3, [r7, #20]
        break;
 8006cdc:	e019      	b.n	8006d12 <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8006cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ce2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006e24 <dmp_set_tap_thresh+0x264>
 8006ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cee:	ee17 3a90 	vmov	r3, s15
 8006cf2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8006cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cf8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006e28 <dmp_set_tap_thresh+0x268>
 8006cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d04:	ee17 3a90 	vmov	r3, s15
 8006d08:	82bb      	strh	r3, [r7, #20]
        break;
 8006d0a:	e002      	b.n	8006d12 <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8006d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d10:	e076      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8006d12:	8afb      	ldrh	r3, [r7, #22]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8006d1c:	8afb      	ldrh	r3, [r7, #22]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8006d22:	8abb      	ldrh	r3, [r7, #20]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8006d2c:	8abb      	ldrh	r3, [r7, #20]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01c      	beq.n	8006d76 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8006d3c:	f107 030c 	add.w	r3, r7, #12
 8006d40:	461a      	mov	r2, r3
 8006d42:	2102      	movs	r1, #2
 8006d44:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8006d48:	f7ff fb2e 	bl	80063a8 <mpu_write_mem>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <dmp_set_tap_thresh+0x198>
            return -1;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	e053      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8006d58:	f107 030c 	add.w	r3, r7, #12
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2102      	movs	r1, #2
 8006d62:	f44f 7092 	mov.w	r0, #292	; 0x124
 8006d66:	f7ff fb1f 	bl	80063a8 <mpu_write_mem>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <dmp_set_tap_thresh+0x1b6>
            return -1;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	e044      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01c      	beq.n	8006dba <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8006d80:	f107 030c 	add.w	r3, r7, #12
 8006d84:	461a      	mov	r2, r3
 8006d86:	2102      	movs	r1, #2
 8006d88:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8006d8c:	f7ff fb0c 	bl	80063a8 <mpu_write_mem>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <dmp_set_tap_thresh+0x1dc>
            return -1;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9a:	e031      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	3302      	adds	r3, #2
 8006da2:	461a      	mov	r2, r3
 8006da4:	2102      	movs	r1, #2
 8006da6:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006daa:	f7ff fafd 	bl	80063a8 <mpu_write_mem>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <dmp_set_tap_thresh+0x1fa>
            return -1;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	e022      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01c      	beq.n	8006dfe <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2102      	movs	r1, #2
 8006dcc:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8006dd0:	f7ff faea 	bl	80063a8 <mpu_write_mem>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <dmp_set_tap_thresh+0x220>
            return -1;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295
 8006dde:	e00f      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8006de0:	f107 030c 	add.w	r3, r7, #12
 8006de4:	3302      	adds	r3, #2
 8006de6:	461a      	mov	r2, r3
 8006de8:	2102      	movs	r1, #2
 8006dea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006dee:	f7ff fadb 	bl	80063a8 <mpu_write_mem>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <dmp_set_tap_thresh+0x23e>
            return -1;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfc:	e000      	b.n	8006e00 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	43480000 	.word	0x43480000
 8006e0c:	46800000 	.word	0x46800000
 8006e10:	46400000 	.word	0x46400000
 8006e14:	46000000 	.word	0x46000000
 8006e18:	45c00000 	.word	0x45c00000
 8006e1c:	45800000 	.word	0x45800000
 8006e20:	45400000 	.word	0x45400000
 8006e24:	45000000 	.word	0x45000000
 8006e28:	44c00000 	.word	0x44c00000

08006e2c <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	f043 030c 	orr.w	r3, r3, #12
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	f043 0303 	orr.w	r3, r3, #3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8006e76:	f107 030f 	add.w	r3, r7, #15
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8006e82:	f7ff fa91 	bl	80063a8 <mpu_write_mem>
 8006e86:	4603      	mov	r3, r0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d102      	bne.n	8006ea6 <dmp_set_tap_count+0x16>
        min_taps = 1;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	e004      	b.n	8006eb0 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d901      	bls.n	8006eb0 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8006eac:	2304      	movs	r3, #4
 8006eae:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8006eb8:	f107 030f 	add.w	r3, r7, #15
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	f240 104f 	movw	r0, #335	; 0x14f
 8006ec4:	f7ff fa70 	bl	80063a8 <mpu_write_mem>
 8006ec8:	4603      	mov	r3, r0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <dmp_set_tap_time+0x40>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	089b      	lsrs	r3, r3, #2
 8006ee8:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8006eea:	89fb      	ldrh	r3, [r7, #14]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	461a      	mov	r2, r3
 8006f00:	2102      	movs	r1, #2
 8006f02:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8006f06:	f7ff fa4f 	bl	80063a8 <mpu_write_mem>
 8006f0a:	4603      	mov	r3, r0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	cccccccd 	.word	0xcccccccd

08006f18 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <dmp_set_tap_time_multi+0x40>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8006f38:	89fb      	ldrh	r3, [r7, #14]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8006f3e:	f107 030c 	add.w	r3, r7, #12
 8006f42:	461a      	mov	r2, r3
 8006f44:	2102      	movs	r1, #2
 8006f46:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8006f4a:	f7ff fa2d 	bl	80063a8 <mpu_write_mem>
 8006f4e:	4603      	mov	r3, r0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	cccccccd 	.word	0xcccccccd

08006f5c <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a13      	ldr	r2, [pc, #76]	; (8006fb8 <dmp_set_shake_reject_thresh+0x5c>)
 8006f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8006f70:	1192      	asrs	r2, r2, #6
 8006f72:	17db      	asrs	r3, r3, #31
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	887a      	ldrh	r2, [r7, #2]
 8006f78:	fb02 f303 	mul.w	r3, r2, r3
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	161b      	asrs	r3, r3, #24
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	141b      	asrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	121b      	asrs	r3, r3, #8
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8006f9c:	f107 0308 	add.w	r3, r7, #8
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2104      	movs	r1, #4
 8006fa4:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8006fa8:	f7ff f9fe 	bl	80063a8 <mpu_write_mem>
 8006fac:	4603      	mov	r3, r0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	10624dd3 	.word	0x10624dd3

08006fbc <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <dmp_set_shake_reject_time+0x40>)
 8006fca:	fba2 2303 	umull	r2, r3, r2, r3
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	0a1b      	lsrs	r3, r3, #8
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2102      	movs	r1, #2
 8006fea:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8006fee:	f7ff f9db 	bl	80063a8 <mpu_write_mem>
 8006ff2:	4603      	mov	r3, r0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	cccccccd 	.word	0xcccccccd

08007000 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <dmp_set_shake_reject_timeout+0x40>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	0a1b      	lsrs	r3, r3, #8
 800701a:	b29b      	uxth	r3, r3
 800701c:	b2db      	uxtb	r3, r3
 800701e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8007026:	f107 030c 	add.w	r3, r7, #12
 800702a:	461a      	mov	r2, r3
 800702c:	2102      	movs	r1, #2
 800702e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8007032:	f7ff f9b9 	bl	80063a8 <mpu_write_mem>
 8007036:	4603      	mov	r3, r0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	cccccccd 	.word	0xcccccccd

08007044 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800704e:	2302      	movs	r3, #2
 8007050:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8007052:	23ca      	movs	r3, #202	; 0xca
 8007054:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8007056:	23e3      	movs	r3, #227	; 0xe3
 8007058:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800705a:	2309      	movs	r3, #9
 800705c:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800705e:	f107 030c 	add.w	r3, r7, #12
 8007062:	461a      	mov	r2, r3
 8007064:	2104      	movs	r1, #4
 8007066:	2068      	movs	r0, #104	; 0x68
 8007068:	f7ff f99e 	bl	80063a8 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800706c:	23a3      	movs	r3, #163	; 0xa3
 800706e:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d006      	beq.n	8007088 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800707a:	23c0      	movs	r3, #192	; 0xc0
 800707c:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800707e:	23c8      	movs	r3, #200	; 0xc8
 8007080:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8007082:	23c2      	movs	r3, #194	; 0xc2
 8007084:	73fb      	strb	r3, [r7, #15]
 8007086:	e005      	b.n	8007094 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8007088:	23a3      	movs	r3, #163	; 0xa3
 800708a:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800708c:	23a3      	movs	r3, #163	; 0xa3
 800708e:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8007090:	23a3      	movs	r3, #163	; 0xa3
 8007092:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800709a:	2b00      	cmp	r3, #0
 800709c:	d006      	beq.n	80070ac <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800709e:	23c4      	movs	r3, #196	; 0xc4
 80070a0:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80070a2:	23cc      	movs	r3, #204	; 0xcc
 80070a4:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80070a6:	23c6      	movs	r3, #198	; 0xc6
 80070a8:	74bb      	strb	r3, [r7, #18]
 80070aa:	e005      	b.n	80070b8 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80070ac:	23a3      	movs	r3, #163	; 0xa3
 80070ae:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80070b0:	23a3      	movs	r3, #163	; 0xa3
 80070b2:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80070b4:	23a3      	movs	r3, #163	; 0xa3
 80070b6:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80070b8:	23a3      	movs	r3, #163	; 0xa3
 80070ba:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 80070bc:	23a3      	movs	r3, #163	; 0xa3
 80070be:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 80070c0:	23a3      	movs	r3, #163	; 0xa3
 80070c2:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	461a      	mov	r2, r3
 80070ca:	210a      	movs	r1, #10
 80070cc:	f640 20a7 	movw	r0, #2727	; 0xaa7
 80070d0:	f7ff f96a 	bl	80063a8 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 80070de:	2320      	movs	r3, #32
 80070e0:	733b      	strb	r3, [r7, #12]
 80070e2:	e001      	b.n	80070e8 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 80070e4:	23d8      	movs	r3, #216	; 0xd8
 80070e6:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 80070e8:	f107 030c 	add.w	r3, r7, #12
 80070ec:	461a      	mov	r2, r3
 80070ee:	2101      	movs	r1, #1
 80070f0:	f640 20b6 	movw	r0, #2742	; 0xab6
 80070f4:	f7ff f958 	bl	80063a8 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8007102:	2001      	movs	r0, #1
 8007104:	f000 f8c6 	bl	8007294 <dmp_enable_gyro_cal>
 8007108:	e002      	b.n	8007110 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800710a:	2000      	movs	r0, #0
 800710c:	f000 f8c2 	bl	8007294 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01d      	beq.n	8007156 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d008      	beq.n	8007136 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8007124:	23b2      	movs	r3, #178	; 0xb2
 8007126:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8007128:	238b      	movs	r3, #139	; 0x8b
 800712a:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800712c:	23b6      	movs	r3, #182	; 0xb6
 800712e:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8007130:	239b      	movs	r3, #155	; 0x9b
 8007132:	73fb      	strb	r3, [r7, #15]
 8007134:	e007      	b.n	8007146 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 8007136:	23b0      	movs	r3, #176	; 0xb0
 8007138:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800713a:	2380      	movs	r3, #128	; 0x80
 800713c:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800713e:	23b4      	movs	r3, #180	; 0xb4
 8007140:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8007142:	2390      	movs	r3, #144	; 0x90
 8007144:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8007146:	f107 030c 	add.w	r3, r7, #12
 800714a:	461a      	mov	r2, r3
 800714c:	2104      	movs	r1, #4
 800714e:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8007152:	f7ff f929 	bl	80063a8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d025      	beq.n	80071ac <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8007160:	23f8      	movs	r3, #248	; 0xf8
 8007162:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	461a      	mov	r2, r3
 800716a:	2101      	movs	r1, #1
 800716c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8007170:	f7ff f91a 	bl	80063a8 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8007174:	21fa      	movs	r1, #250	; 0xfa
 8007176:	2007      	movs	r0, #7
 8007178:	f7ff fd22 	bl	8006bc0 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800717c:	2007      	movs	r0, #7
 800717e:	f7ff fe55 	bl	8006e2c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8007182:	2001      	movs	r0, #1
 8007184:	f7ff fe84 	bl	8006e90 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8007188:	2064      	movs	r0, #100	; 0x64
 800718a:	f7ff fea3 	bl	8006ed4 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800718e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007192:	f7ff fec1 	bl	8006f18 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8007196:	21c8      	movs	r1, #200	; 0xc8
 8007198:	483c      	ldr	r0, [pc, #240]	; (800728c <dmp_enable_feature+0x248>)
 800719a:	f7ff fedf 	bl	8006f5c <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800719e:	2028      	movs	r0, #40	; 0x28
 80071a0:	f7ff ff0c 	bl	8006fbc <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80071a4:	200a      	movs	r0, #10
 80071a6:	f7ff ff2b 	bl	8007000 <dmp_set_shake_reject_timeout>
 80071aa:	e009      	b.n	80071c0 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80071ac:	23d8      	movs	r3, #216	; 0xd8
 80071ae:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	461a      	mov	r2, r3
 80071b6:	2101      	movs	r1, #1
 80071b8:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80071bc:	f7ff f8f4 	bl	80063a8 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80071ca:	23d9      	movs	r3, #217	; 0xd9
 80071cc:	733b      	strb	r3, [r7, #12]
 80071ce:	e001      	b.n	80071d4 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80071d0:	23d8      	movs	r3, #216	; 0xd8
 80071d2:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	461a      	mov	r2, r3
 80071da:	2101      	movs	r1, #1
 80071dc:	f240 703d 	movw	r0, #1853	; 0x73d
 80071e0:	f7ff f8e2 	bl	80063a8 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 80071ee:	2001      	movs	r0, #1
 80071f0:	f000 f880 	bl	80072f4 <dmp_enable_lp_quat>
 80071f4:	e002      	b.n	80071fc <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 80071f6:	2000      	movs	r0, #0
 80071f8:	f000 f87c 	bl	80072f4 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8007206:	2001      	movs	r0, #1
 8007208:	f000 f89b 	bl	8007342 <dmp_enable_6x_lp_quat>
 800720c:	e002      	b.n	8007214 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800720e:	2000      	movs	r0, #0
 8007210:	f000 f897 	bl	8007342 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	f043 0308 	orr.w	r3, r3, #8
 800721a:	b29a      	uxth	r2, r3
 800721c:	4b1c      	ldr	r3, [pc, #112]	; (8007290 <dmp_enable_feature+0x24c>)
 800721e:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8007220:	f7fe fa74 	bl	800570c <mpu_reset_fifo>

    dmp.packet_length = 0;
 8007224:	4b1a      	ldr	r3, [pc, #104]	; (8007290 <dmp_enable_feature+0x24c>)
 8007226:	2200      	movs	r2, #0
 8007228:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8007234:	4b16      	ldr	r3, [pc, #88]	; (8007290 <dmp_enable_feature+0x24c>)
 8007236:	7b9b      	ldrb	r3, [r3, #14]
 8007238:	3306      	adds	r3, #6
 800723a:	b2da      	uxtb	r2, r3
 800723c:	4b14      	ldr	r3, [pc, #80]	; (8007290 <dmp_enable_feature+0x24c>)
 800723e:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <dmp_enable_feature+0x24c>)
 800724c:	7b9b      	ldrb	r3, [r3, #14]
 800724e:	3306      	adds	r3, #6
 8007250:	b2da      	uxtb	r2, r3
 8007252:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <dmp_enable_feature+0x24c>)
 8007254:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	f003 0314 	and.w	r3, r3, #20
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <dmp_enable_feature+0x24c>)
 8007262:	7b9b      	ldrb	r3, [r3, #14]
 8007264:	3310      	adds	r3, #16
 8007266:	b2da      	uxtb	r2, r3
 8007268:	4b09      	ldr	r3, [pc, #36]	; (8007290 <dmp_enable_feature+0x24c>)
 800726a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <dmp_enable_feature+0x24c>)
 8007278:	7b9b      	ldrb	r3, [r3, #14]
 800727a:	3304      	adds	r3, #4
 800727c:	b2da      	uxtb	r2, r3
 800727e:	4b04      	ldr	r3, [pc, #16]	; (8007290 <dmp_enable_feature+0x24c>)
 8007280:	739a      	strb	r2, [r3, #14]

    return 0;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	02cae309 	.word	0x02cae309
 8007290:	20000330 	.word	0x20000330

08007294 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00f      	beq.n	80072c4 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80072a4:	4a11      	ldr	r2, [pc, #68]	; (80072ec <dmp_enable_gyro_cal+0x58>)
 80072a6:	f107 0314 	add.w	r3, r7, #20
 80072aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80072ac:	c303      	stmia	r3!, {r0, r1}
 80072ae:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80072b0:	f107 0314 	add.w	r3, r7, #20
 80072b4:	461a      	mov	r2, r3
 80072b6:	2109      	movs	r1, #9
 80072b8:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80072bc:	f7ff f874 	bl	80063a8 <mpu_write_mem>
 80072c0:	4603      	mov	r3, r0
 80072c2:	e00e      	b.n	80072e2 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80072c4:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <dmp_enable_gyro_cal+0x5c>)
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80072cc:	c303      	stmia	r3!, {r0, r1}
 80072ce:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	461a      	mov	r2, r3
 80072d6:	2109      	movs	r1, #9
 80072d8:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80072dc:	f7ff f864 	bl	80063a8 <mpu_write_mem>
 80072e0:	4603      	mov	r3, r0
    }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	0800b408 	.word	0x0800b408
 80072f0:	0800b414 	.word	0x0800b414

080072f4 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8007304:	23c0      	movs	r3, #192	; 0xc0
 8007306:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8007308:	23c2      	movs	r3, #194	; 0xc2
 800730a:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800730c:	23c4      	movs	r3, #196	; 0xc4
 800730e:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8007310:	23c6      	movs	r3, #198	; 0xc6
 8007312:	73fb      	strb	r3, [r7, #15]
 8007314:	e006      	b.n	8007324 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	2204      	movs	r2, #4
 800731c:	218b      	movs	r1, #139	; 0x8b
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fea4 	bl	800a06c <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8007324:	f107 030c 	add.w	r3, r7, #12
 8007328:	461a      	mov	r2, r3
 800732a:	2104      	movs	r1, #4
 800732c:	f640 2098 	movw	r0, #2712	; 0xa98
 8007330:	f7ff f83a 	bl	80063a8 <mpu_write_mem>

    return mpu_reset_fifo();
 8007334:	f7fe f9ea 	bl	800570c <mpu_reset_fifo>
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	4603      	mov	r3, r0
 800734a:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d008      	beq.n	8007364 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8007352:	2320      	movs	r3, #32
 8007354:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8007356:	2328      	movs	r3, #40	; 0x28
 8007358:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800735a:	2330      	movs	r3, #48	; 0x30
 800735c:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800735e:	2338      	movs	r3, #56	; 0x38
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	e006      	b.n	8007372 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	2204      	movs	r2, #4
 800736a:	21a3      	movs	r1, #163	; 0xa3
 800736c:	4618      	mov	r0, r3
 800736e:	f002 fe7d 	bl	800a06c <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	461a      	mov	r2, r3
 8007378:	2104      	movs	r1, #4
 800737a:	f640 209e 	movw	r0, #2718	; 0xa9e
 800737e:	f7ff f813 	bl	80063a8 <mpu_write_mem>

    return mpu_reset_fifo();
 8007382:	f7fe f9c3 	bl	800570c <mpu_reset_fifo>
 8007386:	4603      	mov	r3, r0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3303      	adds	r3, #3
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80073a2:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3303      	adds	r3, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ae:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3301      	adds	r3, #1
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d012      	beq.n	80073e4 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	08db      	lsrs	r3, r3, #3
 80073c2:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	3301      	adds	r3, #1
 80073ce:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80073d0:	4b10      	ldr	r3, [pc, #64]	; (8007414 <decode_gesture+0x84>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80073d8:	4b0e      	ldr	r3, [pc, #56]	; (8007414 <decode_gesture+0x84>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	7b39      	ldrb	r1, [r7, #12]
 80073de:	7b7a      	ldrb	r2, [r7, #13]
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3301      	adds	r3, #1
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <decode_gesture+0x84>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d006      	beq.n	8007408 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <decode_gesture+0x84>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	0992      	lsrs	r2, r2, #6
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
    }

    return 0;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000330 	.word	0x20000330

08007418 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b092      	sub	sp, #72	; 0x48
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800742c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800742e:	2200      	movs	r2, #0
 8007430:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8007432:	4bb4      	ldr	r3, [pc, #720]	; (8007704 <dmp_read_fifo+0x2ec>)
 8007434:	7b9b      	ldrb	r3, [r3, #14]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f107 0120 	add.w	r1, r7, #32
 800743c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fe2a 	bl	8006098 <mpu_read_fifo_stream>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <dmp_read_fifo+0x38>
        return -1;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	e154      	b.n	80076fa <dmp_read_fifo+0x2e2>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8007450:	4bac      	ldr	r3, [pc, #688]	; (8007704 <dmp_read_fifo+0x2ec>)
 8007452:	895b      	ldrh	r3, [r3, #10]
 8007454:	f003 0314 	and.w	r3, r3, #20
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 808a 	beq.w	8007572 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800745e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007462:	061a      	lsls	r2, r3, #24
 8007464:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800746c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007470:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8007472:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8007474:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007478:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800747e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007482:	061a      	lsls	r2, r3, #24
 8007484:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800748c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007490:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8007492:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007498:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800749e:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80074a0:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80074a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074a6:	061a      	lsls	r2, r3, #24
 80074a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80074ac:	041b      	lsls	r3, r3, #16
 80074ae:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80074b0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80074b4:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80074b6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80074b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074bc:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80074c2:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80074c4:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80074c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074ca:	061a      	lsls	r2, r3, #24
 80074cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80074d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074d8:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80074da:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80074dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e0:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80074e6:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80074e8:	601a      	str	r2, [r3, #0]
        ii += 16;
 80074ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074ee:	3310      	adds	r3, #16
 80074f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	141b      	asrs	r3, r3, #16
 80074fa:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	141b      	asrs	r3, r3, #16
 8007504:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3308      	adds	r3, #8
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	141b      	asrs	r3, r3, #16
 800750e:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	330c      	adds	r3, #12
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	141b      	asrs	r3, r3, #16
 8007518:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	fb02 f203 	mul.w	r2, r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	69b9      	ldr	r1, [r7, #24]
 8007530:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8007534:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	69f9      	ldr	r1, [r7, #28]
 800753a:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800753e:	4413      	add	r3, r2
 8007540:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8007542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007544:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007548:	db03      	blt.n	8007552 <dmp_read_fifo+0x13a>
 800754a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754c:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8007550:	dd07      	ble.n	8007562 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8007552:	f7fe f8db 	bl	800570c <mpu_reset_fifo>
            sensors[0] = 0;
 8007556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007558:	2200      	movs	r2, #0
 800755a:	801a      	strh	r2, [r3, #0]
            return -1;
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	e0cb      	b.n	80076fa <dmp_read_fifo+0x2e2>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756c:	b21a      	sxth	r2, r3
 800756e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007570:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8007572:	4b64      	ldr	r3, [pc, #400]	; (8007704 <dmp_read_fifo+0x2ec>)
 8007574:	895b      	ldrh	r3, [r3, #10]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d052      	beq.n	8007624 <dmp_read_fifo+0x20c>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800757e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007582:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007586:	4413      	add	r3, r2
 8007588:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	b21a      	sxth	r2, r3
 8007590:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007594:	3301      	adds	r3, #1
 8007596:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800759a:	440b      	add	r3, r1
 800759c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075a0:	b21b      	sxth	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80075aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075ae:	3302      	adds	r3, #2
 80075b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075b4:	4413      	add	r3, r2
 80075b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	b219      	sxth	r1, r3
 80075be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075c2:	3303      	adds	r3, #3
 80075c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075c8:	4413      	add	r3, r2
 80075ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075ce:	b21a      	sxth	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3302      	adds	r3, #2
 80075d4:	430a      	orrs	r2, r1
 80075d6:	b212      	sxth	r2, r2
 80075d8:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80075da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075de:	3304      	adds	r3, #4
 80075e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075e4:	4413      	add	r3, r2
 80075e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	b219      	sxth	r1, r3
 80075ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075f2:	3305      	adds	r3, #5
 80075f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075f8:	4413      	add	r3, r2
 80075fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075fe:	b21a      	sxth	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3304      	adds	r3, #4
 8007604:	430a      	orrs	r2, r1
 8007606:	b212      	sxth	r2, r2
 8007608:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800760a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800760e:	3306      	adds	r3, #6
 8007610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8007614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800761a:	f043 0308 	orr.w	r3, r3, #8
 800761e:	b21a      	sxth	r2, r3
 8007620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007622:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8007624:	4b37      	ldr	r3, [pc, #220]	; (8007704 <dmp_read_fifo+0x2ec>)
 8007626:	895b      	ldrh	r3, [r3, #10]
 8007628:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800762c:	2b00      	cmp	r3, #0
 800762e:	d052      	beq.n	80076d6 <dmp_read_fifo+0x2be>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8007630:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007634:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007638:	4413      	add	r3, r2
 800763a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	b21a      	sxth	r2, r3
 8007642:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007646:	3301      	adds	r3, #1
 8007648:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800764c:	440b      	add	r3, r1
 800764e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007652:	b21b      	sxth	r3, r3
 8007654:	4313      	orrs	r3, r2
 8007656:	b21a      	sxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800765c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007660:	3302      	adds	r3, #2
 8007662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007666:	4413      	add	r3, r2
 8007668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	b219      	sxth	r1, r3
 8007670:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007674:	3303      	adds	r3, #3
 8007676:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800767a:	4413      	add	r3, r2
 800767c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007680:	b21a      	sxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3302      	adds	r3, #2
 8007686:	430a      	orrs	r2, r1
 8007688:	b212      	sxth	r2, r2
 800768a:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800768c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007690:	3304      	adds	r3, #4
 8007692:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007696:	4413      	add	r3, r2
 8007698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	b219      	sxth	r1, r3
 80076a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076a4:	3305      	adds	r3, #5
 80076a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80076aa:	4413      	add	r3, r2
 80076ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80076b0:	b21a      	sxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3304      	adds	r3, #4
 80076b6:	430a      	orrs	r2, r1
 80076b8:	b212      	sxth	r2, r2
 80076ba:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80076bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076c0:	3306      	adds	r3, #6
 80076c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076cc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80076d0:	b21a      	sxth	r2, r3
 80076d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d4:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <dmp_read_fifo+0x2ec>)
 80076d8:	895b      	ldrh	r3, [r3, #10]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 80076e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076e6:	f107 0220 	add.w	r2, r7, #32
 80076ea:	4413      	add	r3, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fe4f 	bl	8007390 <decode_gesture>

    get_ms(timestamp);
 80076f2:	6838      	ldr	r0, [r7, #0]
 80076f4:	f7ff f90c 	bl	8006910 <get_ms>
    return 0;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3748      	adds	r7, #72	; 0x48
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000330 	.word	0x20000330

08007708 <inv_row_2_scale>:
	}

	return hash;
}

static unsigned short inv_row_2_scale(const signed char *row) {
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	unsigned short b;

	if (row[0] > 0)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f993 3000 	ldrsb.w	r3, [r3]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd02      	ble.n	8007720 <inv_row_2_scale+0x18>
		b = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	81fb      	strh	r3, [r7, #14]
 800771e:	e02d      	b.n	800777c <inv_row_2_scale+0x74>
	else if (row[0] < 0)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f993 3000 	ldrsb.w	r3, [r3]
 8007726:	2b00      	cmp	r3, #0
 8007728:	da02      	bge.n	8007730 <inv_row_2_scale+0x28>
		b = 4;
 800772a:	2304      	movs	r3, #4
 800772c:	81fb      	strh	r3, [r7, #14]
 800772e:	e025      	b.n	800777c <inv_row_2_scale+0x74>
	else if (row[1] > 0)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3301      	adds	r3, #1
 8007734:	f993 3000 	ldrsb.w	r3, [r3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	dd02      	ble.n	8007742 <inv_row_2_scale+0x3a>
		b = 1;
 800773c:	2301      	movs	r3, #1
 800773e:	81fb      	strh	r3, [r7, #14]
 8007740:	e01c      	b.n	800777c <inv_row_2_scale+0x74>
	else if (row[1] < 0)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3301      	adds	r3, #1
 8007746:	f993 3000 	ldrsb.w	r3, [r3]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da02      	bge.n	8007754 <inv_row_2_scale+0x4c>
		b = 5;
 800774e:	2305      	movs	r3, #5
 8007750:	81fb      	strh	r3, [r7, #14]
 8007752:	e013      	b.n	800777c <inv_row_2_scale+0x74>
	else if (row[2] > 0)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3302      	adds	r3, #2
 8007758:	f993 3000 	ldrsb.w	r3, [r3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd02      	ble.n	8007766 <inv_row_2_scale+0x5e>
		b = 2;
 8007760:	2302      	movs	r3, #2
 8007762:	81fb      	strh	r3, [r7, #14]
 8007764:	e00a      	b.n	800777c <inv_row_2_scale+0x74>
	else if (row[2] < 0)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3302      	adds	r3, #2
 800776a:	f993 3000 	ldrsb.w	r3, [r3]
 800776e:	2b00      	cmp	r3, #0
 8007770:	da02      	bge.n	8007778 <inv_row_2_scale+0x70>
		b = 6;
 8007772:	2306      	movs	r3, #6
 8007774:	81fb      	strh	r3, [r7, #14]
 8007776:	e001      	b.n	800777c <inv_row_2_scale+0x74>
	else
		b = 7;  // error
 8007778:	2307      	movs	r3, #7
 800777a:	81fb      	strh	r3, [r7, #14]
	return b;
 800777c:	89fb      	ldrh	r3, [r7, #14]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <inv_orientation_matrix_to_scalar>:
* the column the one is on for the second row with bit number 5 being the sign.
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

	scalar = inv_row_2_scale(mtx);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ffb8 	bl	8007708 <inv_row_2_scale>
 8007798:	4603      	mov	r3, r0
 800779a:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 3) << 3;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3303      	adds	r3, #3
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ffb1 	bl	8007708 <inv_row_2_scale>
 80077a6:	4603      	mov	r3, r0
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	b21a      	sxth	r2, r3
 80077ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b21b      	sxth	r3, r3
 80077b4:	81fb      	strh	r3, [r7, #14]
	scalar |= inv_row_2_scale(mtx + 6) << 6;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3306      	adds	r3, #6
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ffa4 	bl	8007708 <inv_row_2_scale>
 80077c0:	4603      	mov	r3, r0
 80077c2:	019b      	lsls	r3, r3, #6
 80077c4:	b21a      	sxth	r2, r3
 80077c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	b21b      	sxth	r3, r3
 80077ce:	81fb      	strh	r3, [r7, #14]

	return scalar;
 80077d0:	89fb      	ldrh	r3, [r7, #14]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <mpu_i2c_init>:
#include "mpu_drv.h"
#include "stm32f4xx.h"
// Hold pointer to initialized HAL I2C device
static I2C_HandleTypeDef * mpu_hi2c;

void mpu_i2c_init(I2C_HandleTypeDef *hi2c) {
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	mpu_hi2c = hi2c;
 80077e4:	4a04      	ldr	r2, [pc, #16]	; (80077f8 <mpu_i2c_init+0x1c>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6013      	str	r3, [r2, #0]
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20000340 	.word	0x20000340

080077fc <mpu_i2c_write>:

inline int mpu_i2c_write(unsigned char slave_addr,
        unsigned char reg_addr,
        unsigned char length,
        unsigned char const *data) {
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af04      	add	r7, sp, #16
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4603      	mov	r3, r0
 8007806:	71fb      	strb	r3, [r7, #7]
 8007808:	460b      	mov	r3, r1
 800780a:	71bb      	strb	r3, [r7, #6]
 800780c:	4613      	mov	r3, r2
 800780e:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(mpu_hi2c, slave_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <mpu_i2c_write+0x44>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	79fb      	ldrb	r3, [r7, #7]
 8007816:	b29b      	uxth	r3, r3
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	b299      	uxth	r1, r3
 800781c:	79bb      	ldrb	r3, [r7, #6]
 800781e:	b29c      	uxth	r4, r3
 8007820:	797b      	ldrb	r3, [r7, #5]
 8007822:	b29b      	uxth	r3, r3
 8007824:	2264      	movs	r2, #100	; 0x64
 8007826:	9202      	str	r2, [sp, #8]
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	2301      	movs	r3, #1
 8007830:	4622      	mov	r2, r4
 8007832:	f7fb fa27 	bl	8002c84 <HAL_I2C_Mem_Write>
 8007836:	4603      	mov	r3, r0
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bd90      	pop	{r4, r7, pc}
 8007840:	20000340 	.word	0x20000340

08007844 <mpu_i2c_read>:

inline int mpu_i2c_read(unsigned char slave_addr,
        unsigned char reg_addr,
        unsigned char length,
        unsigned char *data) {
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b087      	sub	sp, #28
 8007848:	af04      	add	r7, sp, #16
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4603      	mov	r3, r0
 800784e:	71fb      	strb	r3, [r7, #7]
 8007850:	460b      	mov	r3, r1
 8007852:	71bb      	strb	r3, [r7, #6]
 8007854:	4613      	mov	r3, r2
 8007856:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(mpu_hi2c, slave_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 8007858:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <mpu_i2c_read+0x44>)
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	b29b      	uxth	r3, r3
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	b299      	uxth	r1, r3
 8007864:	79bb      	ldrb	r3, [r7, #6]
 8007866:	b29c      	uxth	r4, r3
 8007868:	797b      	ldrb	r3, [r7, #5]
 800786a:	b29b      	uxth	r3, r3
 800786c:	2264      	movs	r2, #100	; 0x64
 800786e:	9202      	str	r2, [sp, #8]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	2301      	movs	r3, #1
 8007878:	4622      	mov	r2, r4
 800787a:	f7fb fafd 	bl	8002e78 <HAL_I2C_Mem_Read>
 800787e:	4603      	mov	r3, r0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bd90      	pop	{r4, r7, pc}
 8007888:	20000340 	.word	0x20000340

0800788c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800789a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789e:	2b84      	cmp	r3, #132	; 0x84
 80078a0:	d005      	beq.n	80078ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	3303      	adds	r3, #3
 80078ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078ae:	68fb      	ldr	r3, [r7, #12]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c2:	f3ef 8305 	mrs	r3, IPSR
 80078c6:	607b      	str	r3, [r7, #4]
  return(result);
 80078c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078e4:	f001 fa5c 	bl	8008da0 <vTaskStartScheduler>
  
  return osOK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	bd80      	pop	{r7, pc}

080078ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078f0:	b089      	sub	sp, #36	; 0x24
 80078f2:	af04      	add	r7, sp, #16
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <osThreadCreate+0x54>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01c      	beq.n	8007942 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685c      	ldr	r4, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681d      	ldr	r5, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691e      	ldr	r6, [r3, #16]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ffb6 	bl	800788c <makeFreeRtosPriority>
 8007920:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800792a:	9202      	str	r2, [sp, #8]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	9100      	str	r1, [sp, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	4632      	mov	r2, r6
 8007934:	4629      	mov	r1, r5
 8007936:	4620      	mov	r0, r4
 8007938:	f000 ffe9 	bl	800890e <xTaskCreateStatic>
 800793c:	4603      	mov	r3, r0
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	e01c      	b.n	800797c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685c      	ldr	r4, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800794e:	b29e      	uxth	r6, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff ff98 	bl	800788c <makeFreeRtosPriority>
 800795c:	4602      	mov	r2, r0
 800795e:	f107 030c 	add.w	r3, r7, #12
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	9200      	str	r2, [sp, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	4632      	mov	r2, r6
 800796a:	4629      	mov	r1, r5
 800796c:	4620      	mov	r0, r4
 800796e:	f001 f827 	bl	80089c0 <xTaskCreate>
 8007972:	4603      	mov	r3, r0
 8007974:	2b01      	cmp	r3, #1
 8007976:	d001      	beq.n	800797c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800797c:	68fb      	ldr	r3, [r7, #12]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007986 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 f944 	bl	8008c1c <vTaskDelete>
  return osOK;
 8007994:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <osDelay+0x16>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	e000      	b.n	80079b6 <osDelay+0x18>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 f9be 	bl	8008d38 <vTaskDelay>
  
  return osOK;
 80079bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	3303      	adds	r3, #3
 80079d4:	f023 0303 	bic.w	r3, r3, #3
 80079d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80079da:	2014      	movs	r0, #20
 80079dc:	f002 f928 	bl	8009c30 <pvPortMalloc>
 80079e0:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d046      	beq.n	8007a76 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f002 f915 	bl	8009c30 <pvPortMalloc>
 8007a06:	4602      	mov	r2, r0
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02b      	beq.n	8007a6c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f002 f906 	bl	8009c30 <pvPortMalloc>
 8007a24:	4602      	mov	r2, r0
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d011      	beq.n	8007a56 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	e008      	b.n	8007a4a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3301      	adds	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d3f1      	bcc.n	8007a38 <osPoolCreate+0x72>
 8007a54:	e00f      	b.n	8007a76 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f002 f9ae 	bl	8009dbc <vPortFree>
        vPortFree(thePool);
 8007a60:	6978      	ldr	r0, [r7, #20]
 8007a62:	f002 f9ab 	bl	8009dbc <vPortFree>
        thePool = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e004      	b.n	8007a76 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007a6c:	6978      	ldr	r0, [r7, #20]
 8007a6e:	f002 f9a5 	bl	8009dbc <vPortFree>
      thePool = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007a76:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007a90:	f7ff ff14 	bl	80078bc <inHandlerMode>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	617a      	str	r2, [r7, #20]
 8007ab0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ab2:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab6:	e001      	b.n	8007abc <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8007ab8:	f001 ffa0 	bl	80099fc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007abc:	2300      	movs	r3, #0
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e029      	b.n	8007b16 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d301      	bcc.n	8007ada <osPoolAlloc+0x5a>
      index = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d113      	bne.n	8007b10 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	4413      	add	r3, r2
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4619      	mov	r1, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	440b      	add	r3, r1
 8007b06:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	611a      	str	r2, [r3, #16]
      break;
 8007b0e:	e007      	b.n	8007b20 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3d0      	bcc.n	8007ac2 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8007b20:	f7ff fecc 	bl	80078bc <inHandlerMode>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	e001      	b.n	8007b3a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8007b36:	f001 ff8f 	bl	8009a58 <vPortExitCritical>
  }
  
  return p;
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <osPoolFree+0x14>
    return osErrorParameter;
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	e030      	b.n	8007bba <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <osPoolFree+0x1e>
    return osErrorParameter;
 8007b5e:	2380      	movs	r3, #128	; 0x80
 8007b60:	e02b      	b.n	8007bba <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d201      	bcs.n	8007b70 <osPoolFree+0x2c>
    return osErrorParameter;
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	e024      	b.n	8007bba <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b84:	fb02 f201 	mul.w	r2, r2, r1
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <osPoolFree+0x4e>
    return osErrorParameter;
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	e013      	b.n	8007bba <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d301      	bcc.n	8007bac <osPoolFree+0x68>
    return osErrorParameter;
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	e006      	b.n	8007bba <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007bc6:	b590      	push	{r4, r7, lr}
 8007bc8:	b087      	sub	sp, #28
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689c      	ldr	r4, [r3, #8]
 8007be4:	200c      	movs	r0, #12
 8007be6:	f002 f823 	bl	8009c30 <pvPortMalloc>
 8007bea:	4603      	mov	r3, r0
 8007bec:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <osMailCreate+0x36>
    return NULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e038      	b.n	8007c6e <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	2104      	movs	r1, #4
 8007c14:	f000 fa28 	bl	8008068 <xQueueGenericCreate>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f002 f8c4 	bl	8009dbc <vPortFree>
    return NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	e01a      	b.n	8007c6e <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	681c      	ldr	r4, [r3, #0]
 8007c3e:	f107 030c 	add.w	r3, r7, #12
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff febf 	bl	80079c6 <osPoolCreate>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d107      	bne.n	8007c68 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f002 f8ac 	bl	8009dbc <vPortFree>
    return NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e002      	b.n	8007c6e <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd90      	pop	{r4, r7, pc}

08007c76 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <osMailAlloc+0x14>
    return NULL;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e006      	b.n	8007c98 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fef6 	bl	8007a80 <osPoolAlloc>
 8007c94:	60f8      	str	r0, [r7, #12]
  
  return p;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <osMailPut+0x14>
    return osErrorParameter;
 8007cb0:	2380      	movs	r3, #128	; 0x80
 8007cb2:	e02c      	b.n	8007d0e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8007cb8:	f7ff fe00 	bl	80078bc <inHandlerMode>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d018      	beq.n	8007cf4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6858      	ldr	r0, [r3, #4]
 8007cc6:	f107 020c 	add.w	r2, r7, #12
 8007cca:	4639      	mov	r1, r7
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f000 fb21 	bl	8008314 <xQueueGenericSendFromISR>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d001      	beq.n	8007cdc <osMailPut+0x3c>
      return osErrorOS;
 8007cd8:	23ff      	movs	r3, #255	; 0xff
 8007cda:	e018      	b.n	8007d0e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d014      	beq.n	8007d0c <osMailPut+0x6c>
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <osMailPut+0x78>)
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e00b      	b.n	8007d0c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6858      	ldr	r0, [r3, #4]
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f000 fa0f 	bl	8008120 <xQueueGenericSend>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <osMailPut+0x6c>
      return osErrorOS;
 8007d08:	23ff      	movs	r3, #255	; 0xff
 8007d0a:	e000      	b.n	8007d0e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b08b      	sub	sp, #44	; 0x2c
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	617b      	str	r3, [r7, #20]
    return event;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	461c      	mov	r4, r3
 8007d3a:	f107 0314 	add.w	r3, r7, #20
 8007d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d46:	e056      	b.n	8007df6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d103      	bne.n	8007d60 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5e:	e009      	b.n	8007d74 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d006      	beq.n	8007d74 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <osMailGet+0x58>
      ticks = 1;
 8007d70:	2301      	movs	r3, #1
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007d74:	f7ff fda2 	bl	80078bc <inHandlerMode>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01d      	beq.n	8007dba <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6858      	ldr	r0, [r3, #4]
 8007d82:	f107 0220 	add.w	r2, r7, #32
 8007d86:	f107 0314 	add.w	r3, r7, #20
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f000 fc31 	bl	80085f4 <xQueueReceiveFromISR>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d102      	bne.n	8007d9e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8007d98:	2320      	movs	r3, #32
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e001      	b.n	8007da2 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01e      	beq.n	8007de6 <osMailGet+0xca>
 8007da8:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <osMailGet+0xe4>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	e015      	b.n	8007de6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6858      	ldr	r0, [r3, #4]
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	f000 fb38 	bl	800843c <xQueueReceive>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d102      	bne.n	8007dd8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e006      	b.n	8007de6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <osMailGet+0xc6>
 8007dde:	2300      	movs	r3, #0
 8007de0:	e000      	b.n	8007de4 <osMailGet+0xc8>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	461c      	mov	r4, r3
 8007dea:	f107 0314 	add.w	r3, r7, #20
 8007dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	372c      	adds	r7, #44	; 0x2c
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd90      	pop	{r4, r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <osMailFree+0x14>
    return osErrorParameter;
 8007e14:	2380      	movs	r3, #128	; 0x80
 8007e16:	e006      	b.n	8007e26 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fe90 	bl	8007b44 <osPoolFree>
 8007e24:	4603      	mov	r3, r0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f103 0208 	add.w	r2, r3, #8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f103 0208 	add.w	r2, r3, #8
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f103 0208 	add.w	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d103      	bne.n	8007ef0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e00c      	b.n	8007f0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	e002      	b.n	8007efe <vListInsert+0x2e>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d2f6      	bcs.n	8007ef8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6892      	ldr	r2, [r2, #8]
 8007f58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6852      	ldr	r2, [r2, #4]
 8007f62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d103      	bne.n	8007f76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	1e5a      	subs	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <xQueueGenericReset+0x28>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	e7fe      	b.n	8007fbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007fc0:	f001 fd1c 	bl	80099fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	68f9      	ldr	r1, [r7, #12]
 8007fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ff6:	fb01 f303 	mul.w	r3, r1, r3
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	22ff      	movs	r2, #255	; 0xff
 8008004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	22ff      	movs	r2, #255	; 0xff
 800800c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d114      	bne.n	8008040 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01a      	beq.n	8008054 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3310      	adds	r3, #16
 8008022:	4618      	mov	r0, r3
 8008024:	f001 f8fe 	bl	8009224 <xTaskRemoveFromEventList>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d012      	beq.n	8008054 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <xQueueGenericReset+0xcc>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	e009      	b.n	8008054 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3310      	adds	r3, #16
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fef2 	bl	8007e2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3324      	adds	r3, #36	; 0x24
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff feed 	bl	8007e2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008054:	f001 fd00 	bl	8009a58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008058:	2301      	movs	r3, #1
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	e000ed04 	.word	0xe000ed04

08008068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	; 0x28
 800806c:	af02      	add	r7, sp, #8
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <xQueueGenericCreate+0x28>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	e7fe      	b.n	800808e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008096:	2300      	movs	r3, #0
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e004      	b.n	80080a6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	fb02 f303 	mul.w	r3, r2, r3
 80080a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3348      	adds	r3, #72	; 0x48
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fdc0 	bl	8009c30 <pvPortMalloc>
 80080b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00f      	beq.n	80080d8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	3348      	adds	r3, #72	; 0x48
 80080bc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 f805 	bl	80080e2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80080d8:	69bb      	ldr	r3, [r7, #24]
	}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	e002      	b.n	8008104 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008110:	2101      	movs	r1, #1
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f7ff ff40 	bl	8007f98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	; 0x38
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800812e:	2300      	movs	r3, #0
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <xQueueGenericSend+0x30>
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	62bb      	str	r3, [r7, #40]	; 0x28
 800814e:	e7fe      	b.n	800814e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <xQueueGenericSend+0x3e>
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xQueueGenericSend+0x42>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xQueueGenericSend+0x44>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d109      	bne.n	800817c <xQueueGenericSend+0x5c>
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
 800817a:	e7fe      	b.n	800817a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x6a>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <xQueueGenericSend+0x6e>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueGenericSend+0x70>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <xQueueGenericSend+0x88>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	e7fe      	b.n	80081a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081a8:	f001 f9f8 	bl	800959c <xTaskGetSchedulerState>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <xQueueGenericSend+0x98>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <xQueueGenericSend+0x9c>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <xQueueGenericSend+0x9e>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <xQueueGenericSend+0xb6>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	61fb      	str	r3, [r7, #28]
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081d6:	f001 fc11 	bl	80099fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d302      	bcc.n	80081ec <xQueueGenericSend+0xcc>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d129      	bne.n	8008240 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f2:	f000 fa7c 	bl	80086ee <prvCopyDataToQueue>
 80081f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d010      	beq.n	8008222 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	3324      	adds	r3, #36	; 0x24
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f80d 	bl	8009224 <xTaskRemoveFromEventList>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d013      	beq.n	8008238 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008210:	4b3f      	ldr	r3, [pc, #252]	; (8008310 <xQueueGenericSend+0x1f0>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	e00a      	b.n	8008238 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008228:	4b39      	ldr	r3, [pc, #228]	; (8008310 <xQueueGenericSend+0x1f0>)
 800822a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008238:	f001 fc0e 	bl	8009a58 <vPortExitCritical>
				return pdPASS;
 800823c:	2301      	movs	r3, #1
 800823e:	e063      	b.n	8008308 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008246:	f001 fc07 	bl	8009a58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800824a:	2300      	movs	r3, #0
 800824c:	e05c      	b.n	8008308 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f845 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800825e:	2301      	movs	r3, #1
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008262:	f001 fbf9 	bl	8009a58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008266:	f000 fdf9 	bl	8008e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800826a:	f001 fbc7 	bl	80099fc <vPortEnterCritical>
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008274:	b25b      	sxtb	r3, r3
 8008276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827a:	d103      	bne.n	8008284 <xQueueGenericSend+0x164>
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800828a:	b25b      	sxtb	r3, r3
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d103      	bne.n	800829a <xQueueGenericSend+0x17a>
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800829a:	f001 fbdd 	bl	8009a58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800829e:	1d3a      	adds	r2, r7, #4
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 f834 	bl	8009314 <xTaskCheckForTimeOut>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d124      	bne.n	80082fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b4:	f000 fb13 	bl	80088de <prvIsQueueFull>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d018      	beq.n	80082f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	3310      	adds	r3, #16
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 ff88 	bl	80091dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ce:	f000 fa9e 	bl	800880e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082d2:	f000 fdd1 	bl	8008e78 <xTaskResumeAll>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f af7c 	bne.w	80081d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <xQueueGenericSend+0x1f0>)
 80082e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	e772      	b.n	80081d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082f2:	f000 fa8c 	bl	800880e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082f6:	f000 fdbf 	bl	8008e78 <xTaskResumeAll>
 80082fa:	e76c      	b.n	80081d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082fe:	f000 fa86 	bl	800880e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008302:	f000 fdb9 	bl	8008e78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008306:	2300      	movs	r3, #0
		}
	}
}
 8008308:	4618      	mov	r0, r3
 800830a:	3738      	adds	r7, #56	; 0x38
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08e      	sub	sp, #56	; 0x38
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <xQueueGenericSendFromISR+0x2c>
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
 800833e:	e7fe      	b.n	800833e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <xQueueGenericSendFromISR+0x3a>
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <xQueueGenericSendFromISR+0x3e>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueGenericSendFromISR+0x40>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d109      	bne.n	800836c <xQueueGenericSendFromISR+0x58>
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	623b      	str	r3, [r7, #32]
 800836a:	e7fe      	b.n	800836a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d103      	bne.n	800837a <xQueueGenericSendFromISR+0x66>
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <xQueueGenericSendFromISR+0x6a>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericSendFromISR+0x6c>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <xQueueGenericSendFromISR+0x84>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e7fe      	b.n	8008396 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008398:	f001 fc0c 	bl	8009bb4 <vPortValidateInterruptPriority>
	__asm volatile
 800839c:	f3ef 8211 	mrs	r2, BASEPRI
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61ba      	str	r2, [r7, #24]
 80083b2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80083b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d302      	bcc.n	80083ca <xQueueGenericSendFromISR+0xb6>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d12c      	bne.n	8008424 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083da:	f000 f988 	bl	80086ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d112      	bne.n	800840e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d016      	beq.n	800841e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	3324      	adds	r3, #36	; 0x24
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 ff15 	bl	8009224 <xTaskRemoveFromEventList>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	e007      	b.n	800841e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800840e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008412:	3301      	adds	r3, #1
 8008414:	b2db      	uxtb	r3, r3
 8008416:	b25a      	sxtb	r2, r3
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008422:	e001      	b.n	8008428 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008424:	2300      	movs	r3, #0
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008434:	4618      	mov	r0, r3
 8008436:	3738      	adds	r7, #56	; 0x38
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <xQueueReceive+0x2e>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	623b      	str	r3, [r7, #32]
 8008468:	e7fe      	b.n	8008468 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d103      	bne.n	8008478 <xQueueReceive+0x3c>
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <xQueueReceive+0x40>
 8008478:	2301      	movs	r3, #1
 800847a:	e000      	b.n	800847e <xQueueReceive+0x42>
 800847c:	2300      	movs	r3, #0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <xQueueReceive+0x5a>
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	e7fe      	b.n	8008494 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008496:	f001 f881 	bl	800959c <xTaskGetSchedulerState>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <xQueueReceive+0x6a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <xQueueReceive+0x6e>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <xQueueReceive+0x70>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <xQueueReceive+0x88>
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	e7fe      	b.n	80084c2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c4:	f001 fa9a 	bl	80099fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01f      	beq.n	8008514 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d8:	f000 f973 	bl	80087c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	1e5a      	subs	r2, r3, #1
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00f      	beq.n	800850c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	3310      	adds	r3, #16
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fe97 	bl	8009224 <xTaskRemoveFromEventList>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d007      	beq.n	800850c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084fc:	4b3c      	ldr	r3, [pc, #240]	; (80085f0 <xQueueReceive+0x1b4>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800850c:	f001 faa4 	bl	8009a58 <vPortExitCritical>
				return pdPASS;
 8008510:	2301      	movs	r3, #1
 8008512:	e069      	b.n	80085e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d103      	bne.n	8008522 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800851a:	f001 fa9d 	bl	8009a58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800851e:	2300      	movs	r3, #0
 8008520:	e062      	b.n	80085e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008528:	f107 0310 	add.w	r3, r7, #16
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fedb 	bl	80092e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008532:	2301      	movs	r3, #1
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008536:	f001 fa8f 	bl	8009a58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800853a:	f000 fc8f 	bl	8008e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800853e:	f001 fa5d 	bl	80099fc <vPortEnterCritical>
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008548:	b25b      	sxtb	r3, r3
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d103      	bne.n	8008558 <xQueueReceive+0x11c>
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800855e:	b25b      	sxtb	r3, r3
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d103      	bne.n	800856e <xQueueReceive+0x132>
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800856e:	f001 fa73 	bl	8009a58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008572:	1d3a      	adds	r2, r7, #4
 8008574:	f107 0310 	add.w	r3, r7, #16
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f000 feca 	bl	8009314 <xTaskCheckForTimeOut>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d123      	bne.n	80085ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008588:	f000 f993 	bl	80088b2 <prvIsQueueEmpty>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d017      	beq.n	80085c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	3324      	adds	r3, #36	; 0x24
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fe1e 	bl	80091dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a2:	f000 f934 	bl	800880e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085a6:	f000 fc67 	bl	8008e78 <xTaskResumeAll>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d189      	bne.n	80084c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80085b0:	4b0f      	ldr	r3, [pc, #60]	; (80085f0 <xQueueReceive+0x1b4>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	e780      	b.n	80084c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	f000 f923 	bl	800880e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085c8:	f000 fc56 	bl	8008e78 <xTaskResumeAll>
 80085cc:	e77a      	b.n	80084c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d0:	f000 f91d 	bl	800880e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085d4:	f000 fc50 	bl	8008e78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085da:	f000 f96a 	bl	80088b2 <prvIsQueueEmpty>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f43f af6f 	beq.w	80084c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3730      	adds	r7, #48	; 0x30
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08e      	sub	sp, #56	; 0x38
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <xQueueReceiveFromISR+0x2a>
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	623b      	str	r3, [r7, #32]
 800861c:	e7fe      	b.n	800861c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <xQueueReceiveFromISR+0x38>
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <xQueueReceiveFromISR+0x3c>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <xQueueReceiveFromISR+0x3e>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <xQueueReceiveFromISR+0x56>
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e7fe      	b.n	8008648 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800864a:	f001 fab3 	bl	8009bb4 <vPortValidateInterruptPriority>
	__asm volatile
 800864e:	f3ef 8211 	mrs	r2, BASEPRI
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	61ba      	str	r2, [r7, #24]
 8008664:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008666:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008668:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d02f      	beq.n	80086d6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800867c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008684:	f000 f89d 	bl	80087c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d112      	bne.n	80086c0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d016      	beq.n	80086d0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	3310      	adds	r3, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fdbc 	bl	8009224 <xTaskRemoveFromEventList>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00e      	beq.n	80086d0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e007      	b.n	80086d0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086c4:	3301      	adds	r3, #1
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	b25a      	sxtb	r2, r3
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80086d0:	2301      	movs	r3, #1
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
 80086d4:	e001      	b.n	80086da <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3738      	adds	r7, #56	; 0x38
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d14d      	bne.n	80087b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 ff5d 	bl	80095d8 <xTaskPriorityDisinherit>
 800871e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	e043      	b.n	80087b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d119      	bne.n	8008762 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6898      	ldr	r0, [r3, #8]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	461a      	mov	r2, r3
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	f001 fc8c 	bl	800a056 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d32b      	bcc.n	80087b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	e026      	b.n	80087b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68d8      	ldr	r0, [r3, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	461a      	mov	r2, r3
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	f001 fc72 	bl	800a056 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	425b      	negs	r3, r3
 800877c:	441a      	add	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d207      	bcs.n	800879e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	425b      	negs	r3, r3
 8008798:	441a      	add	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d105      	bne.n	80087b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087b8:	697b      	ldr	r3, [r7, #20]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d018      	beq.n	8008806 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	441a      	add	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d303      	bcc.n	80087f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68d9      	ldr	r1, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	461a      	mov	r2, r3
 8008800:	6838      	ldr	r0, [r7, #0]
 8008802:	f001 fc28 	bl	800a056 <memcpy>
	}
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008816:	f001 f8f1 	bl	80099fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008820:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008822:	e011      	b.n	8008848 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d012      	beq.n	8008852 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3324      	adds	r3, #36	; 0x24
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fcf7 	bl	8009224 <xTaskRemoveFromEventList>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800883c:	f000 fdca 	bl	80093d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	3b01      	subs	r3, #1
 8008844:	b2db      	uxtb	r3, r3
 8008846:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dce9      	bgt.n	8008824 <prvUnlockQueue+0x16>
 8008850:	e000      	b.n	8008854 <prvUnlockQueue+0x46>
					break;
 8008852:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	22ff      	movs	r2, #255	; 0xff
 8008858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800885c:	f001 f8fc 	bl	8009a58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008860:	f001 f8cc 	bl	80099fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800886a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800886c:	e011      	b.n	8008892 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d012      	beq.n	800889c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3310      	adds	r3, #16
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fcd2 	bl	8009224 <xTaskRemoveFromEventList>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008886:	f000 fda5 	bl	80093d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	3b01      	subs	r3, #1
 800888e:	b2db      	uxtb	r3, r3
 8008890:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008896:	2b00      	cmp	r3, #0
 8008898:	dce9      	bgt.n	800886e <prvUnlockQueue+0x60>
 800889a:	e000      	b.n	800889e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800889c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	22ff      	movs	r2, #255	; 0xff
 80088a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088a6:	f001 f8d7 	bl	8009a58 <vPortExitCritical>
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088ba:	f001 f89f 	bl	80099fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088c6:	2301      	movs	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e001      	b.n	80088d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088d0:	f001 f8c2 	bl	8009a58 <vPortExitCritical>

	return xReturn;
 80088d4:	68fb      	ldr	r3, [r7, #12]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088e6:	f001 f889 	bl	80099fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d102      	bne.n	80088fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e001      	b.n	8008900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008900:	f001 f8aa 	bl	8009a58 <vPortExitCritical>

	return xReturn;
 8008904:	68fb      	ldr	r3, [r7, #12]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800890e:	b580      	push	{r7, lr}
 8008910:	b08e      	sub	sp, #56	; 0x38
 8008912:	af04      	add	r7, sp, #16
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800891c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <xTaskCreateStatic+0x28>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	e7fe      	b.n	8008934 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <xTaskCreateStatic+0x42>
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	e7fe      	b.n	800894e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008950:	2354      	movs	r3, #84	; 0x54
 8008952:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b54      	cmp	r3, #84	; 0x54
 8008958:	d009      	beq.n	800896e <xTaskCreateStatic+0x60>
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e7fe      	b.n	800896c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01e      	beq.n	80089b2 <xTaskCreateStatic+0xa4>
 8008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01b      	beq.n	80089b2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008982:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	2202      	movs	r2, #2
 8008988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800898c:	2300      	movs	r3, #0
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f850 	bl	8008a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ac:	f000 f8cc 	bl	8008b48 <prvAddNewTaskToReadyList>
 80089b0:	e001      	b.n	80089b6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3728      	adds	r7, #40	; 0x28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08c      	sub	sp, #48	; 0x30
 80089c4:	af04      	add	r7, sp, #16
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 f92b 	bl	8009c30 <pvPortMalloc>
 80089da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80089e2:	2054      	movs	r0, #84	; 0x54
 80089e4:	f001 f924 	bl	8009c30 <pvPortMalloc>
 80089e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30
 80089f6:	e005      	b.n	8008a04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089f8:	6978      	ldr	r0, [r7, #20]
 80089fa:	f001 f9df 	bl	8009dbc <vPortFree>
 80089fe:	e001      	b.n	8008a04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d017      	beq.n	8008a3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	2300      	movs	r3, #0
 8008a16:	9303      	str	r3, [sp, #12]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	9302      	str	r3, [sp, #8]
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f80e 	bl	8008a4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a2e:	69f8      	ldr	r0, [r7, #28]
 8008a30:	f000 f88a 	bl	8008b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a34:	2301      	movs	r3, #1
 8008a36:	61bb      	str	r3, [r7, #24]
 8008a38:	e002      	b.n	8008a40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a40:	69bb      	ldr	r3, [r7, #24]
	}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b088      	sub	sp, #32
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
 8008a56:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a62:	3b01      	subs	r3, #1
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	f023 0307 	bic.w	r3, r3, #7
 8008a70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <prvInitialiseNewTask+0x46>
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	e7fe      	b.n	8008a8e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a90:	2300      	movs	r3, #0
 8008a92:	61fb      	str	r3, [r7, #28]
 8008a94:	e012      	b.n	8008abc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	7819      	ldrb	r1, [r3, #0]
 8008a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3334      	adds	r3, #52	; 0x34
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d006      	beq.n	8008ac4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d9e9      	bls.n	8008a96 <prvInitialiseNewTask+0x4c>
 8008ac2:	e000      	b.n	8008ac6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8008ac4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	2b06      	cmp	r3, #6
 8008ad2:	d901      	bls.n	8008ad8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ad4:	2306      	movs	r3, #6
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff f9bd 	bl	8007e6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	3318      	adds	r3, #24
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff f9b8 	bl	8007e6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b06:	f1c3 0207 	rsb	r2, r3, #7
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f000 fe40 	bl	80097ac <pxPortInitialiseStack>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b50:	f000 ff54 	bl	80099fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b54:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <prvAddNewTaskToReadyList+0xb8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <prvAddNewTaskToReadyList+0xb8>)
 8008b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b5e:	4b29      	ldr	r3, [pc, #164]	; (8008c04 <prvAddNewTaskToReadyList+0xbc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b66:	4a27      	ldr	r2, [pc, #156]	; (8008c04 <prvAddNewTaskToReadyList+0xbc>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b6c:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <prvAddNewTaskToReadyList+0xb8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d110      	bne.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b74:	f000 fc52 	bl	800941c <prvInitialiseTaskLists>
 8008b78:	e00d      	b.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <prvAddNewTaskToReadyList+0xc0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b82:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <prvAddNewTaskToReadyList+0xbc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d802      	bhi.n	8008b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b90:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <prvAddNewTaskToReadyList+0xbc>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b96:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <prvAddNewTaskToReadyList+0xc4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <prvAddNewTaskToReadyList+0xc4>)
 8008b9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	409a      	lsls	r2, r3
 8008ba8:	4b19      	ldr	r3, [pc, #100]	; (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	4a18      	ldr	r2, [pc, #96]	; (8008c10 <prvAddNewTaskToReadyList+0xc8>)
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4a15      	ldr	r2, [pc, #84]	; (8008c14 <prvAddNewTaskToReadyList+0xcc>)
 8008bc0:	441a      	add	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f7ff f95d 	bl	8007e88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bce:	f000 ff43 	bl	8009a58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <prvAddNewTaskToReadyList+0xc0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00e      	beq.n	8008bf8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <prvAddNewTaskToReadyList+0xbc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d207      	bcs.n	8008bf8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008be8:	4b0b      	ldr	r3, [pc, #44]	; (8008c18 <prvAddNewTaskToReadyList+0xd0>)
 8008bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000444 	.word	0x20000444
 8008c04:	20000344 	.word	0x20000344
 8008c08:	20000450 	.word	0x20000450
 8008c0c:	20000460 	.word	0x20000460
 8008c10:	2000044c 	.word	0x2000044c
 8008c14:	20000348 	.word	0x20000348
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008c24:	f000 feea 	bl	80099fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <vTaskDelete+0x18>
 8008c2e:	4b38      	ldr	r3, [pc, #224]	; (8008d10 <vTaskDelete+0xf4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	e000      	b.n	8008c36 <vTaskDelete+0x1a>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff f980 	bl	8007f42 <uxListRemove>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d115      	bne.n	8008c74 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4c:	4931      	ldr	r1, [pc, #196]	; (8008d14 <vTaskDelete+0xf8>)
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <vTaskDelete+0x58>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	2201      	movs	r2, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	43da      	mvns	r2, r3
 8008c6a:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <vTaskDelete+0xfc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	4a29      	ldr	r2, [pc, #164]	; (8008d18 <vTaskDelete+0xfc>)
 8008c72:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3318      	adds	r3, #24
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff f95e 	bl	8007f42 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008c86:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <vTaskDelete+0x100>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	4a23      	ldr	r2, [pc, #140]	; (8008d1c <vTaskDelete+0x100>)
 8008c8e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008c90:	4b1f      	ldr	r3, [pc, #124]	; (8008d10 <vTaskDelete+0xf4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d10b      	bne.n	8008cb2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	481f      	ldr	r0, [pc, #124]	; (8008d20 <vTaskDelete+0x104>)
 8008ca2:	f7ff f8f1 	bl	8007e88 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008ca6:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <vTaskDelete+0x108>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <vTaskDelete+0x108>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e009      	b.n	8008cc6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <vTaskDelete+0x10c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	4a1b      	ldr	r2, [pc, #108]	; (8008d28 <vTaskDelete+0x10c>)
 8008cba:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fc19 	bl	80094f4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008cc2:	f000 fc45 	bl	8009550 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008cc6:	f000 fec7 	bl	8009a58 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008cca:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <vTaskDelete+0x110>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01a      	beq.n	8008d08 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <vTaskDelete+0xf4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d115      	bne.n	8008d08 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008cdc:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <vTaskDelete+0x114>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <vTaskDelete+0xdc>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	e7fe      	b.n	8008cf6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <vTaskDelete+0x118>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000344 	.word	0x20000344
 8008d14:	20000348 	.word	0x20000348
 8008d18:	2000044c 	.word	0x2000044c
 8008d1c:	20000460 	.word	0x20000460
 8008d20:	20000418 	.word	0x20000418
 8008d24:	2000042c 	.word	0x2000042c
 8008d28:	20000444 	.word	0x20000444
 8008d2c:	20000450 	.word	0x20000450
 8008d30:	2000046c 	.word	0x2000046c
 8008d34:	e000ed04 	.word	0xe000ed04

08008d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d016      	beq.n	8008d78 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d4a:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <vTaskDelay+0x60>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <vTaskDelay+0x2e>
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	60bb      	str	r3, [r7, #8]
 8008d64:	e7fe      	b.n	8008d64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008d66:	f000 f879 	bl	8008e5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fcb7 	bl	80096e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d72:	f000 f881 	bl	8008e78 <xTaskResumeAll>
 8008d76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <vTaskDelay+0x64>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d8e:	bf00      	nop
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	2000046c 	.word	0x2000046c
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dae:	463a      	mov	r2, r7
 8008db0:	1d39      	adds	r1, r7, #4
 8008db2:	f107 0308 	add.w	r3, r7, #8
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f8 f886 	bl	8000ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	9202      	str	r2, [sp, #8]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	460a      	mov	r2, r1
 8008dce:	491d      	ldr	r1, [pc, #116]	; (8008e44 <vTaskStartScheduler+0xa4>)
 8008dd0:	481d      	ldr	r0, [pc, #116]	; (8008e48 <vTaskStartScheduler+0xa8>)
 8008dd2:	f7ff fd9c 	bl	800890e <xTaskCreateStatic>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	; (8008e4c <vTaskStartScheduler+0xac>)
 8008dda:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ddc:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <vTaskStartScheduler+0xac>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008de4:	2301      	movs	r3, #1
 8008de6:	617b      	str	r3, [r7, #20]
 8008de8:	e001      	b.n	8008dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d115      	bne.n	8008e20 <vTaskStartScheduler+0x80>
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <vTaskStartScheduler+0xb0>)
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e0e:	4b11      	ldr	r3, [pc, #68]	; (8008e54 <vTaskStartScheduler+0xb4>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e14:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <vTaskStartScheduler+0xb8>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e1a:	f000 fd51 	bl	80098c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e1e:	e00d      	b.n	8008e3c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d109      	bne.n	8008e3c <vTaskStartScheduler+0x9c>
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e7fe      	b.n	8008e3a <vTaskStartScheduler+0x9a>
}
 8008e3c:	bf00      	nop
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	0800b438 	.word	0x0800b438
 8008e48:	080093ed 	.word	0x080093ed
 8008e4c:	20000468 	.word	0x20000468
 8008e50:	20000464 	.word	0x20000464
 8008e54:	20000450 	.word	0x20000450
 8008e58:	20000448 	.word	0x20000448

08008e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <vTaskSuspendAll+0x18>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <vTaskSuspendAll+0x18>)
 8008e68:	6013      	str	r3, [r2, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	2000046c 	.word	0x2000046c

08008e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e86:	4b41      	ldr	r3, [pc, #260]	; (8008f8c <xTaskResumeAll+0x114>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <xTaskResumeAll+0x2a>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	e7fe      	b.n	8008ea0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ea2:	f000 fdab 	bl	80099fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ea6:	4b39      	ldr	r3, [pc, #228]	; (8008f8c <xTaskResumeAll+0x114>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	4a37      	ldr	r2, [pc, #220]	; (8008f8c <xTaskResumeAll+0x114>)
 8008eae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb0:	4b36      	ldr	r3, [pc, #216]	; (8008f8c <xTaskResumeAll+0x114>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d161      	bne.n	8008f7c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eb8:	4b35      	ldr	r3, [pc, #212]	; (8008f90 <xTaskResumeAll+0x118>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d05d      	beq.n	8008f7c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ec0:	e02e      	b.n	8008f20 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008ec2:	4b34      	ldr	r3, [pc, #208]	; (8008f94 <xTaskResumeAll+0x11c>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3318      	adds	r3, #24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff f837 	bl	8007f42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff f832 	bl	8007f42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	409a      	lsls	r2, r3
 8008ee6:	4b2c      	ldr	r3, [pc, #176]	; (8008f98 <xTaskResumeAll+0x120>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <xTaskResumeAll+0x120>)
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4a27      	ldr	r2, [pc, #156]	; (8008f9c <xTaskResumeAll+0x124>)
 8008efe:	441a      	add	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3304      	adds	r3, #4
 8008f04:	4619      	mov	r1, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	f7fe ffbe 	bl	8007e88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <xTaskResumeAll+0x128>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008f1a:	4b22      	ldr	r3, [pc, #136]	; (8008fa4 <xTaskResumeAll+0x12c>)
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f20:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <xTaskResumeAll+0x11c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1cc      	bne.n	8008ec2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f2e:	f000 fb0f 	bl	8009550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f32:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <xTaskResumeAll+0x130>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d010      	beq.n	8008f60 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f3e:	f000 f837 	bl	8008fb0 <xTaskIncrementTick>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008f48:	4b16      	ldr	r3, [pc, #88]	; (8008fa4 <xTaskResumeAll+0x12c>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f1      	bne.n	8008f3e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <xTaskResumeAll+0x130>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f60:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <xTaskResumeAll+0x12c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d009      	beq.n	8008f7c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f6c:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <xTaskResumeAll+0x134>)
 8008f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f7c:	f000 fd6c 	bl	8009a58 <vPortExitCritical>

	return xAlreadyYielded;
 8008f80:	68bb      	ldr	r3, [r7, #8]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	2000046c 	.word	0x2000046c
 8008f90:	20000444 	.word	0x20000444
 8008f94:	20000404 	.word	0x20000404
 8008f98:	2000044c 	.word	0x2000044c
 8008f9c:	20000348 	.word	0x20000348
 8008fa0:	20000344 	.word	0x20000344
 8008fa4:	20000458 	.word	0x20000458
 8008fa8:	20000454 	.word	0x20000454
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fba:	4b50      	ldr	r3, [pc, #320]	; (80090fc <xTaskIncrementTick+0x14c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f040 808c 	bne.w	80090dc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fc4:	4b4e      	ldr	r3, [pc, #312]	; (8009100 <xTaskIncrementTick+0x150>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fcc:	4a4c      	ldr	r2, [pc, #304]	; (8009100 <xTaskIncrementTick+0x150>)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11f      	bne.n	8009018 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fd8:	4b4a      	ldr	r3, [pc, #296]	; (8009104 <xTaskIncrementTick+0x154>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <xTaskIncrementTick+0x46>
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	e7fe      	b.n	8008ff4 <xTaskIncrementTick+0x44>
 8008ff6:	4b43      	ldr	r3, [pc, #268]	; (8009104 <xTaskIncrementTick+0x154>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	4b42      	ldr	r3, [pc, #264]	; (8009108 <xTaskIncrementTick+0x158>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a40      	ldr	r2, [pc, #256]	; (8009104 <xTaskIncrementTick+0x154>)
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	4a40      	ldr	r2, [pc, #256]	; (8009108 <xTaskIncrementTick+0x158>)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	4b40      	ldr	r3, [pc, #256]	; (800910c <xTaskIncrementTick+0x15c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3301      	adds	r3, #1
 8009010:	4a3e      	ldr	r2, [pc, #248]	; (800910c <xTaskIncrementTick+0x15c>)
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	f000 fa9c 	bl	8009550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009018:	4b3d      	ldr	r3, [pc, #244]	; (8009110 <xTaskIncrementTick+0x160>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	429a      	cmp	r2, r3
 8009020:	d34d      	bcc.n	80090be <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009022:	4b38      	ldr	r3, [pc, #224]	; (8009104 <xTaskIncrementTick+0x154>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <xTaskIncrementTick+0x80>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <xTaskIncrementTick+0x82>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d004      	beq.n	8009040 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009036:	4b36      	ldr	r3, [pc, #216]	; (8009110 <xTaskIncrementTick+0x160>)
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	601a      	str	r2, [r3, #0]
					break;
 800903e:	e03e      	b.n	80090be <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009040:	4b30      	ldr	r3, [pc, #192]	; (8009104 <xTaskIncrementTick+0x154>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d203      	bcs.n	8009060 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009058:	4a2d      	ldr	r2, [pc, #180]	; (8009110 <xTaskIncrementTick+0x160>)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6013      	str	r3, [r2, #0]
						break;
 800905e:	e02e      	b.n	80090be <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	3304      	adds	r3, #4
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe ff6c 	bl	8007f42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	3318      	adds	r3, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe ff63 	bl	8007f42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	2201      	movs	r2, #1
 8009082:	409a      	lsls	r2, r3
 8009084:	4b23      	ldr	r3, [pc, #140]	; (8009114 <xTaskIncrementTick+0x164>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4313      	orrs	r3, r2
 800908a:	4a22      	ldr	r2, [pc, #136]	; (8009114 <xTaskIncrementTick+0x164>)
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a1f      	ldr	r2, [pc, #124]	; (8009118 <xTaskIncrementTick+0x168>)
 800909c:	441a      	add	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe feef 	bl	8007e88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ae:	4b1b      	ldr	r3, [pc, #108]	; (800911c <xTaskIncrementTick+0x16c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3b4      	bcc.n	8009022 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090bc:	e7b1      	b.n	8009022 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090be:	4b17      	ldr	r3, [pc, #92]	; (800911c <xTaskIncrementTick+0x16c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4914      	ldr	r1, [pc, #80]	; (8009118 <xTaskIncrementTick+0x168>)
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d907      	bls.n	80090e6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e004      	b.n	80090e6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80090dc:	4b10      	ldr	r3, [pc, #64]	; (8009120 <xTaskIncrementTick+0x170>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3301      	adds	r3, #1
 80090e2:	4a0f      	ldr	r2, [pc, #60]	; (8009120 <xTaskIncrementTick+0x170>)
 80090e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <xTaskIncrementTick+0x174>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80090f2:	697b      	ldr	r3, [r7, #20]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	2000046c 	.word	0x2000046c
 8009100:	20000448 	.word	0x20000448
 8009104:	200003fc 	.word	0x200003fc
 8009108:	20000400 	.word	0x20000400
 800910c:	2000045c 	.word	0x2000045c
 8009110:	20000464 	.word	0x20000464
 8009114:	2000044c 	.word	0x2000044c
 8009118:	20000348 	.word	0x20000348
 800911c:	20000344 	.word	0x20000344
 8009120:	20000454 	.word	0x20000454
 8009124:	20000458 	.word	0x20000458

08009128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800912e:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <vTaskSwitchContext+0xa0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009136:	4b25      	ldr	r3, [pc, #148]	; (80091cc <vTaskSwitchContext+0xa4>)
 8009138:	2201      	movs	r2, #1
 800913a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800913c:	e03e      	b.n	80091bc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <vTaskSwitchContext+0xa4>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009144:	4b22      	ldr	r3, [pc, #136]	; (80091d0 <vTaskSwitchContext+0xa8>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	fab3 f383 	clz	r3, r3
 8009150:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	f1c3 031f 	rsb	r3, r3, #31
 8009158:	617b      	str	r3, [r7, #20]
 800915a:	491e      	ldr	r1, [pc, #120]	; (80091d4 <vTaskSwitchContext+0xac>)
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <vTaskSwitchContext+0x5a>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	e7fe      	b.n	8009180 <vTaskSwitchContext+0x58>
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <vTaskSwitchContext+0xac>)
 800918e:	4413      	add	r3, r2
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3308      	adds	r3, #8
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d104      	bne.n	80091b2 <vTaskSwitchContext+0x8a>
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4a07      	ldr	r2, [pc, #28]	; (80091d8 <vTaskSwitchContext+0xb0>)
 80091ba:	6013      	str	r3, [r2, #0]
}
 80091bc:	bf00      	nop
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr
 80091c8:	2000046c 	.word	0x2000046c
 80091cc:	20000458 	.word	0x20000458
 80091d0:	2000044c 	.word	0x2000044c
 80091d4:	20000348 	.word	0x20000348
 80091d8:	20000344 	.word	0x20000344

080091dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <vTaskPlaceOnEventList+0x24>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e7fe      	b.n	80091fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <vTaskPlaceOnEventList+0x44>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3318      	adds	r3, #24
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fe fe61 	bl	8007ed0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800920e:	2101      	movs	r1, #1
 8009210:	6838      	ldr	r0, [r7, #0]
 8009212:	f000 fa65 	bl	80096e0 <prvAddCurrentTaskToDelayedList>
}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000344 	.word	0x20000344

08009224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <xTaskRemoveFromEventList+0x2a>
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e7fe      	b.n	800924c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3318      	adds	r3, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fe75 	bl	8007f42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009258:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <xTaskRemoveFromEventList+0xac>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d11c      	bne.n	800929a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fe6c 	bl	8007f42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	2201      	movs	r2, #1
 8009270:	409a      	lsls	r2, r3
 8009272:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <xTaskRemoveFromEventList+0xb0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4313      	orrs	r3, r2
 8009278:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <xTaskRemoveFromEventList+0xb0>)
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4a13      	ldr	r2, [pc, #76]	; (80092d8 <xTaskRemoveFromEventList+0xb4>)
 800928a:	441a      	add	r2, r3
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	3304      	adds	r3, #4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f7fe fdf8 	bl	8007e88 <vListInsertEnd>
 8009298:	e005      	b.n	80092a6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	3318      	adds	r3, #24
 800929e:	4619      	mov	r1, r3
 80092a0:	480e      	ldr	r0, [pc, #56]	; (80092dc <xTaskRemoveFromEventList+0xb8>)
 80092a2:	f7fe fdf1 	bl	8007e88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092aa:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <xTaskRemoveFromEventList+0xbc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d905      	bls.n	80092c0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <xTaskRemoveFromEventList+0xc0>)
 80092ba:	2201      	movs	r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e001      	b.n	80092c4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80092c4:	697b      	ldr	r3, [r7, #20]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	2000046c 	.word	0x2000046c
 80092d4:	2000044c 	.word	0x2000044c
 80092d8:	20000348 	.word	0x20000348
 80092dc:	20000404 	.word	0x20000404
 80092e0:	20000344 	.word	0x20000344
 80092e4:	20000458 	.word	0x20000458

080092e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <vTaskInternalSetTimeOutState+0x24>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <vTaskInternalSetTimeOutState+0x28>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	2000045c 	.word	0x2000045c
 8009310:	20000448 	.word	0x20000448

08009314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b088      	sub	sp, #32
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d109      	bne.n	8009338 <xTaskCheckForTimeOut+0x24>
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	e7fe      	b.n	8009336 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <xTaskCheckForTimeOut+0x3e>
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e7fe      	b.n	8009350 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009352:	f000 fb53 	bl	80099fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <xTaskCheckForTimeOut+0xb8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d102      	bne.n	8009376 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	e023      	b.n	80093be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <xTaskCheckForTimeOut+0xbc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d007      	beq.n	8009392 <xTaskCheckForTimeOut+0x7e>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	d302      	bcc.n	8009392 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e015      	b.n	80093be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	429a      	cmp	r2, r3
 800939a:	d20b      	bcs.n	80093b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	1ad2      	subs	r2, r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff ff9d 	bl	80092e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	e004      	b.n	80093be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ba:	2301      	movs	r3, #1
 80093bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093be:	f000 fb4b 	bl	8009a58 <vPortExitCritical>

	return xReturn;
 80093c2:	69fb      	ldr	r3, [r7, #28]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20000448 	.word	0x20000448
 80093d0:	2000045c 	.word	0x2000045c

080093d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093d8:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <vTaskMissedYield+0x14>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
}
 80093de:	bf00      	nop
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	20000458 	.word	0x20000458

080093ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f4:	f000 f852 	bl	800949c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <prvIdleTask+0x28>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d9f9      	bls.n	80093f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <prvIdleTask+0x2c>)
 8009402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009410:	e7f0      	b.n	80093f4 <prvIdleTask+0x8>
 8009412:	bf00      	nop
 8009414:	20000348 	.word	0x20000348
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009422:	2300      	movs	r3, #0
 8009424:	607b      	str	r3, [r7, #4]
 8009426:	e00c      	b.n	8009442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4a12      	ldr	r2, [pc, #72]	; (800947c <prvInitialiseTaskLists+0x60>)
 8009434:	4413      	add	r3, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fcf9 	bl	8007e2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3301      	adds	r3, #1
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b06      	cmp	r3, #6
 8009446:	d9ef      	bls.n	8009428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009448:	480d      	ldr	r0, [pc, #52]	; (8009480 <prvInitialiseTaskLists+0x64>)
 800944a:	f7fe fcf0 	bl	8007e2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944e:	480d      	ldr	r0, [pc, #52]	; (8009484 <prvInitialiseTaskLists+0x68>)
 8009450:	f7fe fced 	bl	8007e2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009454:	480c      	ldr	r0, [pc, #48]	; (8009488 <prvInitialiseTaskLists+0x6c>)
 8009456:	f7fe fcea 	bl	8007e2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800945a:	480c      	ldr	r0, [pc, #48]	; (800948c <prvInitialiseTaskLists+0x70>)
 800945c:	f7fe fce7 	bl	8007e2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009460:	480b      	ldr	r0, [pc, #44]	; (8009490 <prvInitialiseTaskLists+0x74>)
 8009462:	f7fe fce4 	bl	8007e2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009466:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <prvInitialiseTaskLists+0x78>)
 8009468:	4a05      	ldr	r2, [pc, #20]	; (8009480 <prvInitialiseTaskLists+0x64>)
 800946a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <prvInitialiseTaskLists+0x7c>)
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <prvInitialiseTaskLists+0x68>)
 8009470:	601a      	str	r2, [r3, #0]
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000348 	.word	0x20000348
 8009480:	200003d4 	.word	0x200003d4
 8009484:	200003e8 	.word	0x200003e8
 8009488:	20000404 	.word	0x20000404
 800948c:	20000418 	.word	0x20000418
 8009490:	20000430 	.word	0x20000430
 8009494:	200003fc 	.word	0x200003fc
 8009498:	20000400 	.word	0x20000400

0800949c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a2:	e019      	b.n	80094d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a4:	f000 faaa 	bl	80099fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <prvCheckTasksWaitingTermination+0x4c>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe fd44 	bl	8007f42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <prvCheckTasksWaitingTermination+0x50>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3b01      	subs	r3, #1
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <prvCheckTasksWaitingTermination+0x50>)
 80094c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c4:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <prvCheckTasksWaitingTermination+0x54>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	4a09      	ldr	r2, [pc, #36]	; (80094f0 <prvCheckTasksWaitingTermination+0x54>)
 80094cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ce:	f000 fac3 	bl	8009a58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f80e 	bl	80094f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <prvCheckTasksWaitingTermination+0x54>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e1      	bne.n	80094a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000418 	.word	0x20000418
 80094ec:	20000444 	.word	0x20000444
 80094f0:	2000042c 	.word	0x2000042c

080094f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009502:	2b00      	cmp	r3, #0
 8009504:	d108      	bne.n	8009518 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fc56 	bl	8009dbc <vPortFree>
				vPortFree( pxTCB );
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc53 	bl	8009dbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009516:	e017      	b.n	8009548 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800951e:	2b01      	cmp	r3, #1
 8009520:	d103      	bne.n	800952a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fc4a 	bl	8009dbc <vPortFree>
	}
 8009528:	e00e      	b.n	8009548 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009530:	2b02      	cmp	r3, #2
 8009532:	d009      	beq.n	8009548 <prvDeleteTCB+0x54>
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	e7fe      	b.n	8009546 <prvDeleteTCB+0x52>
	}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <prvResetNextTaskUnblockTime+0x44>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <prvResetNextTaskUnblockTime+0x14>
 8009560:	2301      	movs	r3, #1
 8009562:	e000      	b.n	8009566 <prvResetNextTaskUnblockTime+0x16>
 8009564:	2300      	movs	r3, #0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800956a:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <prvResetNextTaskUnblockTime+0x48>)
 800956c:	f04f 32ff 	mov.w	r2, #4294967295
 8009570:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009572:	e008      	b.n	8009586 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009574:	4b07      	ldr	r3, [pc, #28]	; (8009594 <prvResetNextTaskUnblockTime+0x44>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	4a05      	ldr	r2, [pc, #20]	; (8009598 <prvResetNextTaskUnblockTime+0x48>)
 8009584:	6013      	str	r3, [r2, #0]
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	200003fc 	.word	0x200003fc
 8009598:	20000464 	.word	0x20000464

0800959c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095a2:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <xTaskGetSchedulerState+0x34>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095aa:	2301      	movs	r3, #1
 80095ac:	607b      	str	r3, [r7, #4]
 80095ae:	e008      	b.n	80095c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b0:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <xTaskGetSchedulerState+0x38>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b8:	2302      	movs	r3, #2
 80095ba:	607b      	str	r3, [r7, #4]
 80095bc:	e001      	b.n	80095c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095c2:	687b      	ldr	r3, [r7, #4]
	}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000450 	.word	0x20000450
 80095d4:	2000046c 	.word	0x2000046c

080095d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d06c      	beq.n	80096c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095ee:	4b39      	ldr	r3, [pc, #228]	; (80096d4 <xTaskPriorityDisinherit+0xfc>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d009      	beq.n	800960c <xTaskPriorityDisinherit+0x34>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	e7fe      	b.n	800960a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <xTaskPriorityDisinherit+0x50>
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60bb      	str	r3, [r7, #8]
 8009626:	e7fe      	b.n	8009626 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962c:	1e5a      	subs	r2, r3, #1
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	429a      	cmp	r2, r3
 800963c:	d044      	beq.n	80096c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009642:	2b00      	cmp	r3, #0
 8009644:	d140      	bne.n	80096c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fc79 	bl	8007f42 <uxListRemove>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d115      	bne.n	8009682 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	491f      	ldr	r1, [pc, #124]	; (80096d8 <xTaskPriorityDisinherit+0x100>)
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10a      	bne.n	8009682 <xTaskPriorityDisinherit+0xaa>
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	2201      	movs	r2, #1
 8009672:	fa02 f303 	lsl.w	r3, r2, r3
 8009676:	43da      	mvns	r2, r3
 8009678:	4b18      	ldr	r3, [pc, #96]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4013      	ands	r3, r2
 800967e:	4a17      	ldr	r2, [pc, #92]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 8009680:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	f1c3 0207 	rsb	r2, r3, #7
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	2201      	movs	r2, #1
 800969c:	409a      	lsls	r2, r3
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	4a0d      	ldr	r2, [pc, #52]	; (80096dc <xTaskPriorityDisinherit+0x104>)
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <xTaskPriorityDisinherit+0x100>)
 80096b6:	441a      	add	r2, r3
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fe fbe2 	bl	8007e88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096c8:	697b      	ldr	r3, [r7, #20]
	}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000344 	.word	0x20000344
 80096d8:	20000348 	.word	0x20000348
 80096dc:	2000044c 	.word	0x2000044c

080096e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ea:	4b29      	ldr	r3, [pc, #164]	; (8009790 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096f0:	4b28      	ldr	r3, [pc, #160]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fc23 	bl	8007f42 <uxListRemove>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10b      	bne.n	800971a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009702:	4b24      	ldr	r3, [pc, #144]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	2201      	movs	r2, #1
 800970a:	fa02 f303 	lsl.w	r3, r2, r3
 800970e:	43da      	mvns	r2, r3
 8009710:	4b21      	ldr	r3, [pc, #132]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4013      	ands	r3, r2
 8009716:	4a20      	ldr	r2, [pc, #128]	; (8009798 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009718:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d10a      	bne.n	8009738 <prvAddCurrentTaskToDelayedList+0x58>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009728:	4b1a      	ldr	r3, [pc, #104]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3304      	adds	r3, #4
 800972e:	4619      	mov	r1, r3
 8009730:	481a      	ldr	r0, [pc, #104]	; (800979c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009732:	f7fe fba9 	bl	8007e88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009736:	e026      	b.n	8009786 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009740:	4b14      	ldr	r3, [pc, #80]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	429a      	cmp	r2, r3
 800974e:	d209      	bcs.n	8009764 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009750:	4b13      	ldr	r3, [pc, #76]	; (80097a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7fe fbb7 	bl	8007ed0 <vListInsert>
}
 8009762:	e010      	b.n	8009786 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <prvAddCurrentTaskToDelayedList+0xb4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3304      	adds	r3, #4
 800976e:	4619      	mov	r1, r3
 8009770:	4610      	mov	r0, r2
 8009772:	f7fe fbad 	bl	8007ed0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d202      	bcs.n	8009786 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009780:	4a09      	ldr	r2, [pc, #36]	; (80097a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6013      	str	r3, [r2, #0]
}
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000448 	.word	0x20000448
 8009794:	20000344 	.word	0x20000344
 8009798:	2000044c 	.word	0x2000044c
 800979c:	20000430 	.word	0x20000430
 80097a0:	20000400 	.word	0x20000400
 80097a4:	200003fc 	.word	0x200003fc
 80097a8:	20000464 	.word	0x20000464

080097ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b04      	subs	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3b04      	subs	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3b04      	subs	r3, #4
 80097da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097dc:	4a0c      	ldr	r2, [pc, #48]	; (8009810 <pxPortInitialiseStack+0x64>)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b14      	subs	r3, #20
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b04      	subs	r3, #4
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f06f 0202 	mvn.w	r2, #2
 80097fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3b20      	subs	r3, #32
 8009800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	08009815 	.word	0x08009815

08009814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <prvTaskExitError+0x50>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d009      	beq.n	800983c <prvTaskExitError+0x28>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e7fe      	b.n	800983a <prvTaskExitError+0x26>
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800984e:	bf00      	nop
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0fc      	beq.n	8009850 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009856:	bf00      	nop
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000044 	.word	0x20000044
	...

08009870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <pxCurrentTCBConst2>)
 8009872:	6819      	ldr	r1, [r3, #0]
 8009874:	6808      	ldr	r0, [r1, #0]
 8009876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	f380 8809 	msr	PSP, r0
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8811 	msr	BASEPRI, r0
 800988a:	4770      	bx	lr
 800988c:	f3af 8000 	nop.w

08009890 <pxCurrentTCBConst2>:
 8009890:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop

08009898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009898:	4808      	ldr	r0, [pc, #32]	; (80098bc <prvPortStartFirstTask+0x24>)
 800989a:	6800      	ldr	r0, [r0, #0]
 800989c:	6800      	ldr	r0, [r0, #0]
 800989e:	f380 8808 	msr	MSP, r0
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8814 	msr	CONTROL, r0
 80098aa:	b662      	cpsie	i
 80098ac:	b661      	cpsie	f
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	df00      	svc	0
 80098b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ba:	bf00      	nop
 80098bc:	e000ed08 	.word	0xe000ed08

080098c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098c6:	4b44      	ldr	r3, [pc, #272]	; (80099d8 <xPortStartScheduler+0x118>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a44      	ldr	r2, [pc, #272]	; (80099dc <xPortStartScheduler+0x11c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d109      	bne.n	80098e4 <xPortStartScheduler+0x24>
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	613b      	str	r3, [r7, #16]
 80098e2:	e7fe      	b.n	80098e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098e4:	4b3c      	ldr	r3, [pc, #240]	; (80099d8 <xPortStartScheduler+0x118>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a3d      	ldr	r2, [pc, #244]	; (80099e0 <xPortStartScheduler+0x120>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d109      	bne.n	8009902 <xPortStartScheduler+0x42>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e7fe      	b.n	8009900 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009902:	4b38      	ldr	r3, [pc, #224]	; (80099e4 <xPortStartScheduler+0x124>)
 8009904:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	22ff      	movs	r2, #255	; 0xff
 8009912:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009924:	b2da      	uxtb	r2, r3
 8009926:	4b30      	ldr	r3, [pc, #192]	; (80099e8 <xPortStartScheduler+0x128>)
 8009928:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800992a:	4b30      	ldr	r3, [pc, #192]	; (80099ec <xPortStartScheduler+0x12c>)
 800992c:	2207      	movs	r2, #7
 800992e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009930:	e009      	b.n	8009946 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <xPortStartScheduler+0x12c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3b01      	subs	r3, #1
 8009938:	4a2c      	ldr	r2, [pc, #176]	; (80099ec <xPortStartScheduler+0x12c>)
 800993a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	b2db      	uxtb	r3, r3
 8009944:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b80      	cmp	r3, #128	; 0x80
 8009950:	d0ef      	beq.n	8009932 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009952:	4b26      	ldr	r3, [pc, #152]	; (80099ec <xPortStartScheduler+0x12c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f1c3 0307 	rsb	r3, r3, #7
 800995a:	2b04      	cmp	r3, #4
 800995c:	d009      	beq.n	8009972 <xPortStartScheduler+0xb2>
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60bb      	str	r3, [r7, #8]
 8009970:	e7fe      	b.n	8009970 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009972:	4b1e      	ldr	r3, [pc, #120]	; (80099ec <xPortStartScheduler+0x12c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	4a1c      	ldr	r2, [pc, #112]	; (80099ec <xPortStartScheduler+0x12c>)
 800997a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800997c:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <xPortStartScheduler+0x12c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009984:	4a19      	ldr	r2, [pc, #100]	; (80099ec <xPortStartScheduler+0x12c>)
 8009986:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009990:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <xPortStartScheduler+0x130>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <xPortStartScheduler+0x130>)
 8009996:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800999a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800999c:	4b14      	ldr	r3, [pc, #80]	; (80099f0 <xPortStartScheduler+0x130>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <xPortStartScheduler+0x130>)
 80099a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099a8:	f000 f8d6 	bl	8009b58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099ac:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <xPortStartScheduler+0x134>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099b2:	f000 f8f5 	bl	8009ba0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099b6:	4b10      	ldr	r3, [pc, #64]	; (80099f8 <xPortStartScheduler+0x138>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a0f      	ldr	r2, [pc, #60]	; (80099f8 <xPortStartScheduler+0x138>)
 80099bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099c2:	f7ff ff69 	bl	8009898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099c6:	f7ff fbaf 	bl	8009128 <vTaskSwitchContext>
	prvTaskExitError();
 80099ca:	f7ff ff23 	bl	8009814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00
 80099dc:	410fc271 	.word	0x410fc271
 80099e0:	410fc270 	.word	0x410fc270
 80099e4:	e000e400 	.word	0xe000e400
 80099e8:	20000470 	.word	0x20000470
 80099ec:	20000474 	.word	0x20000474
 80099f0:	e000ed20 	.word	0xe000ed20
 80099f4:	20000044 	.word	0x20000044
 80099f8:	e000ef34 	.word	0xe000ef34

080099fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <vPortEnterCritical+0x54>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <vPortEnterCritical+0x54>)
 8009a1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a1e:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <vPortEnterCritical+0x54>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d10e      	bne.n	8009a44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <vPortEnterCritical+0x58>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <vPortEnterCritical+0x48>
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	603b      	str	r3, [r7, #0]
 8009a42:	e7fe      	b.n	8009a42 <vPortEnterCritical+0x46>
	}
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20000044 	.word	0x20000044
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a5e:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <vPortExitCritical+0x4c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d109      	bne.n	8009a7a <vPortExitCritical+0x22>
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	e7fe      	b.n	8009a78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <vPortExitCritical+0x4c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	4a08      	ldr	r2, [pc, #32]	; (8009aa4 <vPortExitCritical+0x4c>)
 8009a82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <vPortExitCritical+0x4c>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <vPortExitCritical+0x3e>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20000044 	.word	0x20000044
	...

08009ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ab0:	f3ef 8009 	mrs	r0, PSP
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <pxCurrentTCBConst>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	f01e 0f10 	tst.w	lr, #16
 8009ac0:	bf08      	it	eq
 8009ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aca:	6010      	str	r0, [r2, #0]
 8009acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ad4:	f380 8811 	msr	BASEPRI, r0
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f7ff fb22 	bl	8009128 <vTaskSwitchContext>
 8009ae4:	f04f 0000 	mov.w	r0, #0
 8009ae8:	f380 8811 	msr	BASEPRI, r0
 8009aec:	bc09      	pop	{r0, r3}
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	6808      	ldr	r0, [r1, #0]
 8009af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af6:	f01e 0f10 	tst.w	lr, #16
 8009afa:	bf08      	it	eq
 8009afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b00:	f380 8809 	msr	PSP, r0
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst>:
 8009b10:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b30:	f7ff fa3e 	bl	8008fb0 <xTaskIncrementTick>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <SysTick_Handler+0x3c>)
 8009b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b5c:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <vPortSetupTimerInterrupt+0x34>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b62:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <vPortSetupTimerInterrupt+0x38>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <vPortSetupTimerInterrupt+0x3c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a0a      	ldr	r2, [pc, #40]	; (8009b98 <vPortSetupTimerInterrupt+0x40>)
 8009b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b72:	099b      	lsrs	r3, r3, #6
 8009b74:	4a09      	ldr	r2, [pc, #36]	; (8009b9c <vPortSetupTimerInterrupt+0x44>)
 8009b76:	3b01      	subs	r3, #1
 8009b78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <vPortSetupTimerInterrupt+0x34>)
 8009b7c:	2207      	movs	r2, #7
 8009b7e:	601a      	str	r2, [r3, #0]
}
 8009b80:	bf00      	nop
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	e000e010 	.word	0xe000e010
 8009b90:	e000e018 	.word	0xe000e018
 8009b94:	20000000 	.word	0x20000000
 8009b98:	10624dd3 	.word	0x10624dd3
 8009b9c:	e000e014 	.word	0xe000e014

08009ba0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ba0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bb0 <vPortEnableVFP+0x10>
 8009ba4:	6801      	ldr	r1, [r0, #0]
 8009ba6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009baa:	6001      	str	r1, [r0, #0]
 8009bac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bae:	bf00      	nop
 8009bb0:	e000ed88 	.word	0xe000ed88

08009bb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bba:	f3ef 8305 	mrs	r3, IPSR
 8009bbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b0f      	cmp	r3, #15
 8009bc4:	d913      	bls.n	8009bee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bc6:	4a16      	ldr	r2, [pc, #88]	; (8009c20 <vPortValidateInterruptPriority+0x6c>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bd0:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <vPortValidateInterruptPriority+0x70>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	7afa      	ldrb	r2, [r7, #11]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d209      	bcs.n	8009bee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	e7fe      	b.n	8009bec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bee:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <vPortValidateInterruptPriority+0x74>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <vPortValidateInterruptPriority+0x78>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d909      	bls.n	8009c12 <vPortValidateInterruptPriority+0x5e>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	e7fe      	b.n	8009c10 <vPortValidateInterruptPriority+0x5c>
	}
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	e000e3f0 	.word	0xe000e3f0
 8009c24:	20000470 	.word	0x20000470
 8009c28:	e000ed0c 	.word	0xe000ed0c
 8009c2c:	20000474 	.word	0x20000474

08009c30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c3c:	f7ff f90e 	bl	8008e5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c40:	4b59      	ldr	r3, [pc, #356]	; (8009da8 <pvPortMalloc+0x178>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c48:	f000 f910 	bl	8009e6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c4c:	4b57      	ldr	r3, [pc, #348]	; (8009dac <pvPortMalloc+0x17c>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 808c 	bne.w	8009d72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01c      	beq.n	8009c9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009c60:	2208      	movs	r2, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d013      	beq.n	8009c9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f023 0307 	bic.w	r3, r3, #7
 8009c78:	3308      	adds	r3, #8
 8009c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d009      	beq.n	8009c9a <pvPortMalloc+0x6a>
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e7fe      	b.n	8009c98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d068      	beq.n	8009d72 <pvPortMalloc+0x142>
 8009ca0:	4b43      	ldr	r3, [pc, #268]	; (8009db0 <pvPortMalloc+0x180>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d863      	bhi.n	8009d72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009caa:	4b42      	ldr	r3, [pc, #264]	; (8009db4 <pvPortMalloc+0x184>)
 8009cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cae:	4b41      	ldr	r3, [pc, #260]	; (8009db4 <pvPortMalloc+0x184>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cb4:	e004      	b.n	8009cc0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <pvPortMalloc+0xa2>
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f1      	bne.n	8009cb6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cd2:	4b35      	ldr	r3, [pc, #212]	; (8009da8 <pvPortMalloc+0x178>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d04a      	beq.n	8009d72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4413      	add	r3, r2
 8009ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	2308      	movs	r3, #8
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d91e      	bls.n	8009d3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4413      	add	r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d009      	beq.n	8009d24 <pvPortMalloc+0xf4>
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	e7fe      	b.n	8009d22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d36:	69b8      	ldr	r0, [r7, #24]
 8009d38:	f000 f8fa 	bl	8009f30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d3c:	4b1c      	ldr	r3, [pc, #112]	; (8009db0 <pvPortMalloc+0x180>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	4a1a      	ldr	r2, [pc, #104]	; (8009db0 <pvPortMalloc+0x180>)
 8009d48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d4a:	4b19      	ldr	r3, [pc, #100]	; (8009db0 <pvPortMalloc+0x180>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <pvPortMalloc+0x188>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d203      	bcs.n	8009d5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d56:	4b16      	ldr	r3, [pc, #88]	; (8009db0 <pvPortMalloc+0x180>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <pvPortMalloc+0x188>)
 8009d5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	4b12      	ldr	r3, [pc, #72]	; (8009dac <pvPortMalloc+0x17c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d72:	f7ff f881 	bl	8008e78 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009d7c:	f7f7 f89c 	bl	8000eb8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <pvPortMalloc+0x16e>
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e7fe      	b.n	8009d9c <pvPortMalloc+0x16c>
	return pvReturn;
 8009d9e:	69fb      	ldr	r3, [r7, #28]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3728      	adds	r7, #40	; 0x28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20004080 	.word	0x20004080
 8009dac:	2000408c 	.word	0x2000408c
 8009db0:	20004084 	.word	0x20004084
 8009db4:	20004078 	.word	0x20004078
 8009db8:	20004088 	.word	0x20004088

08009dbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d046      	beq.n	8009e5c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dce:	2308      	movs	r3, #8
 8009dd0:	425b      	negs	r3, r3
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	4b20      	ldr	r3, [pc, #128]	; (8009e64 <vPortFree+0xa8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4013      	ands	r3, r2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <vPortFree+0x42>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e7fe      	b.n	8009dfc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <vPortFree+0x5e>
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60bb      	str	r3, [r7, #8]
 8009e18:	e7fe      	b.n	8009e18 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <vPortFree+0xa8>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4013      	ands	r3, r2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d019      	beq.n	8009e5c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d115      	bne.n	8009e5c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <vPortFree+0xa8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	43db      	mvns	r3, r3
 8009e3a:	401a      	ands	r2, r3
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e40:	f7ff f80c 	bl	8008e5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	4b07      	ldr	r3, [pc, #28]	; (8009e68 <vPortFree+0xac>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <vPortFree+0xac>)
 8009e50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e52:	6938      	ldr	r0, [r7, #16]
 8009e54:	f000 f86c 	bl	8009f30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e58:	f7ff f80e 	bl	8008e78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e5c:	bf00      	nop
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	2000408c 	.word	0x2000408c
 8009e68:	20004084 	.word	0x20004084

08009e6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e72:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e78:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <prvHeapInit+0xac>)
 8009e7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f003 0307 	and.w	r3, r3, #7
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00c      	beq.n	8009ea0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3307      	adds	r3, #7
 8009e8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <prvHeapInit+0xac>)
 8009e9c:	4413      	add	r3, r2
 8009e9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ea4:	4a1d      	ldr	r2, [pc, #116]	; (8009f1c <prvHeapInit+0xb0>)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eaa:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <prvHeapInit+0xb0>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009eb8:	2208      	movs	r2, #8
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0307 	bic.w	r3, r3, #7
 8009ec6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <prvHeapInit+0xb4>)
 8009ecc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ece:	4b14      	ldr	r3, [pc, #80]	; (8009f20 <prvHeapInit+0xb4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ed6:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <prvHeapInit+0xb4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009eec:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <prvHeapInit+0xb4>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <prvHeapInit+0xb8>)
 8009efa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a09      	ldr	r2, [pc, #36]	; (8009f28 <prvHeapInit+0xbc>)
 8009f02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f04:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <prvHeapInit+0xc0>)
 8009f06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f0a:	601a      	str	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20000478 	.word	0x20000478
 8009f1c:	20004078 	.word	0x20004078
 8009f20:	20004080 	.word	0x20004080
 8009f24:	20004088 	.word	0x20004088
 8009f28:	20004084 	.word	0x20004084
 8009f2c:	2000408c 	.word	0x2000408c

08009f30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f38:	4b28      	ldr	r3, [pc, #160]	; (8009fdc <prvInsertBlockIntoFreeList+0xac>)
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e002      	b.n	8009f44 <prvInsertBlockIntoFreeList+0x14>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d8f7      	bhi.n	8009f3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	4413      	add	r3, r2
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d108      	bne.n	8009f72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	441a      	add	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	441a      	add	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d118      	bne.n	8009fb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d00d      	beq.n	8009fae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	441a      	add	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e008      	b.n	8009fc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	e003      	b.n	8009fc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d002      	beq.n	8009fce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20004078 	.word	0x20004078
 8009fe0:	20004080 	.word	0x20004080

08009fe4 <__errno>:
 8009fe4:	4b01      	ldr	r3, [pc, #4]	; (8009fec <__errno+0x8>)
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20000048 	.word	0x20000048

08009ff0 <__libc_init_array>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4e0d      	ldr	r6, [pc, #52]	; (800a028 <__libc_init_array+0x38>)
 8009ff4:	4c0d      	ldr	r4, [pc, #52]	; (800a02c <__libc_init_array+0x3c>)
 8009ff6:	1ba4      	subs	r4, r4, r6
 8009ff8:	10a4      	asrs	r4, r4, #2
 8009ffa:	2500      	movs	r5, #0
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d109      	bne.n	800a014 <__libc_init_array+0x24>
 800a000:	4e0b      	ldr	r6, [pc, #44]	; (800a030 <__libc_init_array+0x40>)
 800a002:	4c0c      	ldr	r4, [pc, #48]	; (800a034 <__libc_init_array+0x44>)
 800a004:	f001 f9a2 	bl	800b34c <_init>
 800a008:	1ba4      	subs	r4, r4, r6
 800a00a:	10a4      	asrs	r4, r4, #2
 800a00c:	2500      	movs	r5, #0
 800a00e:	42a5      	cmp	r5, r4
 800a010:	d105      	bne.n	800a01e <__libc_init_array+0x2e>
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a018:	4798      	blx	r3
 800a01a:	3501      	adds	r5, #1
 800a01c:	e7ee      	b.n	8009ffc <__libc_init_array+0xc>
 800a01e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a022:	4798      	blx	r3
 800a024:	3501      	adds	r5, #1
 800a026:	e7f2      	b.n	800a00e <__libc_init_array+0x1e>
 800a028:	0800c58c 	.word	0x0800c58c
 800a02c:	0800c58c 	.word	0x0800c58c
 800a030:	0800c58c 	.word	0x0800c58c
 800a034:	0800c590 	.word	0x0800c590

0800a038 <memcmp>:
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	2400      	movs	r4, #0
 800a03c:	42a2      	cmp	r2, r4
 800a03e:	d101      	bne.n	800a044 <memcmp+0xc>
 800a040:	2000      	movs	r0, #0
 800a042:	e007      	b.n	800a054 <memcmp+0x1c>
 800a044:	5d03      	ldrb	r3, [r0, r4]
 800a046:	3401      	adds	r4, #1
 800a048:	190d      	adds	r5, r1, r4
 800a04a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a04e:	42ab      	cmp	r3, r5
 800a050:	d0f4      	beq.n	800a03c <memcmp+0x4>
 800a052:	1b58      	subs	r0, r3, r5
 800a054:	bd30      	pop	{r4, r5, pc}

0800a056 <memcpy>:
 800a056:	b510      	push	{r4, lr}
 800a058:	1e43      	subs	r3, r0, #1
 800a05a:	440a      	add	r2, r1
 800a05c:	4291      	cmp	r1, r2
 800a05e:	d100      	bne.n	800a062 <memcpy+0xc>
 800a060:	bd10      	pop	{r4, pc}
 800a062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a06a:	e7f7      	b.n	800a05c <memcpy+0x6>

0800a06c <memset>:
 800a06c:	4402      	add	r2, r0
 800a06e:	4603      	mov	r3, r0
 800a070:	4293      	cmp	r3, r2
 800a072:	d100      	bne.n	800a076 <memset+0xa>
 800a074:	4770      	bx	lr
 800a076:	f803 1b01 	strb.w	r1, [r3], #1
 800a07a:	e7f9      	b.n	800a070 <memset+0x4>

0800a07c <cosf>:
 800a07c:	ee10 3a10 	vmov	r3, s0
 800a080:	b507      	push	{r0, r1, r2, lr}
 800a082:	4a1c      	ldr	r2, [pc, #112]	; (800a0f4 <cosf+0x78>)
 800a084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a088:	4293      	cmp	r3, r2
 800a08a:	dc04      	bgt.n	800a096 <cosf+0x1a>
 800a08c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a0f8 <cosf+0x7c>
 800a090:	f000 fca0 	bl	800a9d4 <__kernel_cosf>
 800a094:	e004      	b.n	800a0a0 <cosf+0x24>
 800a096:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a09a:	db04      	blt.n	800a0a6 <cosf+0x2a>
 800a09c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a0a0:	b003      	add	sp, #12
 800a0a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0a6:	4668      	mov	r0, sp
 800a0a8:	f000 fb64 	bl	800a774 <__ieee754_rem_pio2f>
 800a0ac:	f000 0003 	and.w	r0, r0, #3
 800a0b0:	2801      	cmp	r0, #1
 800a0b2:	d007      	beq.n	800a0c4 <cosf+0x48>
 800a0b4:	2802      	cmp	r0, #2
 800a0b6:	d00e      	beq.n	800a0d6 <cosf+0x5a>
 800a0b8:	b9a0      	cbnz	r0, 800a0e4 <cosf+0x68>
 800a0ba:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0be:	ed9d 0a00 	vldr	s0, [sp]
 800a0c2:	e7e5      	b.n	800a090 <cosf+0x14>
 800a0c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0c8:	ed9d 0a00 	vldr	s0, [sp]
 800a0cc:	f000 ff62 	bl	800af94 <__kernel_sinf>
 800a0d0:	eeb1 0a40 	vneg.f32	s0, s0
 800a0d4:	e7e4      	b.n	800a0a0 <cosf+0x24>
 800a0d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0da:	ed9d 0a00 	vldr	s0, [sp]
 800a0de:	f000 fc79 	bl	800a9d4 <__kernel_cosf>
 800a0e2:	e7f5      	b.n	800a0d0 <cosf+0x54>
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0ea:	ed9d 0a00 	vldr	s0, [sp]
 800a0ee:	f000 ff51 	bl	800af94 <__kernel_sinf>
 800a0f2:	e7d5      	b.n	800a0a0 <cosf+0x24>
 800a0f4:	3f490fd8 	.word	0x3f490fd8
 800a0f8:	00000000 	.word	0x00000000

0800a0fc <sinf>:
 800a0fc:	ee10 3a10 	vmov	r3, s0
 800a100:	b507      	push	{r0, r1, r2, lr}
 800a102:	4a1d      	ldr	r2, [pc, #116]	; (800a178 <sinf+0x7c>)
 800a104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a108:	4293      	cmp	r3, r2
 800a10a:	dc05      	bgt.n	800a118 <sinf+0x1c>
 800a10c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a17c <sinf+0x80>
 800a110:	2000      	movs	r0, #0
 800a112:	f000 ff3f 	bl	800af94 <__kernel_sinf>
 800a116:	e004      	b.n	800a122 <sinf+0x26>
 800a118:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a11c:	db04      	blt.n	800a128 <sinf+0x2c>
 800a11e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a122:	b003      	add	sp, #12
 800a124:	f85d fb04 	ldr.w	pc, [sp], #4
 800a128:	4668      	mov	r0, sp
 800a12a:	f000 fb23 	bl	800a774 <__ieee754_rem_pio2f>
 800a12e:	f000 0003 	and.w	r0, r0, #3
 800a132:	2801      	cmp	r0, #1
 800a134:	d008      	beq.n	800a148 <sinf+0x4c>
 800a136:	2802      	cmp	r0, #2
 800a138:	d00d      	beq.n	800a156 <sinf+0x5a>
 800a13a:	b9b0      	cbnz	r0, 800a16a <sinf+0x6e>
 800a13c:	2001      	movs	r0, #1
 800a13e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a142:	ed9d 0a00 	vldr	s0, [sp]
 800a146:	e7e4      	b.n	800a112 <sinf+0x16>
 800a148:	eddd 0a01 	vldr	s1, [sp, #4]
 800a14c:	ed9d 0a00 	vldr	s0, [sp]
 800a150:	f000 fc40 	bl	800a9d4 <__kernel_cosf>
 800a154:	e7e5      	b.n	800a122 <sinf+0x26>
 800a156:	2001      	movs	r0, #1
 800a158:	eddd 0a01 	vldr	s1, [sp, #4]
 800a15c:	ed9d 0a00 	vldr	s0, [sp]
 800a160:	f000 ff18 	bl	800af94 <__kernel_sinf>
 800a164:	eeb1 0a40 	vneg.f32	s0, s0
 800a168:	e7db      	b.n	800a122 <sinf+0x26>
 800a16a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a16e:	ed9d 0a00 	vldr	s0, [sp]
 800a172:	f000 fc2f 	bl	800a9d4 <__kernel_cosf>
 800a176:	e7f5      	b.n	800a164 <sinf+0x68>
 800a178:	3f490fd8 	.word	0x3f490fd8
 800a17c:	00000000 	.word	0x00000000

0800a180 <sqrt>:
 800a180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a184:	ed2d 8b02 	vpush	{d8}
 800a188:	b08b      	sub	sp, #44	; 0x2c
 800a18a:	ec55 4b10 	vmov	r4, r5, d0
 800a18e:	f000 f8ab 	bl	800a2e8 <__ieee754_sqrt>
 800a192:	4b26      	ldr	r3, [pc, #152]	; (800a22c <sqrt+0xac>)
 800a194:	eeb0 8a40 	vmov.f32	s16, s0
 800a198:	eef0 8a60 	vmov.f32	s17, s1
 800a19c:	f993 6000 	ldrsb.w	r6, [r3]
 800a1a0:	1c73      	adds	r3, r6, #1
 800a1a2:	d02a      	beq.n	800a1fa <sqrt+0x7a>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	462b      	mov	r3, r5
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f7f6 fc86 	bl	8000abc <__aeabi_dcmpun>
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	bb10      	cbnz	r0, 800a1fa <sqrt+0x7a>
 800a1b4:	f04f 0800 	mov.w	r8, #0
 800a1b8:	f04f 0900 	mov.w	r9, #0
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7f6 fc52 	bl	8000a6c <__aeabi_dcmplt>
 800a1c8:	b1b8      	cbz	r0, 800a1fa <sqrt+0x7a>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <sqrt+0xb0>)
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	9708      	str	r7, [sp, #32]
 800a1d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a1d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a1dc:	b9b6      	cbnz	r6, 800a20c <sqrt+0x8c>
 800a1de:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a1e2:	4668      	mov	r0, sp
 800a1e4:	f000 ff1e 	bl	800b024 <matherr>
 800a1e8:	b1d0      	cbz	r0, 800a220 <sqrt+0xa0>
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	b11b      	cbz	r3, 800a1f6 <sqrt+0x76>
 800a1ee:	f7ff fef9 	bl	8009fe4 <__errno>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a1fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a1fe:	eef0 0a68 	vmov.f32	s1, s17
 800a202:	b00b      	add	sp, #44	; 0x2c
 800a204:	ecbd 8b02 	vpop	{d8}
 800a208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a20c:	4642      	mov	r2, r8
 800a20e:	464b      	mov	r3, r9
 800a210:	4640      	mov	r0, r8
 800a212:	4649      	mov	r1, r9
 800a214:	f7f6 fae2 	bl	80007dc <__aeabi_ddiv>
 800a218:	2e02      	cmp	r6, #2
 800a21a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a21e:	d1e0      	bne.n	800a1e2 <sqrt+0x62>
 800a220:	f7ff fee0 	bl	8009fe4 <__errno>
 800a224:	2321      	movs	r3, #33	; 0x21
 800a226:	6003      	str	r3, [r0, #0]
 800a228:	e7df      	b.n	800a1ea <sqrt+0x6a>
 800a22a:	bf00      	nop
 800a22c:	200000ac 	.word	0x200000ac
 800a230:	0800c186 	.word	0x0800c186

0800a234 <asinf>:
 800a234:	b510      	push	{r4, lr}
 800a236:	ed2d 8b02 	vpush	{d8}
 800a23a:	4c27      	ldr	r4, [pc, #156]	; (800a2d8 <asinf+0xa4>)
 800a23c:	b08a      	sub	sp, #40	; 0x28
 800a23e:	eeb0 8a40 	vmov.f32	s16, s0
 800a242:	f000 f901 	bl	800a448 <__ieee754_asinf>
 800a246:	f994 3000 	ldrsb.w	r3, [r4]
 800a24a:	3301      	adds	r3, #1
 800a24c:	eef0 8a40 	vmov.f32	s17, s0
 800a250:	d03c      	beq.n	800a2cc <asinf+0x98>
 800a252:	eeb4 8a48 	vcmp.f32	s16, s16
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	d637      	bvs.n	800a2cc <asinf+0x98>
 800a25c:	eeb0 0a48 	vmov.f32	s0, s16
 800a260:	f000 ffbe 	bl	800b1e0 <fabsf>
 800a264:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a268:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a270:	dd2c      	ble.n	800a2cc <asinf+0x98>
 800a272:	2301      	movs	r3, #1
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <asinf+0xa8>)
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	ee18 0a10 	vmov	r0, s16
 800a27e:	2300      	movs	r3, #0
 800a280:	9308      	str	r3, [sp, #32]
 800a282:	f7f6 f929 	bl	80004d8 <__aeabi_f2d>
 800a286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a28e:	4814      	ldr	r0, [pc, #80]	; (800a2e0 <asinf+0xac>)
 800a290:	f000 feca 	bl	800b028 <nan>
 800a294:	f994 3000 	ldrsb.w	r3, [r4]
 800a298:	2b02      	cmp	r3, #2
 800a29a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a29e:	d104      	bne.n	800a2aa <asinf+0x76>
 800a2a0:	f7ff fea0 	bl	8009fe4 <__errno>
 800a2a4:	2321      	movs	r3, #33	; 0x21
 800a2a6:	6003      	str	r3, [r0, #0]
 800a2a8:	e004      	b.n	800a2b4 <asinf+0x80>
 800a2aa:	4668      	mov	r0, sp
 800a2ac:	f000 feba 	bl	800b024 <matherr>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d0f5      	beq.n	800a2a0 <asinf+0x6c>
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	b11b      	cbz	r3, 800a2c0 <asinf+0x8c>
 800a2b8:	f7ff fe94 	bl	8009fe4 <__errno>
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	6003      	str	r3, [r0, #0]
 800a2c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c4:	f7f6 fc10 	bl	8000ae8 <__aeabi_d2f>
 800a2c8:	ee08 0a90 	vmov	s17, r0
 800a2cc:	eeb0 0a68 	vmov.f32	s0, s17
 800a2d0:	b00a      	add	sp, #40	; 0x28
 800a2d2:	ecbd 8b02 	vpop	{d8}
 800a2d6:	bd10      	pop	{r4, pc}
 800a2d8:	200000ac 	.word	0x200000ac
 800a2dc:	0800c18b 	.word	0x0800c18b
 800a2e0:	0800c190 	.word	0x0800c190

0800a2e4 <atan2f>:
 800a2e4:	f000 b998 	b.w	800a618 <__ieee754_atan2f>

0800a2e8 <__ieee754_sqrt>:
 800a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ec:	4955      	ldr	r1, [pc, #340]	; (800a444 <__ieee754_sqrt+0x15c>)
 800a2ee:	ec55 4b10 	vmov	r4, r5, d0
 800a2f2:	43a9      	bics	r1, r5
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	d112      	bne.n	800a320 <__ieee754_sqrt+0x38>
 800a2fa:	ee10 2a10 	vmov	r2, s0
 800a2fe:	ee10 0a10 	vmov	r0, s0
 800a302:	4629      	mov	r1, r5
 800a304:	f7f6 f940 	bl	8000588 <__aeabi_dmul>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4620      	mov	r0, r4
 800a30e:	4629      	mov	r1, r5
 800a310:	f7f5 ff84 	bl	800021c <__adddf3>
 800a314:	4604      	mov	r4, r0
 800a316:	460d      	mov	r5, r1
 800a318:	ec45 4b10 	vmov	d0, r4, r5
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a320:	2d00      	cmp	r5, #0
 800a322:	ee10 0a10 	vmov	r0, s0
 800a326:	4621      	mov	r1, r4
 800a328:	dc0f      	bgt.n	800a34a <__ieee754_sqrt+0x62>
 800a32a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a32e:	4330      	orrs	r0, r6
 800a330:	d0f2      	beq.n	800a318 <__ieee754_sqrt+0x30>
 800a332:	b155      	cbz	r5, 800a34a <__ieee754_sqrt+0x62>
 800a334:	ee10 2a10 	vmov	r2, s0
 800a338:	4620      	mov	r0, r4
 800a33a:	4629      	mov	r1, r5
 800a33c:	f7f5 ff6c 	bl	8000218 <__aeabi_dsub>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	f7f6 fa4a 	bl	80007dc <__aeabi_ddiv>
 800a348:	e7e4      	b.n	800a314 <__ieee754_sqrt+0x2c>
 800a34a:	151b      	asrs	r3, r3, #20
 800a34c:	d073      	beq.n	800a436 <__ieee754_sqrt+0x14e>
 800a34e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a352:	07dd      	lsls	r5, r3, #31
 800a354:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a358:	bf48      	it	mi
 800a35a:	0fc8      	lsrmi	r0, r1, #31
 800a35c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a360:	bf44      	itt	mi
 800a362:	0049      	lslmi	r1, r1, #1
 800a364:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a368:	2500      	movs	r5, #0
 800a36a:	1058      	asrs	r0, r3, #1
 800a36c:	0fcb      	lsrs	r3, r1, #31
 800a36e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a372:	0049      	lsls	r1, r1, #1
 800a374:	2316      	movs	r3, #22
 800a376:	462c      	mov	r4, r5
 800a378:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a37c:	19a7      	adds	r7, r4, r6
 800a37e:	4297      	cmp	r7, r2
 800a380:	bfde      	ittt	le
 800a382:	19bc      	addle	r4, r7, r6
 800a384:	1bd2      	suble	r2, r2, r7
 800a386:	19ad      	addle	r5, r5, r6
 800a388:	0fcf      	lsrs	r7, r1, #31
 800a38a:	3b01      	subs	r3, #1
 800a38c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a390:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a394:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a398:	d1f0      	bne.n	800a37c <__ieee754_sqrt+0x94>
 800a39a:	f04f 0c20 	mov.w	ip, #32
 800a39e:	469e      	mov	lr, r3
 800a3a0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a3a4:	42a2      	cmp	r2, r4
 800a3a6:	eb06 070e 	add.w	r7, r6, lr
 800a3aa:	dc02      	bgt.n	800a3b2 <__ieee754_sqrt+0xca>
 800a3ac:	d112      	bne.n	800a3d4 <__ieee754_sqrt+0xec>
 800a3ae:	428f      	cmp	r7, r1
 800a3b0:	d810      	bhi.n	800a3d4 <__ieee754_sqrt+0xec>
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	eb07 0e06 	add.w	lr, r7, r6
 800a3b8:	da42      	bge.n	800a440 <__ieee754_sqrt+0x158>
 800a3ba:	f1be 0f00 	cmp.w	lr, #0
 800a3be:	db3f      	blt.n	800a440 <__ieee754_sqrt+0x158>
 800a3c0:	f104 0801 	add.w	r8, r4, #1
 800a3c4:	1b12      	subs	r2, r2, r4
 800a3c6:	428f      	cmp	r7, r1
 800a3c8:	bf88      	it	hi
 800a3ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a3ce:	1bc9      	subs	r1, r1, r7
 800a3d0:	4433      	add	r3, r6
 800a3d2:	4644      	mov	r4, r8
 800a3d4:	0052      	lsls	r2, r2, #1
 800a3d6:	f1bc 0c01 	subs.w	ip, ip, #1
 800a3da:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a3de:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a3e2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3e6:	d1dd      	bne.n	800a3a4 <__ieee754_sqrt+0xbc>
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	d006      	beq.n	800a3fa <__ieee754_sqrt+0x112>
 800a3ec:	1c5c      	adds	r4, r3, #1
 800a3ee:	bf13      	iteet	ne
 800a3f0:	3301      	addne	r3, #1
 800a3f2:	3501      	addeq	r5, #1
 800a3f4:	4663      	moveq	r3, ip
 800a3f6:	f023 0301 	bicne.w	r3, r3, #1
 800a3fa:	106a      	asrs	r2, r5, #1
 800a3fc:	085b      	lsrs	r3, r3, #1
 800a3fe:	07e9      	lsls	r1, r5, #31
 800a400:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a404:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a408:	bf48      	it	mi
 800a40a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a40e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a412:	461c      	mov	r4, r3
 800a414:	e780      	b.n	800a318 <__ieee754_sqrt+0x30>
 800a416:	0aca      	lsrs	r2, r1, #11
 800a418:	3815      	subs	r0, #21
 800a41a:	0549      	lsls	r1, r1, #21
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	d0fa      	beq.n	800a416 <__ieee754_sqrt+0x12e>
 800a420:	02d6      	lsls	r6, r2, #11
 800a422:	d50a      	bpl.n	800a43a <__ieee754_sqrt+0x152>
 800a424:	f1c3 0420 	rsb	r4, r3, #32
 800a428:	fa21 f404 	lsr.w	r4, r1, r4
 800a42c:	1e5d      	subs	r5, r3, #1
 800a42e:	4099      	lsls	r1, r3
 800a430:	4322      	orrs	r2, r4
 800a432:	1b43      	subs	r3, r0, r5
 800a434:	e78b      	b.n	800a34e <__ieee754_sqrt+0x66>
 800a436:	4618      	mov	r0, r3
 800a438:	e7f0      	b.n	800a41c <__ieee754_sqrt+0x134>
 800a43a:	0052      	lsls	r2, r2, #1
 800a43c:	3301      	adds	r3, #1
 800a43e:	e7ef      	b.n	800a420 <__ieee754_sqrt+0x138>
 800a440:	46a0      	mov	r8, r4
 800a442:	e7bf      	b.n	800a3c4 <__ieee754_sqrt+0xdc>
 800a444:	7ff00000 	.word	0x7ff00000

0800a448 <__ieee754_asinf>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	ee10 5a10 	vmov	r5, s0
 800a44e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a452:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a456:	ed2d 8b04 	vpush	{d8-d9}
 800a45a:	d10c      	bne.n	800a476 <__ieee754_asinf+0x2e>
 800a45c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800a5d8 <__ieee754_asinf+0x190>
 800a460:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800a5dc <__ieee754_asinf+0x194>
 800a464:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a468:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a46c:	eeb0 0a67 	vmov.f32	s0, s15
 800a470:	ecbd 8b04 	vpop	{d8-d9}
 800a474:	bd38      	pop	{r3, r4, r5, pc}
 800a476:	dd04      	ble.n	800a482 <__ieee754_asinf+0x3a>
 800a478:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a47c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a480:	e7f6      	b.n	800a470 <__ieee754_asinf+0x28>
 800a482:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a486:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a48a:	da0b      	bge.n	800a4a4 <__ieee754_asinf+0x5c>
 800a48c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a490:	da52      	bge.n	800a538 <__ieee754_asinf+0xf0>
 800a492:	eddf 7a53 	vldr	s15, [pc, #332]	; 800a5e0 <__ieee754_asinf+0x198>
 800a496:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a49a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a2:	dce5      	bgt.n	800a470 <__ieee754_asinf+0x28>
 800a4a4:	f000 fe9c 	bl	800b1e0 <fabsf>
 800a4a8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a4ac:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a4b0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a4b4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800a5e4 <__ieee754_asinf+0x19c>
 800a4b8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a5e8 <__ieee754_asinf+0x1a0>
 800a4bc:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800a5ec <__ieee754_asinf+0x1a4>
 800a4c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a4c4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a5f0 <__ieee754_asinf+0x1a8>
 800a4c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a4cc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a5f4 <__ieee754_asinf+0x1ac>
 800a4d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a4d4:	eddf 7a48 	vldr	s15, [pc, #288]	; 800a5f8 <__ieee754_asinf+0x1b0>
 800a4d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a4dc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a5fc <__ieee754_asinf+0x1b4>
 800a4e0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a4e4:	eddf 7a46 	vldr	s15, [pc, #280]	; 800a600 <__ieee754_asinf+0x1b8>
 800a4e8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a4ec:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800a604 <__ieee754_asinf+0x1bc>
 800a4f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a4f4:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a608 <__ieee754_asinf+0x1c0>
 800a4f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a4fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a500:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a504:	f000 fa62 	bl	800a9cc <__ieee754_sqrtf>
 800a508:	4b40      	ldr	r3, [pc, #256]	; (800a60c <__ieee754_asinf+0x1c4>)
 800a50a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a50e:	429c      	cmp	r4, r3
 800a510:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a514:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a518:	dd3d      	ble.n	800a596 <__ieee754_asinf+0x14e>
 800a51a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a51e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800a610 <__ieee754_asinf+0x1c8>
 800a522:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a526:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800a5dc <__ieee754_asinf+0x194>
 800a52a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a52e:	2d00      	cmp	r5, #0
 800a530:	bfd8      	it	le
 800a532:	eeb1 0a40 	vnegle.f32	s0, s0
 800a536:	e79b      	b.n	800a470 <__ieee754_asinf+0x28>
 800a538:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a53c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a5e4 <__ieee754_asinf+0x19c>
 800a540:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a5e8 <__ieee754_asinf+0x1a0>
 800a544:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800a5fc <__ieee754_asinf+0x1b4>
 800a548:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a54c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a5f0 <__ieee754_asinf+0x1a8>
 800a550:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a554:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a5f4 <__ieee754_asinf+0x1ac>
 800a558:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a55c:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5f8 <__ieee754_asinf+0x1b0>
 800a560:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a564:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a5ec <__ieee754_asinf+0x1a4>
 800a568:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a56c:	eddf 6a24 	vldr	s13, [pc, #144]	; 800a600 <__ieee754_asinf+0x1b8>
 800a570:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a574:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800a604 <__ieee754_asinf+0x1bc>
 800a578:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a57c:	eddf 6a22 	vldr	s13, [pc, #136]	; 800a608 <__ieee754_asinf+0x1c0>
 800a580:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a584:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a588:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a58c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a590:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a594:	e76c      	b.n	800a470 <__ieee754_asinf+0x28>
 800a596:	ee10 3a10 	vmov	r3, s0
 800a59a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a59e:	f023 030f 	bic.w	r3, r3, #15
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef1 6a67 	vneg.f32	s13, s15
 800a5aa:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800a5ae:	ee70 5a00 	vadd.f32	s11, s0, s0
 800a5b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a5b6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a5d8 <__ieee754_asinf+0x190>
 800a5ba:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800a5be:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800a614 <__ieee754_asinf+0x1cc>
 800a5c2:	eee5 7a47 	vfms.f32	s15, s10, s14
 800a5c6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800a5ca:	eeb0 6a40 	vmov.f32	s12, s0
 800a5ce:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a5d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a5d6:	e7a8      	b.n	800a52a <__ieee754_asinf+0xe2>
 800a5d8:	b33bbd2e 	.word	0xb33bbd2e
 800a5dc:	3fc90fdb 	.word	0x3fc90fdb
 800a5e0:	7149f2ca 	.word	0x7149f2ca
 800a5e4:	3811ef08 	.word	0x3811ef08
 800a5e8:	3a4f7f04 	.word	0x3a4f7f04
 800a5ec:	3e2aaaab 	.word	0x3e2aaaab
 800a5f0:	bd241146 	.word	0xbd241146
 800a5f4:	3e4e0aa8 	.word	0x3e4e0aa8
 800a5f8:	bea6b090 	.word	0xbea6b090
 800a5fc:	3d9dc62e 	.word	0x3d9dc62e
 800a600:	bf303361 	.word	0xbf303361
 800a604:	4001572d 	.word	0x4001572d
 800a608:	c019d139 	.word	0xc019d139
 800a60c:	3f799999 	.word	0x3f799999
 800a610:	333bbd2e 	.word	0x333bbd2e
 800a614:	3f490fdb 	.word	0x3f490fdb

0800a618 <__ieee754_atan2f>:
 800a618:	ee10 2a90 	vmov	r2, s1
 800a61c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a620:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a624:	b510      	push	{r4, lr}
 800a626:	eef0 7a40 	vmov.f32	s15, s0
 800a62a:	dc06      	bgt.n	800a63a <__ieee754_atan2f+0x22>
 800a62c:	ee10 0a10 	vmov	r0, s0
 800a630:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a634:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a638:	dd04      	ble.n	800a644 <__ieee754_atan2f+0x2c>
 800a63a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a63e:	eeb0 0a67 	vmov.f32	s0, s15
 800a642:	bd10      	pop	{r4, pc}
 800a644:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a648:	d103      	bne.n	800a652 <__ieee754_atan2f+0x3a>
 800a64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64e:	f000 bcf3 	b.w	800b038 <atanf>
 800a652:	1794      	asrs	r4, r2, #30
 800a654:	f004 0402 	and.w	r4, r4, #2
 800a658:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a65c:	b943      	cbnz	r3, 800a670 <__ieee754_atan2f+0x58>
 800a65e:	2c02      	cmp	r4, #2
 800a660:	d06e      	beq.n	800a740 <__ieee754_atan2f+0x128>
 800a662:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a748 <__ieee754_atan2f+0x130>
 800a666:	2c03      	cmp	r4, #3
 800a668:	bf08      	it	eq
 800a66a:	eef0 7a47 	vmoveq.f32	s15, s14
 800a66e:	e7e6      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a670:	b941      	cbnz	r1, 800a684 <__ieee754_atan2f+0x6c>
 800a672:	eddf 7a36 	vldr	s15, [pc, #216]	; 800a74c <__ieee754_atan2f+0x134>
 800a676:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a750 <__ieee754_atan2f+0x138>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	bfb8      	it	lt
 800a67e:	eef0 7a47 	vmovlt.f32	s15, s14
 800a682:	e7dc      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a684:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a688:	d122      	bne.n	800a6d0 <__ieee754_atan2f+0xb8>
 800a68a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a68e:	d112      	bne.n	800a6b6 <__ieee754_atan2f+0x9e>
 800a690:	2c02      	cmp	r4, #2
 800a692:	d00a      	beq.n	800a6aa <__ieee754_atan2f+0x92>
 800a694:	2c03      	cmp	r4, #3
 800a696:	d00b      	beq.n	800a6b0 <__ieee754_atan2f+0x98>
 800a698:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800a754 <__ieee754_atan2f+0x13c>
 800a69c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a758 <__ieee754_atan2f+0x140>
 800a6a0:	2c01      	cmp	r4, #1
 800a6a2:	bf18      	it	ne
 800a6a4:	eef0 7a47 	vmovne.f32	s15, s14
 800a6a8:	e7c9      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a6aa:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a75c <__ieee754_atan2f+0x144>
 800a6ae:	e7c6      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a6b0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a760 <__ieee754_atan2f+0x148>
 800a6b4:	e7c3      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a6b6:	2c02      	cmp	r4, #2
 800a6b8:	d042      	beq.n	800a740 <__ieee754_atan2f+0x128>
 800a6ba:	2c03      	cmp	r4, #3
 800a6bc:	d005      	beq.n	800a6ca <__ieee754_atan2f+0xb2>
 800a6be:	2c01      	cmp	r4, #1
 800a6c0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a764 <__ieee754_atan2f+0x14c>
 800a6c4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a768 <__ieee754_atan2f+0x150>
 800a6c8:	e7eb      	b.n	800a6a2 <__ieee754_atan2f+0x8a>
 800a6ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a748 <__ieee754_atan2f+0x130>
 800a6ce:	e7b6      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a6d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6d4:	d0cd      	beq.n	800a672 <__ieee754_atan2f+0x5a>
 800a6d6:	1a5b      	subs	r3, r3, r1
 800a6d8:	15db      	asrs	r3, r3, #23
 800a6da:	2b3c      	cmp	r3, #60	; 0x3c
 800a6dc:	dc1a      	bgt.n	800a714 <__ieee754_atan2f+0xfc>
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	da01      	bge.n	800a6e6 <__ieee754_atan2f+0xce>
 800a6e2:	333c      	adds	r3, #60	; 0x3c
 800a6e4:	db19      	blt.n	800a71a <__ieee754_atan2f+0x102>
 800a6e6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a6ea:	f000 fd79 	bl	800b1e0 <fabsf>
 800a6ee:	f000 fca3 	bl	800b038 <atanf>
 800a6f2:	eef0 7a40 	vmov.f32	s15, s0
 800a6f6:	2c01      	cmp	r4, #1
 800a6f8:	d012      	beq.n	800a720 <__ieee754_atan2f+0x108>
 800a6fa:	2c02      	cmp	r4, #2
 800a6fc:	d017      	beq.n	800a72e <__ieee754_atan2f+0x116>
 800a6fe:	2c00      	cmp	r4, #0
 800a700:	d09d      	beq.n	800a63e <__ieee754_atan2f+0x26>
 800a702:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a76c <__ieee754_atan2f+0x154>
 800a706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a70a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a770 <__ieee754_atan2f+0x158>
 800a70e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a712:	e794      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a714:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a74c <__ieee754_atan2f+0x134>
 800a718:	e7ed      	b.n	800a6f6 <__ieee754_atan2f+0xde>
 800a71a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a768 <__ieee754_atan2f+0x150>
 800a71e:	e7ea      	b.n	800a6f6 <__ieee754_atan2f+0xde>
 800a720:	ee17 3a90 	vmov	r3, s15
 800a724:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	e787      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a72e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a76c <__ieee754_atan2f+0x154>
 800a732:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a736:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800a770 <__ieee754_atan2f+0x158>
 800a73a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a73e:	e77e      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a740:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a770 <__ieee754_atan2f+0x158>
 800a744:	e77b      	b.n	800a63e <__ieee754_atan2f+0x26>
 800a746:	bf00      	nop
 800a748:	c0490fdb 	.word	0xc0490fdb
 800a74c:	3fc90fdb 	.word	0x3fc90fdb
 800a750:	bfc90fdb 	.word	0xbfc90fdb
 800a754:	bf490fdb 	.word	0xbf490fdb
 800a758:	3f490fdb 	.word	0x3f490fdb
 800a75c:	4016cbe4 	.word	0x4016cbe4
 800a760:	c016cbe4 	.word	0xc016cbe4
 800a764:	80000000 	.word	0x80000000
 800a768:	00000000 	.word	0x00000000
 800a76c:	33bbbd2e 	.word	0x33bbbd2e
 800a770:	40490fdb 	.word	0x40490fdb

0800a774 <__ieee754_rem_pio2f>:
 800a774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a776:	ee10 6a10 	vmov	r6, s0
 800a77a:	4b86      	ldr	r3, [pc, #536]	; (800a994 <__ieee754_rem_pio2f+0x220>)
 800a77c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800a780:	429c      	cmp	r4, r3
 800a782:	b087      	sub	sp, #28
 800a784:	4605      	mov	r5, r0
 800a786:	dc05      	bgt.n	800a794 <__ieee754_rem_pio2f+0x20>
 800a788:	2300      	movs	r3, #0
 800a78a:	ed85 0a00 	vstr	s0, [r5]
 800a78e:	6043      	str	r3, [r0, #4]
 800a790:	2000      	movs	r0, #0
 800a792:	e020      	b.n	800a7d6 <__ieee754_rem_pio2f+0x62>
 800a794:	4b80      	ldr	r3, [pc, #512]	; (800a998 <__ieee754_rem_pio2f+0x224>)
 800a796:	429c      	cmp	r4, r3
 800a798:	dc38      	bgt.n	800a80c <__ieee754_rem_pio2f+0x98>
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	f024 040f 	bic.w	r4, r4, #15
 800a7a0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a99c <__ieee754_rem_pio2f+0x228>
 800a7a4:	4b7e      	ldr	r3, [pc, #504]	; (800a9a0 <__ieee754_rem_pio2f+0x22c>)
 800a7a6:	dd18      	ble.n	800a7da <__ieee754_rem_pio2f+0x66>
 800a7a8:	429c      	cmp	r4, r3
 800a7aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a7ae:	bf09      	itett	eq
 800a7b0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a9a4 <__ieee754_rem_pio2f+0x230>
 800a7b4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a9a8 <__ieee754_rem_pio2f+0x234>
 800a7b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a7bc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a9ac <__ieee754_rem_pio2f+0x238>
 800a7c0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a7c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7c8:	edc0 6a00 	vstr	s13, [r0]
 800a7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	b007      	add	sp, #28
 800a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7da:	429c      	cmp	r4, r3
 800a7dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a7e0:	bf09      	itett	eq
 800a7e2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a9a4 <__ieee754_rem_pio2f+0x230>
 800a7e6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a9a8 <__ieee754_rem_pio2f+0x234>
 800a7ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a7ee:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a9ac <__ieee754_rem_pio2f+0x238>
 800a7f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a7f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7fa:	edc0 6a00 	vstr	s13, [r0]
 800a7fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a802:	edc0 7a01 	vstr	s15, [r0, #4]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	e7e4      	b.n	800a7d6 <__ieee754_rem_pio2f+0x62>
 800a80c:	4b68      	ldr	r3, [pc, #416]	; (800a9b0 <__ieee754_rem_pio2f+0x23c>)
 800a80e:	429c      	cmp	r4, r3
 800a810:	dc71      	bgt.n	800a8f6 <__ieee754_rem_pio2f+0x182>
 800a812:	f000 fce5 	bl	800b1e0 <fabsf>
 800a816:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a9b4 <__ieee754_rem_pio2f+0x240>
 800a81a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a81e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a826:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a82a:	ee17 0a90 	vmov	r0, s15
 800a82e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a99c <__ieee754_rem_pio2f+0x228>
 800a832:	eeb1 7a46 	vneg.f32	s14, s12
 800a836:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a83a:	281f      	cmp	r0, #31
 800a83c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a9a8 <__ieee754_rem_pio2f+0x234>
 800a840:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a844:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a848:	ee16 3a90 	vmov	r3, s13
 800a84c:	dc1c      	bgt.n	800a888 <__ieee754_rem_pio2f+0x114>
 800a84e:	1e47      	subs	r7, r0, #1
 800a850:	4959      	ldr	r1, [pc, #356]	; (800a9b8 <__ieee754_rem_pio2f+0x244>)
 800a852:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a856:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a85a:	428a      	cmp	r2, r1
 800a85c:	d014      	beq.n	800a888 <__ieee754_rem_pio2f+0x114>
 800a85e:	602b      	str	r3, [r5, #0]
 800a860:	ed95 7a00 	vldr	s14, [r5]
 800a864:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a868:	2e00      	cmp	r6, #0
 800a86a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a86e:	ed85 0a01 	vstr	s0, [r5, #4]
 800a872:	dab0      	bge.n	800a7d6 <__ieee754_rem_pio2f+0x62>
 800a874:	eeb1 7a47 	vneg.f32	s14, s14
 800a878:	eeb1 0a40 	vneg.f32	s0, s0
 800a87c:	ed85 7a00 	vstr	s14, [r5]
 800a880:	ed85 0a01 	vstr	s0, [r5, #4]
 800a884:	4240      	negs	r0, r0
 800a886:	e7a6      	b.n	800a7d6 <__ieee754_rem_pio2f+0x62>
 800a888:	15e4      	asrs	r4, r4, #23
 800a88a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a88e:	1aa2      	subs	r2, r4, r2
 800a890:	2a08      	cmp	r2, #8
 800a892:	dde4      	ble.n	800a85e <__ieee754_rem_pio2f+0xea>
 800a894:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a9a4 <__ieee754_rem_pio2f+0x230>
 800a898:	eef0 6a40 	vmov.f32	s13, s0
 800a89c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a8a0:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a8a4:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a8a8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a9ac <__ieee754_rem_pio2f+0x238>
 800a8ac:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800a8b0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800a8b4:	eef0 7a40 	vmov.f32	s15, s0
 800a8b8:	ee15 3a90 	vmov	r3, s11
 800a8bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a8c0:	1aa4      	subs	r4, r4, r2
 800a8c2:	2c19      	cmp	r4, #25
 800a8c4:	dc04      	bgt.n	800a8d0 <__ieee754_rem_pio2f+0x15c>
 800a8c6:	edc5 5a00 	vstr	s11, [r5]
 800a8ca:	eeb0 0a66 	vmov.f32	s0, s13
 800a8ce:	e7c7      	b.n	800a860 <__ieee754_rem_pio2f+0xec>
 800a8d0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a9bc <__ieee754_rem_pio2f+0x248>
 800a8d4:	eeb0 0a66 	vmov.f32	s0, s13
 800a8d8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800a8dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a8e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a8e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a9c0 <__ieee754_rem_pio2f+0x24c>
 800a8e8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800a8ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a8f0:	ed85 7a00 	vstr	s14, [r5]
 800a8f4:	e7b4      	b.n	800a860 <__ieee754_rem_pio2f+0xec>
 800a8f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a8fa:	db06      	blt.n	800a90a <__ieee754_rem_pio2f+0x196>
 800a8fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a900:	edc0 7a01 	vstr	s15, [r0, #4]
 800a904:	edc0 7a00 	vstr	s15, [r0]
 800a908:	e742      	b.n	800a790 <__ieee754_rem_pio2f+0x1c>
 800a90a:	15e2      	asrs	r2, r4, #23
 800a90c:	3a86      	subs	r2, #134	; 0x86
 800a90e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a912:	ee07 3a90 	vmov	s15, r3
 800a916:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a91a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a9c4 <__ieee754_rem_pio2f+0x250>
 800a91e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a926:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a92a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a92e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a93a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a93e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a942:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94a:	edcd 7a05 	vstr	s15, [sp, #20]
 800a94e:	d11e      	bne.n	800a98e <__ieee754_rem_pio2f+0x21a>
 800a950:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a958:	bf0c      	ite	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	2302      	movne	r3, #2
 800a95e:	491a      	ldr	r1, [pc, #104]	; (800a9c8 <__ieee754_rem_pio2f+0x254>)
 800a960:	9101      	str	r1, [sp, #4]
 800a962:	2102      	movs	r1, #2
 800a964:	9100      	str	r1, [sp, #0]
 800a966:	a803      	add	r0, sp, #12
 800a968:	4629      	mov	r1, r5
 800a96a:	f000 f891 	bl	800aa90 <__kernel_rem_pio2f>
 800a96e:	2e00      	cmp	r6, #0
 800a970:	f6bf af31 	bge.w	800a7d6 <__ieee754_rem_pio2f+0x62>
 800a974:	edd5 7a00 	vldr	s15, [r5]
 800a978:	eef1 7a67 	vneg.f32	s15, s15
 800a97c:	edc5 7a00 	vstr	s15, [r5]
 800a980:	edd5 7a01 	vldr	s15, [r5, #4]
 800a984:	eef1 7a67 	vneg.f32	s15, s15
 800a988:	edc5 7a01 	vstr	s15, [r5, #4]
 800a98c:	e77a      	b.n	800a884 <__ieee754_rem_pio2f+0x110>
 800a98e:	2303      	movs	r3, #3
 800a990:	e7e5      	b.n	800a95e <__ieee754_rem_pio2f+0x1ea>
 800a992:	bf00      	nop
 800a994:	3f490fd8 	.word	0x3f490fd8
 800a998:	4016cbe3 	.word	0x4016cbe3
 800a99c:	3fc90f80 	.word	0x3fc90f80
 800a9a0:	3fc90fd0 	.word	0x3fc90fd0
 800a9a4:	37354400 	.word	0x37354400
 800a9a8:	37354443 	.word	0x37354443
 800a9ac:	2e85a308 	.word	0x2e85a308
 800a9b0:	43490f80 	.word	0x43490f80
 800a9b4:	3f22f984 	.word	0x3f22f984
 800a9b8:	0800c194 	.word	0x0800c194
 800a9bc:	2e85a300 	.word	0x2e85a300
 800a9c0:	248d3132 	.word	0x248d3132
 800a9c4:	43800000 	.word	0x43800000
 800a9c8:	0800c214 	.word	0x0800c214

0800a9cc <__ieee754_sqrtf>:
 800a9cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <__kernel_cosf>:
 800a9d4:	ee10 3a10 	vmov	r3, s0
 800a9d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a9e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9e4:	da05      	bge.n	800a9f2 <__kernel_cosf+0x1e>
 800a9e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a9ea:	ee17 2a90 	vmov	r2, s15
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	d03b      	beq.n	800aa6a <__kernel_cosf+0x96>
 800a9f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a9f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a9fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa70 <__kernel_cosf+0x9c>
 800a9fe:	4a1d      	ldr	r2, [pc, #116]	; (800aa74 <__kernel_cosf+0xa0>)
 800aa00:	ee66 7a07 	vmul.f32	s15, s12, s14
 800aa04:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800aa78 <__kernel_cosf+0xa4>
 800aa08:	eea6 7a25 	vfma.f32	s14, s12, s11
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800aa7c <__kernel_cosf+0xa8>
 800aa12:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aa16:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800aa80 <__kernel_cosf+0xac>
 800aa1a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aa1e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800aa84 <__kernel_cosf+0xb0>
 800aa22:	eee7 5a06 	vfma.f32	s11, s14, s12
 800aa26:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800aa88 <__kernel_cosf+0xb4>
 800aa2a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aa2e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800aa32:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aa36:	eee6 0a07 	vfma.f32	s1, s12, s14
 800aa3a:	dc04      	bgt.n	800aa46 <__kernel_cosf+0x72>
 800aa3c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800aa40:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800aa44:	4770      	bx	lr
 800aa46:	4a11      	ldr	r2, [pc, #68]	; (800aa8c <__kernel_cosf+0xb8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bfda      	itte	le
 800aa4c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800aa50:	ee07 3a10 	vmovle	s14, r3
 800aa54:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800aa58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa5c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800aa60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800aa64:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa68:	4770      	bx	lr
 800aa6a:	eeb0 0a66 	vmov.f32	s0, s13
 800aa6e:	4770      	bx	lr
 800aa70:	ad47d74e 	.word	0xad47d74e
 800aa74:	3e999999 	.word	0x3e999999
 800aa78:	310f74f6 	.word	0x310f74f6
 800aa7c:	b493f27c 	.word	0xb493f27c
 800aa80:	37d00d01 	.word	0x37d00d01
 800aa84:	bab60b61 	.word	0xbab60b61
 800aa88:	3d2aaaab 	.word	0x3d2aaaab
 800aa8c:	3f480000 	.word	0x3f480000

0800aa90 <__kernel_rem_pio2f>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	ed2d 8b04 	vpush	{d8-d9}
 800aa98:	b0d7      	sub	sp, #348	; 0x15c
 800aa9a:	469b      	mov	fp, r3
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	4bbe      	ldr	r3, [pc, #760]	; (800ad98 <__kernel_rem_pio2f+0x308>)
 800aaa0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800aaa2:	9002      	str	r0, [sp, #8]
 800aaa4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800aaa8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800aaaa:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800aaae:	1ed1      	subs	r1, r2, #3
 800aab0:	2308      	movs	r3, #8
 800aab2:	fb91 f1f3 	sdiv	r1, r1, r3
 800aab6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800aaba:	f10b 3aff 	add.w	sl, fp, #4294967295
 800aabe:	1c4c      	adds	r4, r1, #1
 800aac0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800aac4:	eba1 050a 	sub.w	r5, r1, sl
 800aac8:	aa1a      	add	r2, sp, #104	; 0x68
 800aaca:	eb09 070a 	add.w	r7, r9, sl
 800aace:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800aad2:	4696      	mov	lr, r2
 800aad4:	2300      	movs	r3, #0
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	dd0f      	ble.n	800aafa <__kernel_rem_pio2f+0x6a>
 800aada:	af42      	add	r7, sp, #264	; 0x108
 800aadc:	2200      	movs	r2, #0
 800aade:	454a      	cmp	r2, r9
 800aae0:	dc27      	bgt.n	800ab32 <__kernel_rem_pio2f+0xa2>
 800aae2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800aae6:	eb0b 0302 	add.w	r3, fp, r2
 800aaea:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800aaee:	9d02      	ldr	r5, [sp, #8]
 800aaf0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800aaf4:	f04f 0c00 	mov.w	ip, #0
 800aaf8:	e015      	b.n	800ab26 <__kernel_rem_pio2f+0x96>
 800aafa:	42dd      	cmn	r5, r3
 800aafc:	bf5d      	ittte	pl
 800aafe:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800ab02:	ee07 2a90 	vmovpl	s15, r2
 800ab06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ab0a:	eef0 7a47 	vmovmi.f32	s15, s14
 800ab0e:	ecee 7a01 	vstmia	lr!, {s15}
 800ab12:	3301      	adds	r3, #1
 800ab14:	e7df      	b.n	800aad6 <__kernel_rem_pio2f+0x46>
 800ab16:	ecf5 6a01 	vldmia	r5!, {s13}
 800ab1a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ab1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ab22:	f10c 0c01 	add.w	ip, ip, #1
 800ab26:	45d4      	cmp	ip, sl
 800ab28:	ddf5      	ble.n	800ab16 <__kernel_rem_pio2f+0x86>
 800ab2a:	ece7 7a01 	vstmia	r7!, {s15}
 800ab2e:	3201      	adds	r2, #1
 800ab30:	e7d5      	b.n	800aade <__kernel_rem_pio2f+0x4e>
 800ab32:	ab06      	add	r3, sp, #24
 800ab34:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800ada4 <__kernel_rem_pio2f+0x314>
 800ab3e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800ada0 <__kernel_rem_pio2f+0x310>
 800ab42:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	464d      	mov	r5, r9
 800ab4a:	ab56      	add	r3, sp, #344	; 0x158
 800ab4c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800ab50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ab54:	3f01      	subs	r7, #1
 800ab56:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800ab5a:	00bf      	lsls	r7, r7, #2
 800ab5c:	ab56      	add	r3, sp, #344	; 0x158
 800ab5e:	19da      	adds	r2, r3, r7
 800ab60:	3a4c      	subs	r2, #76	; 0x4c
 800ab62:	2300      	movs	r3, #0
 800ab64:	1ae9      	subs	r1, r5, r3
 800ab66:	2900      	cmp	r1, #0
 800ab68:	dc4c      	bgt.n	800ac04 <__kernel_rem_pio2f+0x174>
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fb82 	bl	800b274 <scalbnf>
 800ab70:	eeb0 8a40 	vmov.f32	s16, s0
 800ab74:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ab78:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ab7c:	f000 fb38 	bl	800b1f0 <floorf>
 800ab80:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ab84:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ab8e:	edcd 7a01 	vstr	s15, [sp, #4]
 800ab92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab96:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ab9a:	dd48      	ble.n	800ac2e <__kernel_rem_pio2f+0x19e>
 800ab9c:	1e69      	subs	r1, r5, #1
 800ab9e:	ab06      	add	r3, sp, #24
 800aba0:	f1c4 0008 	rsb	r0, r4, #8
 800aba4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800aba8:	9a01      	ldr	r2, [sp, #4]
 800abaa:	fa4c f300 	asr.w	r3, ip, r0
 800abae:	441a      	add	r2, r3
 800abb0:	4083      	lsls	r3, r0
 800abb2:	9201      	str	r2, [sp, #4]
 800abb4:	ebac 0203 	sub.w	r2, ip, r3
 800abb8:	ab06      	add	r3, sp, #24
 800abba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800abbe:	f1c4 0307 	rsb	r3, r4, #7
 800abc2:	fa42 f803 	asr.w	r8, r2, r3
 800abc6:	f1b8 0f00 	cmp.w	r8, #0
 800abca:	dd41      	ble.n	800ac50 <__kernel_rem_pio2f+0x1c0>
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	2000      	movs	r0, #0
 800abd0:	3301      	adds	r3, #1
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	4601      	mov	r1, r0
 800abd6:	4285      	cmp	r5, r0
 800abd8:	dc6d      	bgt.n	800acb6 <__kernel_rem_pio2f+0x226>
 800abda:	2c00      	cmp	r4, #0
 800abdc:	dd04      	ble.n	800abe8 <__kernel_rem_pio2f+0x158>
 800abde:	2c01      	cmp	r4, #1
 800abe0:	d07e      	beq.n	800ace0 <__kernel_rem_pio2f+0x250>
 800abe2:	2c02      	cmp	r4, #2
 800abe4:	f000 8086 	beq.w	800acf4 <__kernel_rem_pio2f+0x264>
 800abe8:	f1b8 0f02 	cmp.w	r8, #2
 800abec:	d130      	bne.n	800ac50 <__kernel_rem_pio2f+0x1c0>
 800abee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800abf2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800abf6:	b359      	cbz	r1, 800ac50 <__kernel_rem_pio2f+0x1c0>
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fb3b 	bl	800b274 <scalbnf>
 800abfe:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ac02:	e025      	b.n	800ac50 <__kernel_rem_pio2f+0x1c0>
 800ac04:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ac08:	a806      	add	r0, sp, #24
 800ac0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac12:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ac16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac1a:	ee10 1a10 	vmov	r1, s0
 800ac1e:	ed32 0a01 	vldmdb	r2!, {s0}
 800ac22:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800ac26:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	e79a      	b.n	800ab64 <__kernel_rem_pio2f+0xd4>
 800ac2e:	d106      	bne.n	800ac3e <__kernel_rem_pio2f+0x1ae>
 800ac30:	1e6b      	subs	r3, r5, #1
 800ac32:	aa06      	add	r2, sp, #24
 800ac34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ac38:	ea4f 2822 	mov.w	r8, r2, asr #8
 800ac3c:	e7c3      	b.n	800abc6 <__kernel_rem_pio2f+0x136>
 800ac3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ac42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ac46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4a:	da31      	bge.n	800acb0 <__kernel_rem_pio2f+0x220>
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac58:	f040 80a8 	bne.w	800adac <__kernel_rem_pio2f+0x31c>
 800ac5c:	1e6b      	subs	r3, r5, #1
 800ac5e:	4618      	mov	r0, r3
 800ac60:	2200      	movs	r2, #0
 800ac62:	4548      	cmp	r0, r9
 800ac64:	da4d      	bge.n	800ad02 <__kernel_rem_pio2f+0x272>
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	f000 8087 	beq.w	800ad7a <__kernel_rem_pio2f+0x2ea>
 800ac6c:	aa06      	add	r2, sp, #24
 800ac6e:	3c08      	subs	r4, #8
 800ac70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac74:	2900      	cmp	r1, #0
 800ac76:	f000 808d 	beq.w	800ad94 <__kernel_rem_pio2f+0x304>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	f000 faf7 	bl	800b274 <scalbnf>
 800ac86:	9b02      	ldr	r3, [sp, #8]
 800ac88:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ada4 <__kernel_rem_pio2f+0x314>
 800ac8c:	0099      	lsls	r1, r3, #2
 800ac8e:	aa42      	add	r2, sp, #264	; 0x108
 800ac90:	1850      	adds	r0, r2, r1
 800ac92:	1d05      	adds	r5, r0, #4
 800ac94:	461c      	mov	r4, r3
 800ac96:	2c00      	cmp	r4, #0
 800ac98:	f280 80b8 	bge.w	800ae0c <__kernel_rem_pio2f+0x37c>
 800ac9c:	2500      	movs	r5, #0
 800ac9e:	1b5c      	subs	r4, r3, r5
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	f2c0 80d8 	blt.w	800ae56 <__kernel_rem_pio2f+0x3c6>
 800aca6:	4f3d      	ldr	r7, [pc, #244]	; (800ad9c <__kernel_rem_pio2f+0x30c>)
 800aca8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800acac:	2400      	movs	r4, #0
 800acae:	e0c6      	b.n	800ae3e <__kernel_rem_pio2f+0x3ae>
 800acb0:	f04f 0802 	mov.w	r8, #2
 800acb4:	e78a      	b.n	800abcc <__kernel_rem_pio2f+0x13c>
 800acb6:	ab06      	add	r3, sp, #24
 800acb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800acbc:	b949      	cbnz	r1, 800acd2 <__kernel_rem_pio2f+0x242>
 800acbe:	b12b      	cbz	r3, 800accc <__kernel_rem_pio2f+0x23c>
 800acc0:	aa06      	add	r2, sp, #24
 800acc2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800acc6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800acca:	2301      	movs	r3, #1
 800accc:	3001      	adds	r0, #1
 800acce:	4619      	mov	r1, r3
 800acd0:	e781      	b.n	800abd6 <__kernel_rem_pio2f+0x146>
 800acd2:	aa06      	add	r2, sp, #24
 800acd4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800acd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800acdc:	460b      	mov	r3, r1
 800acde:	e7f5      	b.n	800accc <__kernel_rem_pio2f+0x23c>
 800ace0:	1e68      	subs	r0, r5, #1
 800ace2:	ab06      	add	r3, sp, #24
 800ace4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ace8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acec:	aa06      	add	r2, sp, #24
 800acee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800acf2:	e779      	b.n	800abe8 <__kernel_rem_pio2f+0x158>
 800acf4:	1e68      	subs	r0, r5, #1
 800acf6:	ab06      	add	r3, sp, #24
 800acf8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800acfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad00:	e7f4      	b.n	800acec <__kernel_rem_pio2f+0x25c>
 800ad02:	a906      	add	r1, sp, #24
 800ad04:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ad08:	3801      	subs	r0, #1
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	e7a9      	b.n	800ac62 <__kernel_rem_pio2f+0x1d2>
 800ad0e:	f10c 0c01 	add.w	ip, ip, #1
 800ad12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	d0f9      	beq.n	800ad0e <__kernel_rem_pio2f+0x27e>
 800ad1a:	eb0b 0305 	add.w	r3, fp, r5
 800ad1e:	aa1a      	add	r2, sp, #104	; 0x68
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	1898      	adds	r0, r3, r2
 800ad24:	3004      	adds	r0, #4
 800ad26:	1c69      	adds	r1, r5, #1
 800ad28:	3704      	adds	r7, #4
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4465      	add	r5, ip
 800ad2e:	9005      	str	r0, [sp, #20]
 800ad30:	428d      	cmp	r5, r1
 800ad32:	f6ff af0a 	blt.w	800ab4a <__kernel_rem_pio2f+0xba>
 800ad36:	a81a      	add	r0, sp, #104	; 0x68
 800ad38:	eb02 0c03 	add.w	ip, r2, r3
 800ad3c:	4484      	add	ip, r0
 800ad3e:	9803      	ldr	r0, [sp, #12]
 800ad40:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ad44:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800ad48:	9001      	str	r0, [sp, #4]
 800ad4a:	ee07 0a90 	vmov	s15, r0
 800ad4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad52:	9805      	ldr	r0, [sp, #20]
 800ad54:	edcc 7a00 	vstr	s15, [ip]
 800ad58:	eddf 7a13 	vldr	s15, [pc, #76]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800ad5c:	eb00 0802 	add.w	r8, r0, r2
 800ad60:	f04f 0c00 	mov.w	ip, #0
 800ad64:	45d4      	cmp	ip, sl
 800ad66:	dd0c      	ble.n	800ad82 <__kernel_rem_pio2f+0x2f2>
 800ad68:	eb02 0c07 	add.w	ip, r2, r7
 800ad6c:	a842      	add	r0, sp, #264	; 0x108
 800ad6e:	4484      	add	ip, r0
 800ad70:	edcc 7a01 	vstr	s15, [ip, #4]
 800ad74:	3101      	adds	r1, #1
 800ad76:	3204      	adds	r2, #4
 800ad78:	e7da      	b.n	800ad30 <__kernel_rem_pio2f+0x2a0>
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	f04f 0c01 	mov.w	ip, #1
 800ad80:	e7c7      	b.n	800ad12 <__kernel_rem_pio2f+0x282>
 800ad82:	ecfe 6a01 	vldmia	lr!, {s13}
 800ad86:	ed38 7a01 	vldmdb	r8!, {s14}
 800ad8a:	f10c 0c01 	add.w	ip, ip, #1
 800ad8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ad92:	e7e7      	b.n	800ad64 <__kernel_rem_pio2f+0x2d4>
 800ad94:	3b01      	subs	r3, #1
 800ad96:	e769      	b.n	800ac6c <__kernel_rem_pio2f+0x1dc>
 800ad98:	0800c558 	.word	0x0800c558
 800ad9c:	0800c52c 	.word	0x0800c52c
 800ada0:	43800000 	.word	0x43800000
 800ada4:	3b800000 	.word	0x3b800000
 800ada8:	00000000 	.word	0x00000000
 800adac:	4260      	negs	r0, r4
 800adae:	eeb0 0a48 	vmov.f32	s0, s16
 800adb2:	f000 fa5f 	bl	800b274 <scalbnf>
 800adb6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800ada0 <__kernel_rem_pio2f+0x310>
 800adba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800adbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc2:	db1a      	blt.n	800adfa <__kernel_rem_pio2f+0x36a>
 800adc4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ada4 <__kernel_rem_pio2f+0x314>
 800adc8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800adcc:	aa06      	add	r2, sp, #24
 800adce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800add2:	a906      	add	r1, sp, #24
 800add4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add8:	3408      	adds	r4, #8
 800adda:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800adde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ade2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ade6:	ee10 3a10 	vmov	r3, s0
 800adea:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800adee:	1c6b      	adds	r3, r5, #1
 800adf0:	ee17 2a90 	vmov	r2, s15
 800adf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800adf8:	e73f      	b.n	800ac7a <__kernel_rem_pio2f+0x1ea>
 800adfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800adfe:	aa06      	add	r2, sp, #24
 800ae00:	ee10 3a10 	vmov	r3, s0
 800ae04:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ae08:	462b      	mov	r3, r5
 800ae0a:	e736      	b.n	800ac7a <__kernel_rem_pio2f+0x1ea>
 800ae0c:	aa06      	add	r2, sp, #24
 800ae0e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ae12:	9202      	str	r2, [sp, #8]
 800ae14:	ee07 2a90 	vmov	s15, r2
 800ae18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae1c:	3c01      	subs	r4, #1
 800ae1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ae22:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ae26:	ed65 7a01 	vstmdb	r5!, {s15}
 800ae2a:	e734      	b.n	800ac96 <__kernel_rem_pio2f+0x206>
 800ae2c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800ae30:	ecf7 6a01 	vldmia	r7!, {s13}
 800ae34:	ed9c 7a00 	vldr	s14, [ip]
 800ae38:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ae3c:	3401      	adds	r4, #1
 800ae3e:	454c      	cmp	r4, r9
 800ae40:	dc01      	bgt.n	800ae46 <__kernel_rem_pio2f+0x3b6>
 800ae42:	42a5      	cmp	r5, r4
 800ae44:	daf2      	bge.n	800ae2c <__kernel_rem_pio2f+0x39c>
 800ae46:	aa56      	add	r2, sp, #344	; 0x158
 800ae48:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800ae4c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800ae50:	3501      	adds	r5, #1
 800ae52:	3804      	subs	r0, #4
 800ae54:	e723      	b.n	800ac9e <__kernel_rem_pio2f+0x20e>
 800ae56:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ae58:	2a03      	cmp	r2, #3
 800ae5a:	d84d      	bhi.n	800aef8 <__kernel_rem_pio2f+0x468>
 800ae5c:	e8df f002 	tbb	[pc, r2]
 800ae60:	021f1f3e 	.word	0x021f1f3e
 800ae64:	aa56      	add	r2, sp, #344	; 0x158
 800ae66:	4411      	add	r1, r2
 800ae68:	399c      	subs	r1, #156	; 0x9c
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	461c      	mov	r4, r3
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	dc5f      	bgt.n	800af32 <__kernel_rem_pio2f+0x4a2>
 800ae72:	4608      	mov	r0, r1
 800ae74:	461c      	mov	r4, r3
 800ae76:	2c01      	cmp	r4, #1
 800ae78:	dc6b      	bgt.n	800af52 <__kernel_rem_pio2f+0x4c2>
 800ae7a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	dc77      	bgt.n	800af72 <__kernel_rem_pio2f+0x4e2>
 800ae82:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ae86:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ae8a:	f1b8 0f00 	cmp.w	r8, #0
 800ae8e:	d176      	bne.n	800af7e <__kernel_rem_pio2f+0x4ee>
 800ae90:	edc6 6a00 	vstr	s13, [r6]
 800ae94:	ed86 7a01 	vstr	s14, [r6, #4]
 800ae98:	edc6 7a02 	vstr	s15, [r6, #8]
 800ae9c:	e02c      	b.n	800aef8 <__kernel_rem_pio2f+0x468>
 800ae9e:	aa56      	add	r2, sp, #344	; 0x158
 800aea0:	4411      	add	r1, r2
 800aea2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800aea6:	399c      	subs	r1, #156	; 0x9c
 800aea8:	4618      	mov	r0, r3
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	da32      	bge.n	800af14 <__kernel_rem_pio2f+0x484>
 800aeae:	f1b8 0f00 	cmp.w	r8, #0
 800aeb2:	d035      	beq.n	800af20 <__kernel_rem_pio2f+0x490>
 800aeb4:	eef1 7a47 	vneg.f32	s15, s14
 800aeb8:	edc6 7a00 	vstr	s15, [r6]
 800aebc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800aec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aec4:	a82f      	add	r0, sp, #188	; 0xbc
 800aec6:	2101      	movs	r1, #1
 800aec8:	428b      	cmp	r3, r1
 800aeca:	da2c      	bge.n	800af26 <__kernel_rem_pio2f+0x496>
 800aecc:	f1b8 0f00 	cmp.w	r8, #0
 800aed0:	d001      	beq.n	800aed6 <__kernel_rem_pio2f+0x446>
 800aed2:	eef1 7a67 	vneg.f32	s15, s15
 800aed6:	edc6 7a01 	vstr	s15, [r6, #4]
 800aeda:	e00d      	b.n	800aef8 <__kernel_rem_pio2f+0x468>
 800aedc:	aa56      	add	r2, sp, #344	; 0x158
 800aede:	4411      	add	r1, r2
 800aee0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ada8 <__kernel_rem_pio2f+0x318>
 800aee4:	399c      	subs	r1, #156	; 0x9c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	da0e      	bge.n	800af08 <__kernel_rem_pio2f+0x478>
 800aeea:	f1b8 0f00 	cmp.w	r8, #0
 800aeee:	d001      	beq.n	800aef4 <__kernel_rem_pio2f+0x464>
 800aef0:	eef1 7a67 	vneg.f32	s15, s15
 800aef4:	edc6 7a00 	vstr	s15, [r6]
 800aef8:	9b01      	ldr	r3, [sp, #4]
 800aefa:	f003 0007 	and.w	r0, r3, #7
 800aefe:	b057      	add	sp, #348	; 0x15c
 800af00:	ecbd 8b04 	vpop	{d8-d9}
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	ed31 7a01 	vldmdb	r1!, {s14}
 800af0c:	3b01      	subs	r3, #1
 800af0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af12:	e7e8      	b.n	800aee6 <__kernel_rem_pio2f+0x456>
 800af14:	ed71 7a01 	vldmdb	r1!, {s15}
 800af18:	3801      	subs	r0, #1
 800af1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af1e:	e7c4      	b.n	800aeaa <__kernel_rem_pio2f+0x41a>
 800af20:	eef0 7a47 	vmov.f32	s15, s14
 800af24:	e7c8      	b.n	800aeb8 <__kernel_rem_pio2f+0x428>
 800af26:	ecb0 7a01 	vldmia	r0!, {s14}
 800af2a:	3101      	adds	r1, #1
 800af2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af30:	e7ca      	b.n	800aec8 <__kernel_rem_pio2f+0x438>
 800af32:	ed50 7a02 	vldr	s15, [r0, #-8]
 800af36:	ed70 6a01 	vldmdb	r0!, {s13}
 800af3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800af3e:	3c01      	subs	r4, #1
 800af40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af44:	ed00 7a01 	vstr	s14, [r0, #-4]
 800af48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af4c:	edc0 7a00 	vstr	s15, [r0]
 800af50:	e78d      	b.n	800ae6e <__kernel_rem_pio2f+0x3de>
 800af52:	ed50 7a02 	vldr	s15, [r0, #-8]
 800af56:	ed70 6a01 	vldmdb	r0!, {s13}
 800af5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800af5e:	3c01      	subs	r4, #1
 800af60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af64:	ed00 7a01 	vstr	s14, [r0, #-4]
 800af68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6c:	edc0 7a00 	vstr	s15, [r0]
 800af70:	e781      	b.n	800ae76 <__kernel_rem_pio2f+0x3e6>
 800af72:	ed31 7a01 	vldmdb	r1!, {s14}
 800af76:	3b01      	subs	r3, #1
 800af78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af7c:	e77f      	b.n	800ae7e <__kernel_rem_pio2f+0x3ee>
 800af7e:	eef1 6a66 	vneg.f32	s13, s13
 800af82:	eeb1 7a47 	vneg.f32	s14, s14
 800af86:	edc6 6a00 	vstr	s13, [r6]
 800af8a:	ed86 7a01 	vstr	s14, [r6, #4]
 800af8e:	eef1 7a67 	vneg.f32	s15, s15
 800af92:	e781      	b.n	800ae98 <__kernel_rem_pio2f+0x408>

0800af94 <__kernel_sinf>:
 800af94:	ee10 3a10 	vmov	r3, s0
 800af98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800afa0:	da04      	bge.n	800afac <__kernel_sinf+0x18>
 800afa2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800afa6:	ee17 3a90 	vmov	r3, s15
 800afaa:	b35b      	cbz	r3, 800b004 <__kernel_sinf+0x70>
 800afac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800afb0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b008 <__kernel_sinf+0x74>
 800afb4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b00c <__kernel_sinf+0x78>
 800afb8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800afbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b010 <__kernel_sinf+0x7c>
 800afc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800afc4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b014 <__kernel_sinf+0x80>
 800afc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800afcc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b018 <__kernel_sinf+0x84>
 800afd0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800afd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800afd8:	b930      	cbnz	r0, 800afe8 <__kernel_sinf+0x54>
 800afda:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b01c <__kernel_sinf+0x88>
 800afde:	eea7 6a27 	vfma.f32	s12, s14, s15
 800afe2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800afe6:	4770      	bx	lr
 800afe8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800afec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800aff0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aff4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aff8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b020 <__kernel_sinf+0x8c>
 800affc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b000:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	2f2ec9d3 	.word	0x2f2ec9d3
 800b00c:	b2d72f34 	.word	0xb2d72f34
 800b010:	3638ef1b 	.word	0x3638ef1b
 800b014:	b9500d01 	.word	0xb9500d01
 800b018:	3c088889 	.word	0x3c088889
 800b01c:	be2aaaab 	.word	0xbe2aaaab
 800b020:	3e2aaaab 	.word	0x3e2aaaab

0800b024 <matherr>:
 800b024:	2000      	movs	r0, #0
 800b026:	4770      	bx	lr

0800b028 <nan>:
 800b028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b030 <nan+0x8>
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	00000000 	.word	0x00000000
 800b034:	7ff80000 	.word	0x7ff80000

0800b038 <atanf>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	ee10 5a10 	vmov	r5, s0
 800b03e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b042:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b046:	eef0 7a40 	vmov.f32	s15, s0
 800b04a:	db10      	blt.n	800b06e <atanf+0x36>
 800b04c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b050:	dd04      	ble.n	800b05c <atanf+0x24>
 800b052:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b056:	eeb0 0a67 	vmov.f32	s0, s15
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b194 <atanf+0x15c>
 800b060:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b198 <atanf+0x160>
 800b064:	2d00      	cmp	r5, #0
 800b066:	bfd8      	it	le
 800b068:	eef0 7a47 	vmovle.f32	s15, s14
 800b06c:	e7f3      	b.n	800b056 <atanf+0x1e>
 800b06e:	4b4b      	ldr	r3, [pc, #300]	; (800b19c <atanf+0x164>)
 800b070:	429c      	cmp	r4, r3
 800b072:	dc10      	bgt.n	800b096 <atanf+0x5e>
 800b074:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b078:	da0a      	bge.n	800b090 <atanf+0x58>
 800b07a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b1a0 <atanf+0x168>
 800b07e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b086:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08e:	dce2      	bgt.n	800b056 <atanf+0x1e>
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	e013      	b.n	800b0be <atanf+0x86>
 800b096:	f000 f8a3 	bl	800b1e0 <fabsf>
 800b09a:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <atanf+0x16c>)
 800b09c:	429c      	cmp	r4, r3
 800b09e:	dc4f      	bgt.n	800b140 <atanf+0x108>
 800b0a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	dc41      	bgt.n	800b12c <atanf+0xf4>
 800b0a8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b0ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b0c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b1a8 <atanf+0x170>
 800b0c8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b1ac <atanf+0x174>
 800b0cc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b1b0 <atanf+0x178>
 800b0d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b0d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b0d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b1b4 <atanf+0x17c>
 800b0dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b0e0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b1b8 <atanf+0x180>
 800b0e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b0e8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b1bc <atanf+0x184>
 800b0ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b0f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1c0 <atanf+0x188>
 800b0f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b0f8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b1c4 <atanf+0x18c>
 800b0fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b100:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b1c8 <atanf+0x190>
 800b104:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b108:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b1cc <atanf+0x194>
 800b10c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b110:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b1d0 <atanf+0x198>
 800b114:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b118:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b11c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b120:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b124:	d121      	bne.n	800b16a <atanf+0x132>
 800b126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b12a:	e794      	b.n	800b056 <atanf+0x1e>
 800b12c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b130:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b134:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b138:	2301      	movs	r3, #1
 800b13a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b13e:	e7be      	b.n	800b0be <atanf+0x86>
 800b140:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <atanf+0x19c>)
 800b142:	429c      	cmp	r4, r3
 800b144:	dc0b      	bgt.n	800b15e <atanf+0x126>
 800b146:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b14a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b152:	2302      	movs	r3, #2
 800b154:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b15c:	e7af      	b.n	800b0be <atanf+0x86>
 800b15e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b162:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b166:	2303      	movs	r3, #3
 800b168:	e7a9      	b.n	800b0be <atanf+0x86>
 800b16a:	4a1b      	ldr	r2, [pc, #108]	; (800b1d8 <atanf+0x1a0>)
 800b16c:	491b      	ldr	r1, [pc, #108]	; (800b1dc <atanf+0x1a4>)
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	441a      	add	r2, r3
 800b172:	440b      	add	r3, r1
 800b174:	edd3 6a00 	vldr	s13, [r3]
 800b178:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b182:	ed92 7a00 	vldr	s14, [r2]
 800b186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b18a:	bfb8      	it	lt
 800b18c:	eef1 7a67 	vneglt.f32	s15, s15
 800b190:	e761      	b.n	800b056 <atanf+0x1e>
 800b192:	bf00      	nop
 800b194:	bfc90fdb 	.word	0xbfc90fdb
 800b198:	3fc90fdb 	.word	0x3fc90fdb
 800b19c:	3edfffff 	.word	0x3edfffff
 800b1a0:	7149f2ca 	.word	0x7149f2ca
 800b1a4:	3f97ffff 	.word	0x3f97ffff
 800b1a8:	3c8569d7 	.word	0x3c8569d7
 800b1ac:	3d4bda59 	.word	0x3d4bda59
 800b1b0:	bd6ef16b 	.word	0xbd6ef16b
 800b1b4:	3d886b35 	.word	0x3d886b35
 800b1b8:	3dba2e6e 	.word	0x3dba2e6e
 800b1bc:	3e124925 	.word	0x3e124925
 800b1c0:	3eaaaaab 	.word	0x3eaaaaab
 800b1c4:	bd15a221 	.word	0xbd15a221
 800b1c8:	bd9d8795 	.word	0xbd9d8795
 800b1cc:	bde38e38 	.word	0xbde38e38
 800b1d0:	be4ccccd 	.word	0xbe4ccccd
 800b1d4:	401bffff 	.word	0x401bffff
 800b1d8:	0800c564 	.word	0x0800c564
 800b1dc:	0800c574 	.word	0x0800c574

0800b1e0 <fabsf>:
 800b1e0:	ee10 3a10 	vmov	r3, s0
 800b1e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1e8:	ee00 3a10 	vmov	s0, r3
 800b1ec:	4770      	bx	lr
	...

0800b1f0 <floorf>:
 800b1f0:	ee10 3a10 	vmov	r3, s0
 800b1f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b1f8:	0dca      	lsrs	r2, r1, #23
 800b1fa:	3a7f      	subs	r2, #127	; 0x7f
 800b1fc:	2a16      	cmp	r2, #22
 800b1fe:	dc2a      	bgt.n	800b256 <floorf+0x66>
 800b200:	2a00      	cmp	r2, #0
 800b202:	da11      	bge.n	800b228 <floorf+0x38>
 800b204:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b268 <floorf+0x78>
 800b208:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b20c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b214:	dd05      	ble.n	800b222 <floorf+0x32>
 800b216:	2b00      	cmp	r3, #0
 800b218:	da23      	bge.n	800b262 <floorf+0x72>
 800b21a:	4a14      	ldr	r2, [pc, #80]	; (800b26c <floorf+0x7c>)
 800b21c:	2900      	cmp	r1, #0
 800b21e:	bf18      	it	ne
 800b220:	4613      	movne	r3, r2
 800b222:	ee00 3a10 	vmov	s0, r3
 800b226:	4770      	bx	lr
 800b228:	4911      	ldr	r1, [pc, #68]	; (800b270 <floorf+0x80>)
 800b22a:	4111      	asrs	r1, r2
 800b22c:	420b      	tst	r3, r1
 800b22e:	d0fa      	beq.n	800b226 <floorf+0x36>
 800b230:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b268 <floorf+0x78>
 800b234:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b238:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b240:	ddef      	ble.n	800b222 <floorf+0x32>
 800b242:	2b00      	cmp	r3, #0
 800b244:	bfbe      	ittt	lt
 800b246:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b24a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b24e:	189b      	addlt	r3, r3, r2
 800b250:	ea23 0301 	bic.w	r3, r3, r1
 800b254:	e7e5      	b.n	800b222 <floorf+0x32>
 800b256:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b25a:	d3e4      	bcc.n	800b226 <floorf+0x36>
 800b25c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b260:	4770      	bx	lr
 800b262:	2300      	movs	r3, #0
 800b264:	e7dd      	b.n	800b222 <floorf+0x32>
 800b266:	bf00      	nop
 800b268:	7149f2ca 	.word	0x7149f2ca
 800b26c:	bf800000 	.word	0xbf800000
 800b270:	007fffff 	.word	0x007fffff

0800b274 <scalbnf>:
 800b274:	b508      	push	{r3, lr}
 800b276:	ee10 2a10 	vmov	r2, s0
 800b27a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b27e:	ed2d 8b02 	vpush	{d8}
 800b282:	eef0 0a40 	vmov.f32	s1, s0
 800b286:	d004      	beq.n	800b292 <scalbnf+0x1e>
 800b288:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b28c:	d306      	bcc.n	800b29c <scalbnf+0x28>
 800b28e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b292:	ecbd 8b02 	vpop	{d8}
 800b296:	eeb0 0a60 	vmov.f32	s0, s1
 800b29a:	bd08      	pop	{r3, pc}
 800b29c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2a0:	d21c      	bcs.n	800b2dc <scalbnf+0x68>
 800b2a2:	4b1f      	ldr	r3, [pc, #124]	; (800b320 <scalbnf+0xac>)
 800b2a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b324 <scalbnf+0xb0>
 800b2a8:	4298      	cmp	r0, r3
 800b2aa:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b2ae:	db10      	blt.n	800b2d2 <scalbnf+0x5e>
 800b2b0:	ee10 2a90 	vmov	r2, s1
 800b2b4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b2b8:	3b19      	subs	r3, #25
 800b2ba:	4403      	add	r3, r0
 800b2bc:	2bfe      	cmp	r3, #254	; 0xfe
 800b2be:	dd0f      	ble.n	800b2e0 <scalbnf+0x6c>
 800b2c0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b328 <scalbnf+0xb4>
 800b2c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c8:	f000 f834 	bl	800b334 <copysignf>
 800b2cc:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b2d0:	e7df      	b.n	800b292 <scalbnf+0x1e>
 800b2d2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b32c <scalbnf+0xb8>
 800b2d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b2da:	e7da      	b.n	800b292 <scalbnf+0x1e>
 800b2dc:	0ddb      	lsrs	r3, r3, #23
 800b2de:	e7ec      	b.n	800b2ba <scalbnf+0x46>
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dd06      	ble.n	800b2f2 <scalbnf+0x7e>
 800b2e4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b2e8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b2ec:	ee00 3a90 	vmov	s1, r3
 800b2f0:	e7cf      	b.n	800b292 <scalbnf+0x1e>
 800b2f2:	f113 0f16 	cmn.w	r3, #22
 800b2f6:	da06      	bge.n	800b306 <scalbnf+0x92>
 800b2f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2fc:	4298      	cmp	r0, r3
 800b2fe:	dcdf      	bgt.n	800b2c0 <scalbnf+0x4c>
 800b300:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b32c <scalbnf+0xb8>
 800b304:	e7de      	b.n	800b2c4 <scalbnf+0x50>
 800b306:	3319      	adds	r3, #25
 800b308:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b30c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b310:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b330 <scalbnf+0xbc>
 800b314:	ee07 3a10 	vmov	s14, r3
 800b318:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b31c:	e7b9      	b.n	800b292 <scalbnf+0x1e>
 800b31e:	bf00      	nop
 800b320:	ffff3cb0 	.word	0xffff3cb0
 800b324:	4c000000 	.word	0x4c000000
 800b328:	7149f2ca 	.word	0x7149f2ca
 800b32c:	0da24260 	.word	0x0da24260
 800b330:	33000000 	.word	0x33000000

0800b334 <copysignf>:
 800b334:	ee10 3a10 	vmov	r3, s0
 800b338:	ee10 2a90 	vmov	r2, s1
 800b33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b340:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b344:	4313      	orrs	r3, r2
 800b346:	ee00 3a10 	vmov	s0, r3
 800b34a:	4770      	bx	lr

0800b34c <_init>:
 800b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b34e:	bf00      	nop
 800b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b352:	bc08      	pop	{r3}
 800b354:	469e      	mov	lr, r3
 800b356:	4770      	bx	lr

0800b358 <_fini>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	bf00      	nop
 800b35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b35e:	bc08      	pop	{r3}
 800b360:	469e      	mov	lr, r3
 800b362:	4770      	bx	lr
