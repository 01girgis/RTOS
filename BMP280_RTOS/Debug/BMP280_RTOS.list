
BMP280_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  0800a880  0800a880  0001a880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0d8  0800b0d8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0d8  0800b0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0e0  0800b0e0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0e0  0800b0e0  0001b0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004184  200001ec  0800b2d4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004370  0800b2d4  00024370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc5a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c1f  00000000  00000000  0003ce76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  00040a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  00042190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026be9  00000000  00000000  000436c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001339d  00000000  00000000  0006a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de5eb  00000000  00000000  0007d64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bc39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b8  00000000  00000000  0015bcb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a868 	.word	0x0800a868

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800a868 	.word	0x0800a868

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b972 	b.w	8000e84 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9e08      	ldr	r6, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	4688      	mov	r8, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14b      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc6:	428a      	cmp	r2, r1
 8000bc8:	4615      	mov	r5, r2
 8000bca:	d967      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0720 	rsb	r7, r2, #32
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	fa20 f707 	lsr.w	r7, r0, r7
 8000bde:	4095      	lsls	r5, r2
 8000be0:	ea47 0803 	orr.w	r8, r7, r3
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf0:	fa1f fc85 	uxth.w	ip, r5
 8000bf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18eb      	adds	r3, r5, r3
 8000c06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0a:	f080 811b 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8118 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c14:	3f02      	subs	r7, #2
 8000c16:	442b      	add	r3, r5
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	192c      	adds	r4, r5, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8107 	bcs.w	8000e48 <__udivmoddi4+0x290>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	f240 8104 	bls.w	8000e48 <__udivmoddi4+0x290>
 8000c40:	3802      	subs	r0, #2
 8000c42:	442c      	add	r4, r5
 8000c44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c48:	eba4 040c 	sub.w	r4, r4, ip
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	b11e      	cbz	r6, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c6 4300 	strd	r4, r3, [r6]
 8000c58:	4639      	mov	r1, r7
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0xbe>
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	f000 80eb 	beq.w	8000e3e <__udivmoddi4+0x286>
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c6e:	4638      	mov	r0, r7
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	fab3 f783 	clz	r7, r3
 8000c7a:	2f00      	cmp	r7, #0
 8000c7c:	d147      	bne.n	8000d0e <__udivmoddi4+0x156>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d302      	bcc.n	8000c88 <__udivmoddi4+0xd0>
 8000c82:	4282      	cmp	r2, r0
 8000c84:	f200 80fa 	bhi.w	8000e7c <__udivmoddi4+0x2c4>
 8000c88:	1a84      	subs	r4, r0, r2
 8000c8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4698      	mov	r8, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d0e0      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000c96:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9a:	e7dd      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000c9c:	b902      	cbnz	r2, 8000ca0 <__udivmoddi4+0xe8>
 8000c9e:	deff      	udf	#255	; 0xff
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	f040 808f 	bne.w	8000dc8 <__udivmoddi4+0x210>
 8000caa:	1b49      	subs	r1, r1, r5
 8000cac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb0:	fa1f f885 	uxth.w	r8, r5
 8000cb4:	2701      	movs	r7, #1
 8000cb6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x124>
 8000ccc:	18eb      	adds	r3, r5, r3
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x122>
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ce8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x14c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x14a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80b6 	bhi.w	8000e6e <__udivmoddi4+0x2b6>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e79f      	b.n	8000c4e <__udivmoddi4+0x96>
 8000d0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d12:	40bb      	lsls	r3, r7
 8000d14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d32:	0c2c      	lsrs	r4, r5, #16
 8000d34:	fb08 3319 	mls	r3, r8, r9, r3
 8000d38:	fa1f fa8e 	uxth.w	sl, lr
 8000d3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d40:	fb09 f40a 	mul.w	r4, r9, sl
 8000d44:	429c      	cmp	r4, r3
 8000d46:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b0>
 8000d50:	eb1e 0303 	adds.w	r3, lr, r3
 8000d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d58:	f080 8087 	bcs.w	8000e6a <__udivmoddi4+0x2b2>
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	f240 8084 	bls.w	8000e6a <__udivmoddi4+0x2b2>
 8000d62:	f1a9 0902 	sub.w	r9, r9, #2
 8000d66:	4473      	add	r3, lr
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d7c:	45a2      	cmp	sl, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1da>
 8000d80:	eb1e 0404 	adds.w	r4, lr, r4
 8000d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d88:	d26b      	bcs.n	8000e62 <__udivmoddi4+0x2aa>
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	d969      	bls.n	8000e62 <__udivmoddi4+0x2aa>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4474      	add	r4, lr
 8000d92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d96:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9a:	eba4 040a 	sub.w	r4, r4, sl
 8000d9e:	454c      	cmp	r4, r9
 8000da0:	46c2      	mov	sl, r8
 8000da2:	464b      	mov	r3, r9
 8000da4:	d354      	bcc.n	8000e50 <__udivmoddi4+0x298>
 8000da6:	d051      	beq.n	8000e4c <__udivmoddi4+0x294>
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	d069      	beq.n	8000e80 <__udivmoddi4+0x2c8>
 8000dac:	ebb1 050a 	subs.w	r5, r1, sl
 8000db0:	eb64 0403 	sbc.w	r4, r4, r3
 8000db4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000db8:	40fd      	lsrs	r5, r7
 8000dba:	40fc      	lsrs	r4, r7
 8000dbc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc4:	2700      	movs	r7, #0
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000dc8:	f1c2 0320 	rsb	r3, r2, #32
 8000dcc:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd0:	4095      	lsls	r5, r2
 8000dd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dde:	4338      	orrs	r0, r7
 8000de0:	0c01      	lsrs	r1, r0, #16
 8000de2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000de6:	fa1f f885 	uxth.w	r8, r5
 8000dea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df2:	fb07 f308 	mul.w	r3, r7, r8
 8000df6:	428b      	cmp	r3, r1
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x256>
 8000dfe:	1869      	adds	r1, r5, r1
 8000e00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e04:	d22f      	bcs.n	8000e66 <__udivmoddi4+0x2ae>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d92d      	bls.n	8000e66 <__udivmoddi4+0x2ae>
 8000e0a:	3f02      	subs	r7, #2
 8000e0c:	4429      	add	r1, r5
 8000e0e:	1acb      	subs	r3, r1, r3
 8000e10:	b281      	uxth	r1, r0
 8000e12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	fb00 f308 	mul.w	r3, r0, r8
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x27e>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e2c:	d217      	bcs.n	8000e5e <__udivmoddi4+0x2a6>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d915      	bls.n	8000e5e <__udivmoddi4+0x2a6>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e3c:	e73b      	b.n	8000cb6 <__udivmoddi4+0xfe>
 8000e3e:	4637      	mov	r7, r6
 8000e40:	4630      	mov	r0, r6
 8000e42:	e709      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e44:	4607      	mov	r7, r0
 8000e46:	e6e7      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6fb      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e4c:	4541      	cmp	r1, r8
 8000e4e:	d2ab      	bcs.n	8000da8 <__udivmoddi4+0x1f0>
 8000e50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e54:	eb69 020e 	sbc.w	r2, r9, lr
 8000e58:	3801      	subs	r0, #1
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	e7a4      	b.n	8000da8 <__udivmoddi4+0x1f0>
 8000e5e:	4660      	mov	r0, ip
 8000e60:	e7e9      	b.n	8000e36 <__udivmoddi4+0x27e>
 8000e62:	4618      	mov	r0, r3
 8000e64:	e795      	b.n	8000d92 <__udivmoddi4+0x1da>
 8000e66:	4667      	mov	r7, ip
 8000e68:	e7d1      	b.n	8000e0e <__udivmoddi4+0x256>
 8000e6a:	4681      	mov	r9, r0
 8000e6c:	e77c      	b.n	8000d68 <__udivmoddi4+0x1b0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	442c      	add	r4, r5
 8000e72:	e747      	b.n	8000d04 <__udivmoddi4+0x14c>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	442b      	add	r3, r5
 8000e7a:	e72f      	b.n	8000cdc <__udivmoddi4+0x124>
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	e708      	b.n	8000c92 <__udivmoddi4+0xda>
 8000e80:	4637      	mov	r7, r6
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0xa0>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000e9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000208 	.word	0x20000208
 8000eb8:	2000025c 	.word	0x2000025c

08000ebc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* mail messages */
  osMailQDef(mail, 16, data);
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  //mailYPRHandle = osMailCreate(osMailQ(mailYPR), NULL);

  mailHandle = osMailCreate(osMailQ(mail), NULL);
 8000ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 fdee 	bl	8006ab8 <osMailCreate>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_FREERTOS_Init+0x78>)
 8000ee0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of thread_sensor */
  osThreadDef(thread_sensor, thread_sensor_fun, osPriorityNormal, 0, 128);
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_FREERTOS_Init+0x7c>)
 8000ee4:	f107 041c 	add.w	r4, r7, #28
 8000ee8:	461d      	mov	r5, r3
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_sensorHandle = osThreadCreate(osThread(thread_sensor), NULL);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 fcbc 	bl	800687a <osThreadCreate>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_FREERTOS_Init+0x80>)
 8000f06:	601a      	str	r2, [r3, #0]

  /* definition and creation of thread_read */
  osThreadDef(thread_read, thread_read_func, osPriorityNormal, 0, 128);
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_FREERTOS_Init+0x84>)
 8000f0a:	463c      	mov	r4, r7
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_readHandle = osThreadCreate(osThread(thread_read), NULL);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fcab 	bl	800687a <osThreadCreate>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_FREERTOS_Init+0x88>)
 8000f28:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f2a:	bf00      	nop
 8000f2c:	3748      	adds	r7, #72	; 0x48
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bdb0      	pop	{r4, r5, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200042c8 	.word	0x200042c8
 8000f38:	0800a890 	.word	0x0800a890
 8000f3c:	200042c4 	.word	0x200042c4
 8000f40:	0800a8b8 	.word	0x0800a8b8
 8000f44:	200042cc 	.word	0x200042cc

08000f48 <thread_sensor_fun>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_thread_sensor_fun */
void thread_sensor_fun(void const * argument)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b095      	sub	sp, #84	; 0x54
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
    double temprature;

	int8_t com_rslt;

	bmp280_t bmp280;
	bmp280.i2c_handle = &hi2c1;
 8000f50:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <thread_sensor_fun+0xbc>)
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
	bmp280.dev_addr = BMP280_I2C_ADDRESS1;
 8000f54:	2376      	movs	r3, #118	; 0x76
 8000f56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	com_rslt = BMP280_init(&bmp280);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb90 	bl	8001684 <BMP280_init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	com_rslt += BMP280_set_power_mode(BMP280_NORMAL_MODE);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 fcd4 	bl	8001918 <BMP280_set_power_mode>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	com_rslt += BMP280_set_work_mode(BMP280_STANDARD_RESOLUTION_MODE);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f000 fd51 	bl	8001a28 <BMP280_set_work_mode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	com_rslt += BMP280_set_standby_durn(BMP280_STANDBY_TIME_1_MS);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 fd00 	bl	800199c <BMP280_set_standby_durn>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (com_rslt != SUCCESS) {
 8000fac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <thread_sensor_fun+0x72>
	        exit(0);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f007 feef 	bl	8008d98 <exit>
	/* Infinite loop */
  for(;;)
  {

	  data* buffer;
	  buffer = (data * )osMailAlloc(mailHandle,osWaitForever);
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <thread_sensor_fun+0xc0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fdd0 	bl	8006b68 <osMailAlloc>
 8000fc8:	64b8      	str	r0, [r7, #72]	; 0x48
	  if (buffer != NULL){
 8000fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <thread_sensor_fun+0xb0>
	     buffer->temp = BMP280_read_temperature_double(&temprature);
 8000fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 feb1 	bl	8001d3c <BMP280_read_temperature_double>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa71 	bl	80004c4 <__aeabi_i2d>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000fe8:	e9c2 3400 	strd	r3, r4, [r2]
         osMailPut(mailHandle,buffer);
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <thread_sensor_fun+0xc0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fdce 	bl	8006b94 <osMailPut>
	  }
    osDelay(1000);
 8000ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffc:	f005 fc89 	bl	8006912 <osDelay>
  {
 8001000:	e7db      	b.n	8000fba <thread_sensor_fun+0x72>
 8001002:	bf00      	nop
 8001004:	200042d0 	.word	0x200042d0
 8001008:	200042c8 	.word	0x200042c8

0800100c <thread_read_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_read_func */
void thread_read_func(void const * argument)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_read_func */

	LCD_Init();
 8001014:	f003 fa74 	bl	8004500 <LCD_Init>
	data* buffer;
	osEvent evt;
	double rx;
	for(;;)
  {
	  evt = osMailGet(mailHandle, osWaitForever);
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <thread_read_func+0x48>)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fdf3 	bl	8006c10 <osMailGet>
	  if (evt.status == osEventMail){
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b20      	cmp	r3, #32
 800102e:	d10c      	bne.n	800104a <thread_read_func+0x3e>
	  rx = evt.value.v;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa36 	bl	80004a4 <__aeabi_ui2d>
 8001038:	4603      	mov	r3, r0
 800103a:	460c      	mov	r4, r1
 800103c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  LCD_Printf("%0.4f sys",rx);
 8001040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <thread_read_func+0x4c>)
 8001046:	f003 fe37 	bl	8004cb8 <LCD_Printf>
	  }
    osDelay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fc61 	bl	8006912 <osDelay>
	  evt = osMailGet(mailHandle, osWaitForever);
 8001050:	e7e2      	b.n	8001018 <thread_read_func+0xc>
 8001052:	bf00      	nop
 8001054:	200042c8 	.word	0x200042c8
 8001058:	0800a8d4 	.word	0x0800a8d4

0800105c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_GPIO_Init+0xf0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a34      	ldr	r2, [pc, #208]	; (800114c <MX_GPIO_Init+0xf0>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_GPIO_Init+0xf0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <MX_GPIO_Init+0xf0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a2d      	ldr	r2, [pc, #180]	; (800114c <MX_GPIO_Init+0xf0>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_GPIO_Init+0xf0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_GPIO_Init+0xf0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <MX_GPIO_Init+0xf0>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_GPIO_Init+0xf0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_GPIO_Init+0xf0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <MX_GPIO_Init+0xf0>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_GPIO_Init+0xf0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_GPIO_Init+0xf4>)
 80010e8:	f001 f92a 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_GPIO_Init+0xf8>)
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_GPIO_Init+0xfc>)
 8001102:	f000 ff8b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001106:	230c      	movs	r3, #12
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001116:	2307      	movs	r3, #7
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <MX_GPIO_Init+0xf4>)
 8001122:	f000 ff7b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001126:	2320      	movs	r3, #32
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_GPIO_Init+0xf4>)
 800113e:	f000 ff6d 	bl	800201c <HAL_GPIO_Init>

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	10210000 	.word	0x10210000
 8001158:	40020800 	.word	0x40020800

0800115c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f001 f8eb 	bl	8002374 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f8e6 	bl	8001374 <Error_Handler>
  }

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200042d0 	.word	0x200042d0
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00061a80 	.word	0x00061a80

080011b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_I2C_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12c      	bne.n	8001234 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001208:	2304      	movs	r3, #4
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <HAL_I2C_MspInit+0x8c>)
 8001214:	f000 ff02 	bl	800201c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_I2C_MspInit+0x88>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_I2C_MspInit+0x88>)
 8001222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_I2C_MspInit+0x88>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40005400 	.word	0x40005400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fda0 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f80c 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f7ff ff02 	bl	800105c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001258:	f7ff ff80 	bl	800115c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 800125c:	f003 f950 	bl	8004500 <LCD_Init>
  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001260:	f7ff fe2c 	bl	8000ebc <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8001264:	f005 fb02 	bl	800686c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x20>
	...

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	; 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2234      	movs	r2, #52	; 0x34
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f007 fdcf 	bl	8008e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <SystemClock_Config+0xdc>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a2b      	ldr	r2, [pc, #172]	; (8001348 <SystemClock_Config+0xdc>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SystemClock_Config+0xdc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <SystemClock_Config+0xe0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <SystemClock_Config+0xe0>)
 80012b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <SystemClock_Config+0xe0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d2:	2302      	movs	r3, #2
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012e0:	23b4      	movs	r3, #180	; 0xb4
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fb15 	bl	8003924 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001300:	f000 f838 	bl	8001374 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001304:	f001 ffe6 	bl	80032d4 <HAL_PWREx_EnableOverDrive>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800130e:	f000 f831 	bl	8001374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	2105      	movs	r1, #5
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f81f 	bl	8003374 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800133c:	f000 f81a 	bl	8001374 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3750      	adds	r7, #80	; 0x50
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001362:	f000 fd37 	bl	8001dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40001400 	.word	0x40001400

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x54>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_MspInit+0x54>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x54>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_MspInit+0x54>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_MspInit+0x54>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_MspInit+0x54>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
 80013ca:	f000 fdfd 	bl	8001fc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	2037      	movs	r0, #55	; 0x37
 80013f2:	f000 fde9 	bl	8001fc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80013f6:	2037      	movs	r0, #55	; 0x37
 80013f8:	f000 fe02 	bl	8002000 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_InitTick+0xa4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_InitTick+0xa4>)
 8001406:	f043 0320 	orr.w	r3, r3, #32
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_InitTick+0xa4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001418:	f107 0210 	add.w	r2, r7, #16
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f8ac 	bl	8003580 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001428:	f002 f896 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 800142c:	4603      	mov	r3, r0
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001434:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_InitTick+0xa8>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3b01      	subs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_InitTick+0xac>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_InitTick+0xb0>)
 8001444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_InitTick+0xac>)
 8001448:	f240 32e7 	movw	r2, #999	; 0x3e7
 800144c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_InitTick+0xac>)
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_InitTick+0xac>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_InitTick+0xac>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <HAL_InitTick+0xac>)
 8001462:	f002 fcb9 	bl	8003dd8 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_InitTick+0xac>)
 800146e:	f002 fce8 	bl	8003e42 <HAL_TIM_Base_Start_IT>
 8001472:	4603      	mov	r3, r0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3730      	adds	r7, #48	; 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	431bde83 	.word	0x431bde83
 8001488:	20004324 	.word	0x20004324
 800148c:	40001400 	.word	0x40001400

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM7_IRQHandler+0x10>)
 80014ca:	f002 fcde 	bl	8003e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20004324 	.word	0x20004324

080014d8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014e2:	f007 fc53 	bl	8008d8c <__errno>
 80014e6:	4602      	mov	r2, r0
 80014e8:	2316      	movs	r3, #22
 80014ea:	6013      	str	r3, [r2, #0]
	return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_exit>:

void _exit (int status)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ffe7 	bl	80014d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800150a:	e7fe      	b.n	800150a <_exit+0x12>

0800150c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x50>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x16>
		heap_end = &end;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <_sbrk+0x50>)
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <_sbrk+0x54>)
 8001520:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <_sbrk+0x50>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <_sbrk+0x50>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	466a      	mov	r2, sp
 8001532:	4293      	cmp	r3, r2
 8001534:	d907      	bls.n	8001546 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001536:	f007 fc29 	bl	8008d8c <__errno>
 800153a:	4602      	mov	r2, r0
 800153c:	230c      	movs	r3, #12
 800153e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	e006      	b.n	8001554 <_sbrk+0x48>
	}

	heap_end += incr;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <_sbrk+0x50>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <_sbrk+0x50>)
 8001550:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000045c 	.word	0x2000045c
 8001560:	20004370 	.word	0x20004370

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <SystemInit+0x28>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <SystemInit+0x28>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <SystemInit+0x28>)
 800157a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157e:	609a      	str	r2, [r3, #8]
#endif
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001594:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001596:	e003      	b.n	80015a0 <LoopCopyDataInit>

08001598 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800159a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800159c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800159e:	3104      	adds	r1, #4

080015a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015a8:	d3f6      	bcc.n	8001598 <CopyDataInit>
  ldr  r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015ac:	e002      	b.n	80015b4 <LoopFillZerobss>

080015ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015b0:	f842 3b04 	str.w	r3, [r2], #4

080015b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015b8:	d3f9      	bcc.n	80015ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ba:	f7ff ffd3 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f007 fbff 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fe41 	bl	8001248 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015cc:	0800b0e8 	.word	0x0800b0e8
  ldr  r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015d4:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80015d8:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80015dc:	20004370 	.word	0x20004370

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <BMP280_I2C_Write>:
 *
 */
static inline s8 BMP280_I2C_Write (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	603a      	str	r2, [r7, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	460b      	mov	r3, r1
 80015f4:	71bb      	strb	r3, [r7, #6]
 80015f6:	4613      	mov	r3, r2
 80015f8:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <BMP280_I2C_Write+0x4c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a18      	ldr	r0, [r3, #32]
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	b29b      	uxth	r3, r3
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	b299      	uxth	r1, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	b29c      	uxth	r4, r3
 800160c:	797b      	ldrb	r3, [r7, #5]
 800160e:	b29b      	uxth	r3, r3
 8001610:	2264      	movs	r2, #100	; 0x64
 8001612:	9202      	str	r2, [sp, #8]
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	4622      	mov	r2, r4
 800161e:	f000 ffe1 	bl	80025e4 <HAL_I2C_Mem_Write>
 8001622:	4603      	mov	r3, r0
 8001624:	b25b      	sxtb	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	20004364 	.word	0x20004364

08001634 <BMP280_I2C_Read>:
 *
 */
static inline s8 BMP280_I2C_Read (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b087      	sub	sp, #28
 8001638:	af04      	add	r7, sp, #16
 800163a:	603a      	str	r2, [r7, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <BMP280_I2C_Read+0x4c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a18      	ldr	r0, [r3, #32]
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	b29b      	uxth	r3, r3
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	b29c      	uxth	r4, r3
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	b29b      	uxth	r3, r3
 8001660:	2264      	movs	r2, #100	; 0x64
 8001662:	9202      	str	r2, [sp, #8]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	4622      	mov	r2, r4
 800166e:	f001 f8b3 	bl	80027d8 <HAL_I2C_Mem_Read>
 8001672:	4603      	mov	r3, r0
 8001674:	b25b      	sxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	20004364 	.word	0x20004364

08001684 <BMP280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_init(bmp280_t *bmp280)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800168c:	23ff      	movs	r3, #255	; 0xff
 800168e:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001690:	2300      	movs	r3, #0
 8001692:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 8001694:	2305      	movs	r3, #5
 8001696:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 8001698:	4a2b      	ldr	r2, [pc, #172]	; (8001748 <BMP280_init+0xc4>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#ifdef HAL_I2C_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_I2C_Write;
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <BMP280_init+0xc4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2a      	ldr	r2, [pc, #168]	; (800174c <BMP280_init+0xc8>)
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
	p_bmp280->bus_read = BMP280_I2C_Read;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <BMP280_init+0xc4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <BMP280_init+0xcc>)
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
#elif HAL_SPI_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_SPI_Write;
	p_bmp280->bus_read = BMP280_SPI_Read;
#endif
	if (p_bmp280->dev_addr == 0) {
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <BMP280_init+0xc4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	7f5b      	ldrb	r3, [r3, #29]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <BMP280_init+0x3c>
		p_bmp280->dev_addr = BMP280_I2C_ADDRESS1;
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <BMP280_init+0xc4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2276      	movs	r2, #118	; 0x76
 80016be:	775a      	strb	r2, [r3, #29]
	}
	p_bmp280->delay_msec = HAL_Delay;
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <BMP280_init+0xc4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a23      	ldr	r2, [pc, #140]	; (8001754 <BMP280_init+0xd0>)
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30

	while (v_chip_id_read_count > 0) {
 80016c8:	e01d      	b.n	8001706 <BMP280_init+0x82>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <BMP280_init+0xc4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <BMP280_init+0xc4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	7f58      	ldrb	r0, [r3, #29]
 80016d6:	f107 020d 	add.w	r2, r7, #13
 80016da:	2301      	movs	r3, #1
 80016dc:	21d0      	movs	r1, #208	; 0xd0
 80016de:	47a0      	blx	r4
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 80016e4:	7b7b      	ldrb	r3, [r7, #13]
 80016e6:	2b56      	cmp	r3, #86	; 0x56
 80016e8:	d010      	beq.n	800170c <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	2b57      	cmp	r3, #87	; 0x57
 80016ee:	d00d      	beq.n	800170c <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 80016f0:	7b7b      	ldrb	r3, [r7, #13]
 80016f2:	2b58      	cmp	r3, #88	; 0x58
 80016f4:	d00a      	beq.n	800170c <BMP280_init+0x88>
			break;
		v_chip_id_read_count--;
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <BMP280_init+0xc4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	2001      	movs	r0, #1
 8001704:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1de      	bne.n	80016ca <BMP280_init+0x46>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <BMP280_init+0xc4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	7b7a      	ldrb	r2, [r7, #13]
 8001712:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <BMP280_init+0x9c>
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e000      	b.n	8001722 <BMP280_init+0x9e>
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <BMP280_init+0xb8>
		/* readout bmp280 calibration parameter structure */
		com_rslt += BMP280_get_calib_param();
 800172c:	f000 f848 	bl	80017c0 <BMP280_get_calib_param>
 8001730:	4603      	mov	r3, r0
 8001732:	b2da      	uxtb	r2, r3
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	4413      	add	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	20004364 	.word	0x20004364
 800174c:	080015e5 	.word	0x080015e5
 8001750:	08001635 	.word	0x08001635
 8001754:	08001e15 	.word	0x08001e15

08001758 <BMP280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001760:	23ff      	movs	r3, #255	; 0xff
 8001762:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001764:	2300      	movs	r3, #0
 8001766:	733b      	strb	r3, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	737b      	strb	r3, [r7, #13]
 800176c:	2300      	movs	r3, #0
 800176e:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <BMP280_read_uncomp_temperature+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <BMP280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8001778:	2381      	movs	r3, #129	; 0x81
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e018      	b.n	80017b0 <BMP280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <BMP280_read_uncomp_temperature+0x64>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <BMP280_read_uncomp_temperature+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	7f58      	ldrb	r0, [r3, #29]
 800178a:	f107 020c 	add.w	r2, r7, #12
 800178e:	2303      	movs	r3, #3
 8001790:	21fa      	movs	r1, #250	; 0xfa
 8001792:	47a0      	blx	r4
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 8001798:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 800179a:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 800179c:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 800179e:	011b      	lsls	r3, r3, #4
				| (((u32)(
 80017a0:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 80017a2:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 80017a4:	0912      	lsrs	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 80017a8:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	20004364 	.word	0x20004364

080017c0 <BMP280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_get_calib_param(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80017da:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <BMP280_get_calib_param+0x154>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <BMP280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 80017e2:	2381      	movs	r3, #129	; 0x81
 80017e4:	77fb      	strb	r3, [r7, #31]
 80017e6:	e08f      	b.n	8001908 <BMP280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <BMP280_get_calib_param+0x154>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <BMP280_get_calib_param+0x154>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	7f58      	ldrb	r0, [r3, #29]
 80017f4:	1d3a      	adds	r2, r7, #4
 80017f6:	2318      	movs	r3, #24
 80017f8:	2188      	movs	r1, #136	; 0x88
 80017fa:	47a0      	blx	r4
 80017fc:	4603      	mov	r3, r0
 80017fe:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001800:	797b      	ldrb	r3, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001802:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001804:	b21a      	sxth	r2, r3
 8001806:	793b      	ldrb	r3, [r7, #4]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b292      	uxth	r2, r2
 8001814:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800181a:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 800181c:	b219      	sxth	r1, r3
					| a_data_u8[
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	b212      	sxth	r2, r2
 800182a:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 800182c:	7a7b      	ldrb	r3, [r7, #9]
 800182e:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001830:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001832:	b219      	sxth	r1, r3
					| a_data_u8[
 8001834:	7a3b      	ldrb	r3, [r7, #8]
 8001836:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001838:	4b36      	ldr	r3, [pc, #216]	; (8001914 <BMP280_get_calib_param+0x154>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	b212      	sxth	r2, r2
 8001840:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001842:	7afb      	ldrb	r3, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001844:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001846:	b21a      	sxth	r2, r3
 8001848:	7abb      	ldrb	r3, [r7, #10]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b292      	uxth	r2, r2
 8001856:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800185c:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 800185e:	b219      	sxth	r1, r3
					| a_data_u8[
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	b212      	sxth	r2, r2
 800186c:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001872:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001874:	b219      	sxth	r1, r3
					| a_data_u8[
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <BMP280_get_calib_param+0x154>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	b212      	sxth	r2, r2
 8001882:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001884:	7c7b      	ldrb	r3, [r7, #17]
 8001886:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001888:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 800188a:	b219      	sxth	r1, r3
					| a_data_u8[
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	b212      	sxth	r2, r2
 8001898:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 800189e:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 80018a0:	b219      	sxth	r1, r3
					| a_data_u8[
 80018a2:	7cbb      	ldrb	r3, [r7, #18]
 80018a4:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <BMP280_get_calib_param+0x154>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	b212      	sxth	r2, r2
 80018ae:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 80018b0:	7d7b      	ldrb	r3, [r7, #21]
 80018b2:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80018b4:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 80018b6:	b219      	sxth	r1, r3
					| a_data_u8[
 80018b8:	7d3b      	ldrb	r3, [r7, #20]
 80018ba:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <BMP280_get_calib_param+0x154>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	b212      	sxth	r2, r2
 80018c4:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80018ca:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 80018cc:	b219      	sxth	r1, r3
					| a_data_u8[
 80018ce:	7dbb      	ldrb	r3, [r7, #22]
 80018d0:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <BMP280_get_calib_param+0x154>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	b212      	sxth	r2, r2
 80018da:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 80018dc:	7e7b      	ldrb	r3, [r7, #25]
 80018de:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80018e0:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 80018e2:	b219      	sxth	r1, r3
					| a_data_u8[
 80018e4:	7e3b      	ldrb	r3, [r7, #24]
 80018e6:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <BMP280_get_calib_param+0x154>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	b212      	sxth	r2, r2
 80018f0:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 80018f2:	7efb      	ldrb	r3, [r7, #27]
 80018f4:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80018f6:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 80018f8:	b219      	sxth	r1, r3
					| a_data_u8[
 80018fa:	7ebb      	ldrb	r3, [r7, #26]
 80018fc:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <BMP280_get_calib_param+0x154>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	b212      	sxth	r2, r2
 8001906:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8001908:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3724      	adds	r7, #36	; 0x24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	20004364 	.word	0x20004364

08001918 <BMP280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_power_mode(u8 v_power_mode_u8)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001922:	23ff      	movs	r3, #255	; 0xff
 8001924:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8 = BMP280_INIT_VALUE;
 8001926:	2300      	movs	r3, #0
 8001928:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <BMP280_set_power_mode+0x80>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <BMP280_set_power_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001932:	2381      	movs	r3, #129	; 0x81
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e029      	b.n	800198c <BMP280_set_power_mode+0x74>
	} else {
		if (v_power_mode_u8 <= BMP280_NORMAL_MODE) {
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d824      	bhi.n	8001988 <BMP280_set_power_mode+0x70>
			/* write the power mode*/
			v_mode_u8 = (p_bmp280->oversamp_temperature
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <BMP280_set_power_mode+0x80>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
					<< BMP280_SHIFT_BIT_POSITION_BY_05_BITS)
 8001946:	015b      	lsls	r3, r3, #5
 8001948:	b2da      	uxtb	r2, r3
					+ (p_bmp280->oversamp_pressure
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <BMP280_set_power_mode+0x80>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
					<< BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
					+ (p_bmp280->oversamp_pressure
 8001956:	4413      	add	r3, r2
 8001958:	b2da      	uxtb	r2, r3
					+ v_power_mode_u8;
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4413      	add	r3, r2
 800195e:	b2db      	uxtb	r3, r3
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8001960:	73bb      	strb	r3, [r7, #14]
			com_rslt = p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <BMP280_set_power_mode+0x80>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <BMP280_set_power_mode+0x80>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	7f58      	ldrb	r0, [r3, #29]
 800196e:	f107 020e 	add.w	r2, r7, #14
 8001972:	2301      	movs	r3, #1
 8001974:	21f4      	movs	r1, #244	; 0xf4
 8001976:	47a0      	blx	r4
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
					BMP280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
			/* Delay added concerning the low speed of power up system to
			facilitate the proper setting of power mode */
			p_bmp280->delay_msec(T_INIT_MAX);
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <BMP280_set_power_mode+0x80>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	2014      	movs	r0, #20
 8001984:	4798      	blx	r3
 8001986:	e001      	b.n	800198c <BMP280_set_power_mode+0x74>
		} else {
			com_rslt = E_BMP280_OUT_OF_RANGE;
 8001988:	23fe      	movs	r3, #254	; 0xfe
 800198a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return com_rslt;
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	20004364 	.word	0x20004364

0800199c <BMP280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_standby_durn(u8 v_standby_durn_u8)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80019a6:	23ff      	movs	r3, #255	; 0xff
 80019a8:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <BMP280_set_standby_durn+0x88>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <BMP280_set_standby_durn+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 80019b6:	2381      	movs	r3, #129	; 0x81
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e02d      	b.n	8001a18 <BMP280_set_standby_durn+0x7c>
	} else {
		/* write the standby duration*/
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <BMP280_set_standby_durn+0x88>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <BMP280_set_standby_durn+0x88>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	7f58      	ldrb	r0, [r3, #29]
 80019c8:	f107 020e 	add.w	r2, r7, #14
 80019cc:	2301      	movs	r3, #1
 80019ce:	21f5      	movs	r1, #245	; 0xf5
 80019d0:	47a0      	blx	r4
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
				BMP280_CONFIG_REG_STANDBY_DURN__REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d11c      	bne.n	8001a18 <BMP280_set_standby_durn+0x7c>
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	b25a      	sxtb	r2, r3
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	73bb      	strb	r3, [r7, #14]
					BMP280_CONFIG_REG_STANDBY_DURN,
					v_standby_durn_u8);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <BMP280_set_standby_durn+0x88>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <BMP280_set_standby_durn+0x88>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	7f58      	ldrb	r0, [r3, #29]
 8001a02:	f107 020e 	add.w	r2, r7, #14
 8001a06:	2301      	movs	r3, #1
 8001a08:	21f5      	movs	r1, #245	; 0xf5
 8001a0a:	47a0      	blx	r4
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4413      	add	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	73fb      	strb	r3, [r7, #15]
					BMP280_CONFIG_REG_STANDBY_DURN__REG,
					&v_data_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	}
	return com_rslt;
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	20004364 	.word	0x20004364

08001a28 <BMP280_set_work_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_work_mode(u8 v_work_mode_u8)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001a32:	23ff      	movs	r3, #255	; 0xff
 8001a34:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001a3a:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <BMP280_set_work_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001a42:	2381      	movs	r3, #129	; 0x81
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e091      	b.n	8001b6c <BMP280_set_work_mode+0x144>
	} else {
	if (v_work_mode_u8 <= BMP280_ULTRA_HIGH_RESOLUTION_MODE) {
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	f200 808c 	bhi.w	8001b68 <BMP280_set_work_mode+0x140>
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	7f58      	ldrb	r0, [r3, #29]
 8001a5c:	f107 020e 	add.w	r2, r7, #14
 8001a60:	2301      	movs	r3, #1
 8001a62:	21f4      	movs	r1, #244	; 0xf4
 8001a64:	47a0      	blx	r4
 8001a66:	4603      	mov	r3, r0
 8001a68:	73fb      	strb	r3, [r7, #15]
				p_bmp280->dev_addr,
				BMP280_CTRL_MEAS_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d17c      	bne.n	8001b6c <BMP280_set_work_mode+0x144>
			switch (v_work_mode_u8) {
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d844      	bhi.n	8001b02 <BMP280_set_work_mode+0xda>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <BMP280_set_work_mode+0x58>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a95 	.word	0x08001a95
 8001a84:	08001aab 	.word	0x08001aab
 8001a88:	08001ac1 	.word	0x08001ac1
 8001a8c:	08001ad7 	.word	0x08001ad7
 8001a90:	08001aed 	.word	0x08001aed
			/* write work mode*/
			case BMP280_ULTRA_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRALOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_ULTRALOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001aa8:	e02b      	b.n	8001b02 <BMP280_set_work_mode+0xda>
			case BMP280_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					BMP280_LOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_LOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001abe:	e020      	b.n	8001b02 <BMP280_set_work_mode+0xda>
			case BMP280_STANDARD_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_STANDARDRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_STANDARDRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001ad4:	e015      	b.n	8001b02 <BMP280_set_work_mode+0xda>
			case BMP280_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_HIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_HIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001aea:	e00a      	b.n	8001b02 <BMP280_set_work_mode+0xda>
			case BMP280_ULTRA_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2205      	movs	r2, #5
 8001afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001b00:	bf00      	nop
			}
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	b25a      	sxtb	r2, r3
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
				p_bmp280->oversamp_temperature);
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	f023 031c 	bic.w	r3, r3, #28
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	f003 031c 	and.w	r3, r3, #28
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
				p_bmp280->oversamp_pressure);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <BMP280_set_work_mode+0x150>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	7f58      	ldrb	r0, [r3, #29]
 8001b50:	f107 020e 	add.w	r2, r7, #14
 8001b54:	2301      	movs	r3, #1
 8001b56:	21f4      	movs	r1, #244	; 0xf4
 8001b58:	47a0      	blx	r4
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	4413      	add	r3, r2
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e001      	b.n	8001b6c <BMP280_set_work_mode+0x144>
				p_bmp280->dev_addr, BMP280_CTRL_MEAS_REG,
				&v_data_u8, BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	} else {
		com_rslt = E_BMP280_OUT_OF_RANGE;
 8001b68:	23fe      	movs	r3, #254	; 0xfe
 8001b6a:	73fb      	strb	r3, [r7, #15]
	}
	}
	return com_rslt;
 8001b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	20004364 	.word	0x20004364

08001b7c <BMP280_compensate_temperature_double>:
 *  @return
 *	Actual temperature in floating point
 *
 */
double BMP280_compensate_temperature_double(s32 v_uncomp_temperature_s32)
{
 8001b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b80:	b088      	sub	sp, #32
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	f04f 0400 	mov.w	r4, #0
 8001b8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f04f 0400 	mov.w	r4, #0
 8001b9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double temperature = BMP280_INIT_VALUE;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	f04f 0400 	mov.w	r4, #0
 8001ba6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* calculate x1*/
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fc8a 	bl	80004c4 <__aeabi_i2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <BMP280_compensate_temperature_double+0x1ac>)
 8001bb6:	f7fe fe19 	bl	80007ec <__aeabi_ddiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	4625      	mov	r5, r4
 8001bc0:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 1024.0) *
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fc6b 	bl	80004a4 <__aeabi_ui2d>
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <BMP280_compensate_temperature_double+0x1b4>)
 8001bd4:	f7fe fe0a 	bl	80007ec <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fb22 	bl	8000228 <__aeabi_dsub>
 8001be4:	4603      	mov	r3, r0
 8001be6:	460c      	mov	r4, r1
 8001be8:	4625      	mov	r5, r4
 8001bea:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T2);
 8001bec:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc65 	bl	80004c4 <__aeabi_i2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_dmul>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* calculate x2*/
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe fc58 	bl	80004c4 <__aeabi_i2d>
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001c1c:	f7fe fde6 	bl	80007ec <__aeabi_ddiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4625      	mov	r5, r4
 8001c26:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001c28:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc38 	bl	80004a4 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <BMP280_compensate_temperature_double+0x1b8>)
 8001c3a:	f7fe fdd7 	bl	80007ec <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe faef 	bl	8000228 <__aeabi_dsub>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4625      	mov	r5, r4
 8001c50:	461c      	mov	r4, r3
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fc36 	bl	80004c4 <__aeabi_i2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001c60:	f7fe fdc4 	bl	80007ec <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4690      	mov	r8, r2
 8001c6a:	4699      	mov	r9, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0)) *
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc16 	bl	80004a4 <__aeabi_ui2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <BMP280_compensate_temperature_double+0x1b8>)
 8001c7e:	f7fe fdb5 	bl	80007ec <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8001c86:	4640      	mov	r0, r8
 8001c88:	4649      	mov	r1, r9
 8001c8a:	f7fe facd 	bl	8000228 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fc7f 	bl	8000598 <__aeabi_dmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	4625      	mov	r5, r4
 8001ca0:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T3);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc0a 	bl	80004c4 <__aeabi_i2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fc6e 	bl	8000598 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* calculate t_fine*/
	p_bmp280->calib_param.t_fine = (s32)(v_x1_u32r + v_x2_u32r);
 8001cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ccc:	f7fe faae 	bl	800022c <__adddf3>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <BMP280_compensate_temperature_double+0x1b0>)
 8001cda:	681c      	ldr	r4, [r3, #0]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	f7fe ff0a 	bl	8000af8 <__aeabi_d2iz>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	61a3      	str	r3, [r4, #24]
	/* calculate true pressure*/
	temperature = (v_x1_u32r + v_x2_u32r) / 5120.0;
 8001ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cf0:	f7fe fa9c 	bl	800022c <__adddf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <BMP280_compensate_temperature_double+0x1bc>)
 8001d02:	f7fe fd73 	bl	80007ec <__aeabi_ddiv>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return temperature;
 8001d0e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d12:	ec44 3b17 	vmov	d7, r3, r4
}
 8001d16:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1a:	eef0 0a67 	vmov.f32	s1, s15
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d26:	bf00      	nop
 8001d28:	40d00000 	.word	0x40d00000
 8001d2c:	20004364 	.word	0x20004364
 8001d30:	40900000 	.word	0x40900000
 8001d34:	40c00000 	.word	0x40c00000
 8001d38:	40b40000 	.word	0x40b40000

08001d3c <BMP280_read_temperature_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_temperature_double(double *v_temperature_d)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001d44:	23ff      	movs	r3, #255	; 0xff
 8001d46:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_temperature_s32 = BMP280_INIT_VALUE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <BMP280_read_temperature_double+0x50>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <BMP280_read_temperature_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8001d54:	2381      	movs	r3, #129	; 0x81
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e011      	b.n	8001d7e <BMP280_read_temperature_double+0x42>
	} else {
		/* read uncompensated temperature*/
		com_rslt = BMP280_read_uncomp_temperature(
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fcfa 	bl	8001758 <BMP280_read_uncomp_temperature>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_temperature_s32);
		/* read true temperature as double*/
		*v_temperature_d = BMP280_compensate_temperature_double(
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff06 	bl	8001b7c <BMP280_compensate_temperature_double>
 8001d70:	eeb0 7a40 	vmov.f32	s14, s0
 8001d74:	eef0 7a60 	vmov.f32	s15, s1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_temperature_s32);
	}
	return com_rslt;
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20004364 	.word	0x20004364

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_Init+0x40>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_Init+0x40>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x40>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 f8fa 	bl	8001fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fb0c 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fade 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20004368 	.word	0x20004368

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20004368 	.word	0x20004368

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_Delay+0x40>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000008 	.word	0x20000008

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff4c 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fda:	f7ff ff61 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8001fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	f7ff ffb1 	bl	8001f4c <NVIC_EncodePriority>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff80 	bl	8001ef8 <__NVIC_SetPriority>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff54 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e165      	b.n	8002304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8154 	bne.w	80022fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d00b      	beq.n	8002076 <HAL_GPIO_Init+0x5a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800206a:	2b11      	cmp	r3, #17
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b12      	cmp	r3, #18
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0xfc>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80ae 	beq.w	80022fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_GPIO_Init+0x2fc>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_GPIO_Init+0x2fc>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_GPIO_Init+0x2fc>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_GPIO_Init+0x300>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_GPIO_Init+0x304>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x21a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_GPIO_Init+0x308>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x216>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4c      	ldr	r2, [pc, #304]	; (8002328 <HAL_GPIO_Init+0x30c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x212>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	; (800232c <HAL_GPIO_Init+0x310>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x20e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x20a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	; (8002334 <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x206>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x202>
 800221a:	2306      	movs	r3, #6
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800221e:	2307      	movs	r3, #7
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x21c>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4934      	ldr	r1, [pc, #208]	; (800231c <HAL_GPIO_Init+0x300>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_GPIO_Init+0x320>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227a:	4a30      	ldr	r2, [pc, #192]	; (800233c <HAL_GPIO_Init+0x320>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_GPIO_Init+0x320>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <HAL_GPIO_Init+0x320>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_GPIO_Init+0x320>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_GPIO_Init+0x320>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_GPIO_Init+0x320>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a10      	ldr	r2, [pc, #64]	; (800233c <HAL_GPIO_Init+0x320>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae96 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3724      	adds	r7, #36	; 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40021800 	.word	0x40021800
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e11f      	b.n	80025c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe ff0c 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f001 f8be 	bl	8003558 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a7b      	ldr	r2, [pc, #492]	; (80025d0 <HAL_I2C_Init+0x25c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_I2C_Init+0x260>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a77      	ldr	r2, [pc, #476]	; (80025d8 <HAL_I2C_Init+0x264>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0db      	b.n	80025c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a72      	ldr	r2, [pc, #456]	; (80025dc <HAL_I2C_Init+0x268>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a64      	ldr	r2, [pc, #400]	; (80025d0 <HAL_I2C_Init+0x25c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a63      	ldr	r2, [pc, #396]	; (80025e0 <HAL_I2C_Init+0x26c>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4956      	ldr	r1, [pc, #344]	; (80025d0 <HAL_I2C_Init+0x25c>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d80d      	bhi.n	8002498 <HAL_I2C_Init+0x124>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	bf38      	it	cc
 8002494:	2304      	movcc	r3, #4
 8002496:	e04f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <HAL_I2C_Init+0x150>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_I2C_Init+0x176>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x17e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e022      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_I2C_Init+0x1a4>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e58      	subs	r0, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	fbb0 f3f3 	udiv	r3, r0, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6911      	ldr	r1, [r2, #16]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000186a0 	.word	0x000186a0
 80025d4:	001e847f 	.word	0x001e847f
 80025d8:	003d08ff 	.word	0x003d08ff
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7ff fbfd 	bl	8001dfc <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80d9 	bne.w	80027c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	496d      	ldr	r1, [pc, #436]	; (80027d0 <HAL_I2C_Mem_Write+0x1ec>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fc7b 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Write+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e0c5      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d007      	beq.n	8002660 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_I2C_Mem_Write+0x1f0>)
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fab6 	bl	8002c24 <I2C_RequestMemoryWrite>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d052      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e081      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fcfc 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Mem_Write+0x180>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1aa      	bne.n	80026c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fce8 	bl	8003146 <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e016      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f2:	f7ff fb03 	bl	8001dfc <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	f040 8208 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2319      	movs	r3, #25
 800280c:	2201      	movs	r2, #1
 800280e:	497b      	ldr	r1, [pc, #492]	; (80029fc <HAL_I2C_Mem_Read+0x224>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fb81 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	e1fb      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Read+0x56>
 800282a:	2302      	movs	r3, #2
 800282c:	e1f4      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d007      	beq.n	8002854 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2222      	movs	r2, #34	; 0x22
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_I2C_Mem_Read+0x228>)
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002896:	88f8      	ldrh	r0, [r7, #6]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4603      	mov	r3, r0
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa50 	bl	8002d4c <I2C_RequestMemoryRead>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1b0      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e184      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d11b      	bne.n	8002926 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e164      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	e144      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800297c:	e138      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b03      	cmp	r3, #3
 8002984:	f200 80f1 	bhi.w	8002b6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b01      	cmp	r3, #1
 800298e:	d123      	bne.n	80029d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fc17 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e139      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d6:	e10b      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d14e      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2200      	movs	r2, #0
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <HAL_I2C_Mem_Read+0x22c>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa94 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e10e      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 80029fa:	bf00      	nop
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000
 8002a04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7c:	e0b8      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2200      	movs	r2, #0
 8002a86:	4966      	ldr	r1, [pc, #408]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa45 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0bf      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	494f      	ldr	r1, [pc, #316]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa17 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e091      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b68:	e042      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fb2a 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04c      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d118      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f aec2 	bne.w	800297e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010004 	.word	0x00010004

08002c24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f95c 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e05f      	b.n	8002d40 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	492c      	ldr	r1, [pc, #176]	; (8002d48 <I2C_RequestMemoryWrite+0x124>)
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f995 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e04c      	b.n	8002d40 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	6a39      	ldr	r1, [r7, #32]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f9ff 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e02b      	b.n	8002d40 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	e021      	b.n	8002d3e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0a:	6a39      	ldr	r1, [r7, #32]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f9d9 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00d      	beq.n	8002d34 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e005      	b.n	8002d40 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010002 	.word	0x00010002

08002d4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8c0 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0a9      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	6a3a      	ldr	r2, [r7, #32]
 8002dcc:	4951      	ldr	r1, [pc, #324]	; (8002f14 <I2C_RequestMemoryRead+0x1c8>)
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f8f9 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e096      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df6:	6a39      	ldr	r1, [r7, #32]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f963 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d107      	bne.n	8002e1c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e075      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e26:	893b      	ldrh	r3, [r7, #8]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]
 8002e30:	e021      	b.n	8002e76 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e32:	893b      	ldrh	r3, [r7, #8]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f93d 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e04f      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	6a39      	ldr	r1, [r7, #32]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f922 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d107      	bne.n	8002e9e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e034      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f82a 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e013      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <I2C_RequestMemoryRead+0x1c8>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f863 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	00010002 	.word	0x00010002

08002f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	e025      	b.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d021      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe ff63 	bl	8001dfc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e023      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10d      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	e00c      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0b6      	beq.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd4:	e051      	b.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	d123      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e046      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d021      	beq.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fee1 	bl	8001dfc <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e020      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e00b      	b.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d18d      	bne.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e02d      	b.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8ce 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fe87 	bl	8001dfc <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d1ca      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003152:	e02d      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f88d 	bl	8003274 <I2C_IsAcknowledgeFailed>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e02d      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d021      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe fe46 	bl	8001dfc <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d1ca      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d4:	e042      	b.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d119      	bne.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e029      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe fdf0 	bl	8001dfc <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d1b5      	bne.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d11b      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_PWREx_EnableOverDrive+0x90>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_PWREx_EnableOverDrive+0x94>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003300:	f7fe fd7c 	bl	8001dfc <HAL_GetTick>
 8003304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003306:	e009      	b.n	800331c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003308:	f7fe fd78 	bl	8001dfc <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003316:	d901      	bls.n	800331c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e01f      	b.n	800335c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_PWREx_EnableOverDrive+0x98>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d1ee      	bne.n	8003308 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003330:	f7fe fd64 	bl	8001dfc <HAL_GetTick>
 8003334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003336:	e009      	b.n	800334c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003338:	f7fe fd60 	bl	8001dfc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d901      	bls.n	800334c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e007      	b.n	800335c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_PWREx_EnableOverDrive+0x98>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003358:	d1ee      	bne.n	8003338 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	420e0040 	.word	0x420e0040
 800336c:	40007000 	.word	0x40007000
 8003370:	420e0044 	.word	0x420e0044

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cc      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90c      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494d      	ldr	r1, [pc, #308]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d044      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d119      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e067      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fe fcca 	bl	8001dfc <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fe fcc6 	bl	8001dfc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20c      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e032      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4916      	ldr	r1, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490e      	ldr	r1, [pc, #56]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f873 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	fa21 f303 	lsr.w	r3, r1, r3
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd ff5e 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00
 8003530:	40023800 	.word	0x40023800
 8003534:	0800a900 	.word	0x0800a900
 8003538:	20000000 	.word	0x20000000
 800353c:	20000004 	.word	0x20000004

08003540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_RCC_GetHCLKFreq+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000

08003558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800355c:	f7ff fff0 	bl	8003540 <HAL_RCC_GetHCLKFreq>
 8003560:	4601      	mov	r1, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	0a9b      	lsrs	r3, r3, #10
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4a03      	ldr	r2, [pc, #12]	; (800357c <HAL_RCC_GetPCLK1Freq+0x24>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	0800a910 	.word	0x0800a910

08003580 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	220f      	movs	r2, #15
 800358e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_GetClockConfig+0x5c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	08db      	lsrs	r3, r3, #3
 80035ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_RCC_GetClockConfig+0x60>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 020f 	and.w	r2, r3, #15
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fe:	4bc6      	ldr	r3, [pc, #792]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b0c      	cmp	r3, #12
 8003608:	f200 817e 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x324>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_RCC_GetSysClockFreq+0x30>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003649 	.word	0x08003649
 8003618:	08003909 	.word	0x08003909
 800361c:	08003909 	.word	0x08003909
 8003620:	08003909 	.word	0x08003909
 8003624:	0800364f 	.word	0x0800364f
 8003628:	08003909 	.word	0x08003909
 800362c:	08003909 	.word	0x08003909
 8003630:	08003909 	.word	0x08003909
 8003634:	08003655 	.word	0x08003655
 8003638:	08003909 	.word	0x08003909
 800363c:	08003909 	.word	0x08003909
 8003640:	08003909 	.word	0x08003909
 8003644:	080037b1 	.word	0x080037b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4bb4      	ldr	r3, [pc, #720]	; (800391c <HAL_RCC_GetSysClockFreq+0x338>)
 800364a:	613b      	str	r3, [r7, #16]
       break;
 800364c:	e15f      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4bb4      	ldr	r3, [pc, #720]	; (8003920 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003650:	613b      	str	r3, [r7, #16]
      break;
 8003652:	e15c      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4bb0      	ldr	r3, [pc, #704]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4bae      	ldr	r3, [pc, #696]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04a      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4bab      	ldr	r3, [pc, #684]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	ea03 0501 	and.w	r5, r3, r1
 8003680:	ea04 0602 	and.w	r6, r4, r2
 8003684:	4629      	mov	r1, r5
 8003686:	4632      	mov	r2, r6
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	0154      	lsls	r4, r2, #5
 8003692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003696:	014b      	lsls	r3, r1, #5
 8003698:	4619      	mov	r1, r3
 800369a:	4622      	mov	r2, r4
 800369c:	1b49      	subs	r1, r1, r5
 800369e:	eb62 0206 	sbc.w	r2, r2, r6
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	0194      	lsls	r4, r2, #6
 80036ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036b0:	018b      	lsls	r3, r1, #6
 80036b2:	1a5b      	subs	r3, r3, r1
 80036b4:	eb64 0402 	sbc.w	r4, r4, r2
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	00e2      	lsls	r2, r4, #3
 80036c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036c6:	00d9      	lsls	r1, r3, #3
 80036c8:	460b      	mov	r3, r1
 80036ca:	4614      	mov	r4, r2
 80036cc:	195b      	adds	r3, r3, r5
 80036ce:	eb44 0406 	adc.w	r4, r4, r6
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	0262      	lsls	r2, r4, #9
 80036dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036e0:	0259      	lsls	r1, r3, #9
 80036e2:	460b      	mov	r3, r1
 80036e4:	4614      	mov	r4, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	4621      	mov	r1, r4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f04f 0400 	mov.w	r4, #0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4623      	mov	r3, r4
 80036f4:	f7fd fa48 	bl	8000b88 <__aeabi_uldivmod>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e049      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	f04f 0400 	mov.w	r4, #0
 800370a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	ea03 0501 	and.w	r5, r3, r1
 8003716:	ea04 0602 	and.w	r6, r4, r2
 800371a:	4629      	mov	r1, r5
 800371c:	4632      	mov	r2, r6
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	0154      	lsls	r4, r2, #5
 8003728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800372c:	014b      	lsls	r3, r1, #5
 800372e:	4619      	mov	r1, r3
 8003730:	4622      	mov	r2, r4
 8003732:	1b49      	subs	r1, r1, r5
 8003734:	eb62 0206 	sbc.w	r2, r2, r6
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	0194      	lsls	r4, r2, #6
 8003742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003746:	018b      	lsls	r3, r1, #6
 8003748:	1a5b      	subs	r3, r3, r1
 800374a:	eb64 0402 	sbc.w	r4, r4, r2
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	00e2      	lsls	r2, r4, #3
 8003758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800375c:	00d9      	lsls	r1, r3, #3
 800375e:	460b      	mov	r3, r1
 8003760:	4614      	mov	r4, r2
 8003762:	195b      	adds	r3, r3, r5
 8003764:	eb44 0406 	adc.w	r4, r4, r6
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	02a2      	lsls	r2, r4, #10
 8003772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003776:	0299      	lsls	r1, r3, #10
 8003778:	460b      	mov	r3, r1
 800377a:	4614      	mov	r4, r2
 800377c:	4618      	mov	r0, r3
 800377e:	4621      	mov	r1, r4
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f04f 0400 	mov.w	r4, #0
 8003786:	461a      	mov	r2, r3
 8003788:	4623      	mov	r3, r4
 800378a:	f7fd f9fd 	bl	8000b88 <__aeabi_uldivmod>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	613b      	str	r3, [r7, #16]
      break;
 80037ae:	e0ae      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04a      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	f04f 0400 	mov.w	r4, #0
 80037d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	ea03 0501 	and.w	r5, r3, r1
 80037dc:	ea04 0602 	and.w	r6, r4, r2
 80037e0:	4629      	mov	r1, r5
 80037e2:	4632      	mov	r2, r6
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	0154      	lsls	r4, r2, #5
 80037ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f2:	014b      	lsls	r3, r1, #5
 80037f4:	4619      	mov	r1, r3
 80037f6:	4622      	mov	r2, r4
 80037f8:	1b49      	subs	r1, r1, r5
 80037fa:	eb62 0206 	sbc.w	r2, r2, r6
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	0194      	lsls	r4, r2, #6
 8003808:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800380c:	018b      	lsls	r3, r1, #6
 800380e:	1a5b      	subs	r3, r3, r1
 8003810:	eb64 0402 	sbc.w	r4, r4, r2
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	00e2      	lsls	r2, r4, #3
 800381e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003822:	00d9      	lsls	r1, r3, #3
 8003824:	460b      	mov	r3, r1
 8003826:	4614      	mov	r4, r2
 8003828:	195b      	adds	r3, r3, r5
 800382a:	eb44 0406 	adc.w	r4, r4, r6
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	0262      	lsls	r2, r4, #9
 8003838:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800383c:	0259      	lsls	r1, r3, #9
 800383e:	460b      	mov	r3, r1
 8003840:	4614      	mov	r4, r2
 8003842:	4618      	mov	r0, r3
 8003844:	4621      	mov	r1, r4
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	461a      	mov	r2, r3
 800384e:	4623      	mov	r3, r4
 8003850:	f7fd f99a 	bl	8000b88 <__aeabi_uldivmod>
 8003854:	4603      	mov	r3, r0
 8003856:	460c      	mov	r4, r1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e049      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385c:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	f04f 0400 	mov.w	r4, #0
 8003866:	f240 11ff 	movw	r1, #511	; 0x1ff
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	ea03 0501 	and.w	r5, r3, r1
 8003872:	ea04 0602 	and.w	r6, r4, r2
 8003876:	4629      	mov	r1, r5
 8003878:	4632      	mov	r2, r6
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f04f 0400 	mov.w	r4, #0
 8003882:	0154      	lsls	r4, r2, #5
 8003884:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003888:	014b      	lsls	r3, r1, #5
 800388a:	4619      	mov	r1, r3
 800388c:	4622      	mov	r2, r4
 800388e:	1b49      	subs	r1, r1, r5
 8003890:	eb62 0206 	sbc.w	r2, r2, r6
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	f04f 0400 	mov.w	r4, #0
 800389c:	0194      	lsls	r4, r2, #6
 800389e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	1a5b      	subs	r3, r3, r1
 80038a6:	eb64 0402 	sbc.w	r4, r4, r2
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	00e2      	lsls	r2, r4, #3
 80038b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038b8:	00d9      	lsls	r1, r3, #3
 80038ba:	460b      	mov	r3, r1
 80038bc:	4614      	mov	r4, r2
 80038be:	195b      	adds	r3, r3, r5
 80038c0:	eb44 0406 	adc.w	r4, r4, r6
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	02a2      	lsls	r2, r4, #10
 80038ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038d2:	0299      	lsls	r1, r3, #10
 80038d4:	460b      	mov	r3, r1
 80038d6:	4614      	mov	r4, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	4621      	mov	r1, r4
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	f7fd f94f 	bl	8000b88 <__aeabi_uldivmod>
 80038ea:	4603      	mov	r3, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_GetSysClockFreq+0x334>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0f1b      	lsrs	r3, r3, #28
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	613b      	str	r3, [r7, #16]
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <HAL_RCC_GetSysClockFreq+0x338>)
 800390a:	613b      	str	r3, [r7, #16]
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	693b      	ldr	r3, [r7, #16]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8083 	beq.w	8003a44 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800393e:	4b95      	ldr	r3, [pc, #596]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d019      	beq.n	800397e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800394a:	4b92      	ldr	r3, [pc, #584]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003956:	4b8f      	ldr	r3, [pc, #572]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d00c      	beq.n	800397e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003964:	4b8b      	ldr	r3, [pc, #556]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d112      	bne.n	8003996 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003970:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397c:	d10b      	bne.n	8003996 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d05b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x11e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d157      	bne.n	8003a42 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e216      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x8a>
 80039a0:	4b7c      	ldr	r3, [pc, #496]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7b      	ldr	r2, [pc, #492]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e01d      	b.n	80039ea <HAL_RCC_OscConfig+0xc6>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b6:	d10c      	bne.n	80039d2 <HAL_RCC_OscConfig+0xae>
 80039b8:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a72      	ldr	r2, [pc, #456]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e00b      	b.n	80039ea <HAL_RCC_OscConfig+0xc6>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 80039e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d013      	beq.n	8003a1a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe fa03 	bl	8001dfc <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fa:	f7fe f9ff 	bl	8001dfc <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b64      	cmp	r3, #100	; 0x64
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1db      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0xd6>
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fe f9ef 	bl	8001dfc <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a22:	f7fe f9eb 	bl	8001dfc <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b64      	cmp	r3, #100	; 0x64
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1c7      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a34:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_OscConfig+0xfe>
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d06f      	beq.n	8003b30 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a50:	4b50      	ldr	r3, [pc, #320]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a5c:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a68:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a74:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	d11c      	bne.n	8003aba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a80:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8c:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x180>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e18f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4938      	ldr	r1, [pc, #224]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab8:	e03a      	b.n	8003b30 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d020      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac2:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <HAL_RCC_OscConfig+0x274>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f998 	bl	8001dfc <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe f994 	bl	8001dfc <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e170      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
 8003b02:	e015      	b.n	8003b30 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x274>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f977 	bl	8001dfc <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b12:	f7fe f973 	bl	8001dfc <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e14f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d037      	beq.n	8003bac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe f957 	bl	8001dfc <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe f953 	bl	8001dfc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e12f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x270>)
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x22e>
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_RCC_OscConfig+0x278>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe f940 	bl	8001dfc <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7e:	e00f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe f93c 	bl	8001dfc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d908      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e118      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e9      	bne.n	8003b80 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe f8fb 	bl	8001dfc <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe f8f7 	bl	8001dfc <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0d3      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x4ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x31a>
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x354>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x33c>
 8003c46:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a60      	ldr	r2, [pc, #384]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5e      	ldr	r3, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5d      	ldr	r2, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x354>
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a59      	ldr	r2, [pc, #356]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe f8bc 	bl	8001dfc <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe f8b8 	bl	8001dfc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e092      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x364>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f8a6 	bl	8001dfc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f8a2 	bl	8001dfc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e07c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d068      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d060      	beq.n	8003dbe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d145      	bne.n	8003d90 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b33      	ldr	r3, [pc, #204]	; (8003dd4 <HAL_RCC_OscConfig+0x4b0>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f877 	bl	8001dfc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe f873 	bl	8001dfc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e04f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	071b      	lsls	r3, r3, #28
 8003d5c:	491b      	ldr	r1, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_RCC_OscConfig+0x4b0>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe f848 	bl	8001dfc <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe f844 	bl	8001dfc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e020      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44c>
 8003d8e:	e018      	b.n	8003dc2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_OscConfig+0x4b0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe f831 	bl	8001dfc <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe f82d 	bl	8001dfc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e009      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x4a8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x47a>
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470060 	.word	0x42470060

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e01d      	b.n	8003e26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f815 	bl	8003e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 f968 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d122      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d11b      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0202 	mvn.w	r2, #2
 8003eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8ee 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e005      	b.n	8003ee0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8e0 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f8f1 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d122      	bne.n	8003f3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d11b      	bne.n	8003f3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0204 	mvn.w	r2, #4
 8003f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f8c4 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003f26:	e005      	b.n	8003f34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8b6 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8c7 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d122      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d11b      	bne.n	8003f8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0208 	mvn.w	r2, #8
 8003f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2204      	movs	r2, #4
 8003f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f89a 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003f7a:	e005      	b.n	8003f88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f88c 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f89d 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d122      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0210 	mvn.w	r2, #16
 8003fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f870 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003fce:	e005      	b.n	8003fdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f862 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f873 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10e      	bne.n	800400e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0201 	mvn.w	r2, #1
 8004006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fd f9a1 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d10e      	bne.n	800403a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d107      	bne.n	800403a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f903 	bl	8004240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d10e      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d107      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f838 	bl	80040d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b20      	cmp	r3, #32
 8004072:	d10e      	bne.n	8004092 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b20      	cmp	r3, #32
 8004080:	d107      	bne.n	8004092 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0220 	mvn.w	r2, #32
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8cd 	bl	800422c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3c      	ldr	r2, [pc, #240]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3b      	ldr	r2, [pc, #236]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <TIM_Base_SetConfig+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d027      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d023      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x124>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d017      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <TIM_Base_SetConfig+0x128>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <TIM_Base_SetConfig+0x130>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a25      	ldr	r2, [pc, #148]	; (8004220 <TIM_Base_SetConfig+0x134>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a24      	ldr	r2, [pc, #144]	; (8004224 <TIM_Base_SetConfig+0x138>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a23      	ldr	r2, [pc, #140]	; (8004228 <TIM_Base_SetConfig+0x13c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <TIM_Base_SetConfig+0x114>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <TIM_Base_SetConfig+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40010400 	.word	0x40010400
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800
 8004220:	40001800 	.word	0x40001800
 8004224:	40001c00 	.word	0x40001c00
 8004228:	40002000 	.word	0x40002000

0800422c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 800425c:	e003      	b.n	8004266 <delay+0x12>
 800425e:	bf00      	nop
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f8      	bne.n	800425e <delay+0xa>
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d003      	beq.n	800428e <GPIO_Init+0x16>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8081 	bne.w	8004390 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <GPIO_Init+0x120>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a40      	ldr	r2, [pc, #256]	; (8004398 <GPIO_Init+0x120>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b3e      	ldr	r3, [pc, #248]	; (8004398 <GPIO_Init+0x120>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <GPIO_Init+0x120>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a39      	ldr	r2, [pc, #228]	; (8004398 <GPIO_Init+0x120>)
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <GPIO_Init+0x120>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <GPIO_Init+0x120>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a32      	ldr	r2, [pc, #200]	; (8004398 <GPIO_Init+0x120>)
 80042d0:	f043 0304 	orr.w	r3, r3, #4
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <GPIO_Init+0x120>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 80042e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80042e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4619      	mov	r1, r3
 80042fa:	4828      	ldr	r0, [pc, #160]	; (800439c <GPIO_Init+0x124>)
 80042fc:	f7fd fe8e 	bl	800201c <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8004300:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8004304:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	4619      	mov	r1, r3
 8004318:	4821      	ldr	r0, [pc, #132]	; (80043a0 <GPIO_Init+0x128>)
 800431a:	f7fd fe7f 	bl	800201c <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	481b      	ldr	r0, [pc, #108]	; (80043a4 <GPIO_Init+0x12c>)
 8004336:	f7fd fe71 	bl	800201c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 800433a:	2313      	movs	r3, #19
 800433c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004346:	2300      	movs	r3, #0
 8004348:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	4619      	mov	r1, r3
 8004350:	4812      	ldr	r0, [pc, #72]	; (800439c <GPIO_Init+0x124>)
 8004352:	f7fd fe63 	bl	800201c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004356:	2301      	movs	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800435a:	2301      	movs	r3, #1
 800435c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004366:	f107 0314 	add.w	r3, r7, #20
 800436a:	4619      	mov	r1, r3
 800436c:	480c      	ldr	r0, [pc, #48]	; (80043a0 <GPIO_Init+0x128>)
 800436e:	f7fd fe55 	bl	800201c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004372:	2302      	movs	r3, #2
 8004374:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800437e:	2300      	movs	r3, #0
 8004380:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	4619      	mov	r1, r3
 8004388:	4806      	ldr	r0, [pc, #24]	; (80043a4 <GPIO_Init+0x12c>)
 800438a:	f7fd fe47 	bl	800201c <HAL_GPIO_Init>
 800438e:	e000      	b.n	8004392 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8004390:	bf00      	nop
}
 8004392:	3728      	adds	r7, #40	; 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	40020000 	.word	0x40020000
 80043a0:	40020400 	.word	0x40020400
 80043a4:	40020800 	.word	0x40020800

080043a8 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <LCD_Write8+0xa4>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043ba:	4013      	ands	r3, r2
 80043bc:	79fa      	ldrb	r2, [r7, #7]
 80043be:	0252      	lsls	r2, r2, #9
 80043c0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80043c4:	431a      	orrs	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	431a      	orrs	r2, r3
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	491c      	ldr	r1, [pc, #112]	; (800444c <LCD_Write8+0xa4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <LCD_Write8+0xa8>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 80043e6:	4013      	ands	r3, r2
 80043e8:	79fa      	ldrb	r2, [r7, #7]
 80043ea:	f002 0208 	and.w	r2, r2, #8
 80043ee:	431a      	orrs	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	431a      	orrs	r2, r3
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	105b      	asrs	r3, r3, #1
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	4910      	ldr	r1, [pc, #64]	; (8004450 <LCD_Write8+0xa8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <LCD_Write8+0xac>)
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800441a:	4013      	ands	r3, r2
 800441c:	79fa      	ldrb	r2, [r7, #7]
 800441e:	0192      	lsls	r2, r2, #6
 8004420:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004424:	490b      	ldr	r1, [pc, #44]	; (8004454 <LCD_Write8+0xac>)
 8004426:	4313      	orrs	r3, r2
 8004428:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <LCD_Write8+0xa4>)
 800442c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004430:	619a      	str	r2, [r3, #24]
 8004432:	2002      	movs	r0, #2
 8004434:	f7ff ff0e 	bl	8004254 <delay>
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <LCD_Write8+0xa4>)
 800443a:	2202      	movs	r2, #2
 800443c:	619a      	str	r2, [r3, #24]
 800443e:	2002      	movs	r0, #2
 8004440:	f7ff ff08 	bl	8004254 <delay>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40020000 	.word	0x40020000
 8004450:	40020400 	.word	0x40020400
 8004454:	40020800 	.word	0x40020800

08004458 <LCD_Write16Register8>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	460a      	mov	r2, r1
 8004462:	71fb      	strb	r3, [r7, #7]
 8004464:	4613      	mov	r3, r2
 8004466:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <LCD_Write16Register8+0x48>)
 800446a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800446e:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff98 	bl	80043a8 <LCD_Write8>
	LCD_CD_DATA();
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <LCD_Write16Register8+0x48>)
 800447a:	2210      	movs	r2, #16
 800447c:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	b29b      	uxth	r3, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff8e 	bl	80043a8 <LCD_Write8>
	LCD_Write8(d);
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff89 	bl	80043a8 <LCD_Write8>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40020000 	.word	0x40020000

080044a4 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	460a      	mov	r2, r1
 80044ae:	80fb      	strh	r3, [r7, #6]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <LCD_Write16Register16+0x58>)
 80044b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044ba:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff6f 	bl	80043a8 <LCD_Write8>
	LCD_Write8(a);
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff6a 	bl	80043a8 <LCD_Write8>
	LCD_CD_DATA();
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <LCD_Write16Register16+0x58>)
 80044d6:	2210      	movs	r2, #16
 80044d8:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 80044da:	88bb      	ldrh	r3, [r7, #4]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff60 	bl	80043a8 <LCD_Write8>
	LCD_Write8(d);
 80044e8:	88bb      	ldrh	r3, [r7, #4]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff5b 	bl	80043a8 <LCD_Write8>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40020000 	.word	0x40020000

08004500 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8004506:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <LCD_Init+0xf4>)
 8004508:	22f0      	movs	r2, #240	; 0xf0
 800450a:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <LCD_Init+0xf8>)
 800450e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004512:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8004514:	4b39      	ldr	r3, [pc, #228]	; (80045fc <LCD_Init+0xfc>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <LCD_Init+0x100>)
 800451c:	2200      	movs	r2, #0
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	4b37      	ldr	r3, [pc, #220]	; (8004600 <LCD_Init+0x100>)
 8004522:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <LCD_Init+0x104>)
 8004528:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <LCD_Init+0x108>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <LCD_Init+0x10c>)
 8004532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	4b34      	ldr	r3, [pc, #208]	; (800460c <LCD_Init+0x10c>)
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <LCD_Init+0x110>)
 800453e:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <LCD_Init+0x114>)
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8004546:	2001      	movs	r0, #1
 8004548:	f7ff fe96 	bl	8004278 <GPIO_Init>

	LCD_Reset();
 800454c:	f000 f990 	bl	8004870 <LCD_Reset>
	HAL_Delay(50);
 8004550:	2032      	movs	r0, #50	; 0x32
 8004552:	f7fd fc5f 	bl	8001e14 <HAL_Delay>

	LCD_CS_ACTIVE();
 8004556:	4b30      	ldr	r3, [pc, #192]	; (8004618 <LCD_Init+0x118>)
 8004558:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800455c:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8004562:	e01d      	b.n	80045a0 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	71fa      	strb	r2, [r7, #7]
 800456a:	461a      	mov	r2, r3
 800456c:	4b2b      	ldr	r3, [pc, #172]	; (800461c <LCD_Init+0x11c>)
 800456e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004572:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	71fa      	strb	r2, [r7, #7]
 800457a:	461a      	mov	r2, r3
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <LCD_Init+0x11c>)
 800457e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004582:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 8004584:	88bb      	ldrh	r3, [r7, #4]
 8004586:	2bff      	cmp	r3, #255	; 0xff
 8004588:	d104      	bne.n	8004594 <LCD_Init+0x94>
			HAL_Delay(d);
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd fc41 	bl	8001e14 <HAL_Delay>
 8004592:	e005      	b.n	80045a0 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	88bb      	ldrh	r3, [r7, #4]
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff82 	bl	80044a4 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b65      	cmp	r3, #101	; 0x65
 80045a4:	d9de      	bls.n	8004564 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <LCD_Init+0xfc>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa3c 	bl	8004a28 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <LCD_Init+0xf4>)
 80045b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <LCD_Init+0xf8>)
 80045be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2100      	movs	r1, #0
 80045ca:	2000      	movs	r0, #0
 80045cc:	f000 f99a 	bl	8004904 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <LCD_Init+0x118>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f000 f908 	bl	80047ec <LCD_FillScreen>
	LCD_SetTextSize(0);
 80045dc:	2000      	movs	r0, #0
 80045de:	f000 fc67 	bl	8004eb0 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 80045e2:	2100      	movs	r1, #0
 80045e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80045e8:	f000 fc7c 	bl	8004ee4 <LCD_SetTextColor>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000460 	.word	0x20000460
 80045f8:	20000462 	.word	0x20000462
 80045fc:	2000046d 	.word	0x2000046d
 8004600:	20000464 	.word	0x20000464
 8004604:	20000466 	.word	0x20000466
 8004608:	2000046c 	.word	0x2000046c
 800460c:	2000046a 	.word	0x2000046a
 8004610:	20000468 	.word	0x20000468
 8004614:	2000046e 	.word	0x2000046e
 8004618:	40020400 	.word	0x40020400
 800461c:	0800ad8c 	.word	0x0800ad8c

08004620 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]
 800462a:	460b      	mov	r3, r1
 800462c:	80bb      	strh	r3, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8004632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	db51      	blt.n	80046de <LCD_DrawPixel+0xbe>
 800463a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	db4d      	blt.n	80046de <LCD_DrawPixel+0xbe>
 8004642:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <LCD_DrawPixel+0xc8>)
 8004644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004648:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800464c:	429a      	cmp	r2, r3
 800464e:	da46      	bge.n	80046de <LCD_DrawPixel+0xbe>
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <LCD_DrawPixel+0xcc>)
 8004652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004656:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800465a:	429a      	cmp	r2, r3
 800465c:	da3f      	bge.n	80046de <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <LCD_DrawPixel+0xd0>)
 8004660:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004664:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <LCD_DrawPixel+0xd4>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d00d      	beq.n	800468a <LCD_DrawPixel+0x6a>
 800466e:	2b03      	cmp	r3, #3
 8004670:	d017      	beq.n	80046a2 <LCD_DrawPixel+0x82>
 8004672:	2b01      	cmp	r3, #1
 8004674:	d120      	bne.n	80046b8 <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 800467a:	88bb      	ldrh	r3, [r7, #4]
 800467c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004680:	b29b      	uxth	r3, r3
 8004682:	80fb      	strh	r3, [r7, #6]
		y = t;
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	80bb      	strh	r3, [r7, #4]
		break;
 8004688:	e016      	b.n	80046b8 <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004690:	b29b      	uxth	r3, r3
 8004692:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800469a:	3301      	adds	r3, #1
 800469c:	b29b      	uxth	r3, r3
 800469e:	80bb      	strh	r3, [r7, #4]
		break;
 80046a0:	e00a      	b.n	80046b8 <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	81fb      	strh	r3, [r7, #14]
		x = y;
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80046b0:	3301      	adds	r3, #1
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	80bb      	strh	r3, [r7, #4]
		break;
 80046b6:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4619      	mov	r1, r3
 80046bc:	2020      	movs	r0, #32
 80046be:	f7ff fef1 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80046c2:	88bb      	ldrh	r3, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	2021      	movs	r0, #33	; 0x21
 80046c8:	f7ff feec 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	4619      	mov	r1, r3
 80046d0:	2022      	movs	r0, #34	; 0x22
 80046d2:	f7ff fee7 	bl	80044a4 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <LCD_DrawPixel+0xd0>)
 80046d8:	2201      	movs	r2, #1
 80046da:	619a      	str	r2, [r3, #24]
 80046dc:	e000      	b.n	80046e0 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 80046de:	bf00      	nop
}
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000460 	.word	0x20000460
 80046ec:	20000462 	.word	0x20000462
 80046f0:	40020400 	.word	0x40020400
 80046f4:	2000046d 	.word	0x2000046d

080046f8 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fc04 	bl	8004f14 <LCD_Color565_to_R>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]
	uint8_t green = LCD_Color565_to_G(color);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc0f 	bl	8004f36 <LCD_Color565_to_G>
 8004718:	4603      	mov	r3, r0
 800471a:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = LCD_Color565_to_B(color);
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc1a 	bl	8004f58 <LCD_Color565_to_B>
 8004724:	4603      	mov	r3, r0
 8004726:	737b      	strb	r3, [r7, #13]
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <LCD_Flood+0xec>)
 800472a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800472e:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4619      	mov	r1, r3
 8004734:	2022      	movs	r0, #34	; 0x22
 8004736:	f7ff feb5 	bl	80044a4 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	7bbb      	ldrb	r3, [r7, #14]
 8004744:	429a      	cmp	r2, r3
 8004746:	d141      	bne.n	80047cc <LCD_Flood+0xd4>
 8004748:	7bba      	ldrb	r2, [r7, #14]
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	429a      	cmp	r2, r3
 800474e:	d13d      	bne.n	80047cc <LCD_Flood+0xd4>
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	7b7b      	ldrb	r3, [r7, #13]
 8004754:	429a      	cmp	r2, r3
 8004756:	d139      	bne.n	80047cc <LCD_Flood+0xd4>
#else
	if (hi == lo) {
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8004758:	e026      	b.n	80047a8 <LCD_Flood+0xb0>
#if defined(SSD1297)
			LCD_WR_STROBE();
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <LCD_Flood+0xf0>)
 800475c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004760:	619a      	str	r2, [r3, #24]
 8004762:	2002      	movs	r0, #2
 8004764:	f7ff fd76 	bl	8004254 <delay>
 8004768:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <LCD_Flood+0xf0>)
 800476a:	2202      	movs	r2, #2
 800476c:	619a      	str	r2, [r3, #24]
 800476e:	2002      	movs	r0, #2
 8004770:	f7ff fd70 	bl	8004254 <delay>
#endif
			LCD_WR_STROBE();
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <LCD_Flood+0xf0>)
 8004776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800477a:	619a      	str	r2, [r3, #24]
 800477c:	2002      	movs	r0, #2
 800477e:	f7ff fd69 	bl	8004254 <delay>
 8004782:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <LCD_Flood+0xf0>)
 8004784:	2202      	movs	r2, #2
 8004786:	619a      	str	r2, [r3, #24]
 8004788:	2002      	movs	r0, #2
 800478a:	f7ff fd63 	bl	8004254 <delay>
			LCD_WR_STROBE();
 800478e:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <LCD_Flood+0xf0>)
 8004790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004794:	619a      	str	r2, [r3, #24]
 8004796:	2002      	movs	r0, #2
 8004798:	f7ff fd5c 	bl	8004254 <delay>
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <LCD_Flood+0xf0>)
 800479e:	2202      	movs	r2, #2
 80047a0:	619a      	str	r2, [r3, #24]
 80047a2:	2002      	movs	r0, #2
 80047a4:	f7ff fd56 	bl	8004254 <delay>
		while (len--) {
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	603a      	str	r2, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d3      	bne.n	800475a <LCD_Flood+0x62>
	if ((red == green) && (green == blue) && (red == blue)) {
 80047b2:	e010      	b.n	80047d6 <LCD_Flood+0xde>
		}
	} else {
		while (len--) {
#if defined(SSD1297)
			LCD_Write8(red);
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fdf6 	bl	80043a8 <LCD_Write8>
			LCD_Write8(green);
 80047bc:	7bbb      	ldrb	r3, [r7, #14]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fdf2 	bl	80043a8 <LCD_Write8>
			LCD_Write8(blue);
 80047c4:	7b7b      	ldrb	r3, [r7, #13]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fdee 	bl	80043a8 <LCD_Write8>
		while (len--) {
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	603a      	str	r2, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ee      	bne.n	80047b4 <LCD_Flood+0xbc>
			LCD_Write8(lo);
#endif
		}
	}

	LCD_CS_IDLE();
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <LCD_Flood+0xec>)
 80047d8:	2201      	movs	r2, #1
 80047da:	619a      	str	r2, [r3, #24]
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40020400 	.word	0x40020400
 80047e8:	40020000 	.word	0x40020000

080047ec <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 80047f6:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <LCD_FillScreen+0x7c>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d00d      	beq.n	800481a <LCD_FillScreen+0x2e>
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d011      	beq.n	8004826 <LCD_FillScreen+0x3a>
 8004802:	2b01      	cmp	r3, #1
 8004804:	d004      	beq.n	8004810 <LCD_FillScreen+0x24>
	default:
		x = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	81fb      	strh	r3, [r7, #14]
		y = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	81bb      	strh	r3, [r7, #12]
		break;
 800480e:	e010      	b.n	8004832 <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 8004810:	23ef      	movs	r3, #239	; 0xef
 8004812:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	81bb      	strh	r3, [r7, #12]
		break;
 8004818:	e00b      	b.n	8004832 <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 800481a:	23ef      	movs	r3, #239	; 0xef
 800481c:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800481e:	f240 133f 	movw	r3, #319	; 0x13f
 8004822:	81bb      	strh	r3, [r7, #12]
		break;
 8004824:	e005      	b.n	8004832 <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800482a:	f240 133f 	movw	r3, #319	; 0x13f
 800482e:	81bb      	strh	r3, [r7, #12]
		break;
 8004830:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <LCD_FillScreen+0x80>)
 8004834:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004838:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
 800483a:	89fb      	ldrh	r3, [r7, #14]
 800483c:	4619      	mov	r1, r3
 800483e:	204e      	movs	r0, #78	; 0x4e
 8004840:	f7ff fe0a 	bl	8004458 <LCD_Write16Register8>
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
 8004844:	89bb      	ldrh	r3, [r7, #12]
 8004846:	4619      	mov	r1, r3
 8004848:	204f      	movs	r0, #79	; 0x4f
 800484a:	f7ff fe05 	bl	8004458 <LCD_Write16Register8>
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
#endif
	LCD_CS_IDLE();
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <LCD_FillScreen+0x80>)
 8004850:	2201      	movs	r2, #1
 8004852:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff4c 	bl	80046f8 <LCD_Flood>
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	2000046d 	.word	0x2000046d
 800486c:	40020400 	.word	0x40020400

08004870 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <LCD_Reset+0x88>)
 8004878:	2201      	movs	r2, #1
 800487a:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <LCD_Reset+0x8c>)
 800487e:	2210      	movs	r2, #16
 8004880:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <LCD_Reset+0x8c>)
 8004884:	2202      	movs	r2, #2
 8004886:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <LCD_Reset+0x8c>)
 800488a:	2201      	movs	r2, #1
 800488c:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <LCD_Reset+0x90>)
 8004890:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004894:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8004896:	2002      	movs	r0, #2
 8004898:	f7fd fabc 	bl	8001e14 <HAL_Delay>
	LCD_RST_IDLE();
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <LCD_Reset+0x90>)
 800489e:	2202      	movs	r2, #2
 80048a0:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 80048a2:	2078      	movs	r0, #120	; 0x78
 80048a4:	f7fd fab6 	bl	8001e14 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <LCD_Reset+0x88>)
 80048aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048ae:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <LCD_Reset+0x8c>)
 80048b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048b6:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7ff fd75 	bl	80043a8 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 80048be:	2300      	movs	r3, #0
 80048c0:	71fb      	strb	r3, [r7, #7]
 80048c2:	e00f      	b.n	80048e4 <LCD_Reset+0x74>
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <LCD_Reset+0x8c>)
 80048c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048ca:	619a      	str	r2, [r3, #24]
 80048cc:	2002      	movs	r0, #2
 80048ce:	f7ff fcc1 	bl	8004254 <delay>
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <LCD_Reset+0x8c>)
 80048d4:	2202      	movs	r2, #2
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	2002      	movs	r0, #2
 80048da:	f7ff fcbb 	bl	8004254 <delay>
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	3301      	adds	r3, #1
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d9ec      	bls.n	80048c4 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 80048ea:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <LCD_Reset+0x88>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	619a      	str	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40020400 	.word	0x40020400
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020800 	.word	0x40020800

08004904 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	80fb      	strh	r3, [r7, #6]
 8004916:	4603      	mov	r3, r0
 8004918:	80bb      	strh	r3, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <LCD_SetAddrWindow+0x11c>)
 8004924:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004928:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <LCD_SetAddrWindow+0x120>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d01c      	beq.n	800496c <LCD_SetAddrWindow+0x68>
 8004932:	2b03      	cmp	r3, #3
 8004934:	d037      	beq.n	80049a6 <LCD_SetAddrWindow+0xa2>
 8004936:	2b01      	cmp	r3, #1
 8004938:	d004      	beq.n	8004944 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	617b      	str	r3, [r7, #20]
		y = y1;
 800493e:	88bb      	ldrh	r3, [r7, #4]
 8004940:	613b      	str	r3, [r7, #16]
		break;
 8004942:	e046      	b.n	80049d2 <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8004944:	88bb      	ldrh	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 800494c:	883b      	ldrh	r3, [r7, #0]
 800494e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004952:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004960:	807b      	strh	r3, [r7, #2]
		x = x2;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	617b      	str	r3, [r7, #20]
		y = y1;
 8004966:	88bb      	ldrh	r3, [r7, #4]
 8004968:	613b      	str	r3, [r7, #16]
		break;
 800496a:	e032      	b.n	80049d2 <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 8004970:	887b      	ldrh	r3, [r7, #2]
 8004972:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004976:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8004980:	807b      	strh	r3, [r7, #2]
		t = y1;
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 8004986:	883b      	ldrh	r3, [r7, #0]
 8004988:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 800498c:	3301      	adds	r3, #1
 800498e:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8004998:	3301      	adds	r3, #1
 800499a:	803b      	strh	r3, [r7, #0]
		x = x2;
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	617b      	str	r3, [r7, #20]
		y = y2;
 80049a0:	883b      	ldrh	r3, [r7, #0]
 80049a2:	613b      	str	r3, [r7, #16]
		break;
 80049a4:	e015      	b.n	80049d2 <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 80049aa:	88bb      	ldrh	r3, [r7, #4]
 80049ac:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80049b4:	3301      	adds	r3, #1
 80049b6:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 80049b8:	883b      	ldrh	r3, [r7, #0]
 80049ba:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80049c4:	3301      	adds	r3, #1
 80049c6:	803b      	strh	r3, [r7, #0]
		x = x1;
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	617b      	str	r3, [r7, #20]
		y = y2;
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	613b      	str	r3, [r7, #16]
		break;
 80049d0:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	4619      	mov	r1, r3
 80049d6:	2050      	movs	r0, #80	; 0x50
 80049d8:	f7ff fd64 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	4619      	mov	r1, r3
 80049e0:	2051      	movs	r0, #81	; 0x51
 80049e2:	f7ff fd5f 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 80049e6:	88bb      	ldrh	r3, [r7, #4]
 80049e8:	4619      	mov	r1, r3
 80049ea:	2052      	movs	r0, #82	; 0x52
 80049ec:	f7ff fd5a 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 80049f0:	883b      	ldrh	r3, [r7, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	2053      	movs	r0, #83	; 0x53
 80049f6:	f7ff fd55 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	2020      	movs	r0, #32
 8004a02:	f7ff fd4f 	bl	80044a4 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	2021      	movs	r0, #33	; 0x21
 8004a0e:	f7ff fd49 	bl	80044a4 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <LCD_SetAddrWindow+0x11c>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	619a      	str	r2, [r3, #24]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}
 8004a20:	40020400 	.word	0x40020400
 8004a24:	2000046d 	.word	0x2000046d

08004a28 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4b28      	ldr	r3, [pc, #160]	; (8004adc <LCD_SetRotation+0xb4>)
 8004a3c:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8004a3e:	4b27      	ldr	r3, [pc, #156]	; (8004adc <LCD_SetRotation+0xb4>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d009      	beq.n	8004a5a <LCD_SetRotation+0x32>
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d007      	beq.n	8004a5a <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8004a4a:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <LCD_SetRotation+0xb8>)
 8004a4c:	22f0      	movs	r2, #240	; 0xf0
 8004a4e:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <LCD_SetRotation+0xbc>)
 8004a52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a56:	801a      	strh	r2, [r3, #0]
		break;
 8004a58:	e007      	b.n	8004a6a <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8004a5a:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <LCD_SetRotation+0xb8>)
 8004a5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a60:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <LCD_SetRotation+0xbc>)
 8004a64:	22f0      	movs	r2, #240	; 0xf0
 8004a66:	801a      	strh	r2, [r3, #0]
		break;
 8004a68:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <LCD_SetRotation+0xc0>)
 8004a6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a70:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <LCD_SetRotation+0xb4>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d00b      	beq.n	8004a92 <LCD_SetRotation+0x6a>
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d00d      	beq.n	8004a9a <LCD_SetRotation+0x72>
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d003      	beq.n	8004a8a <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 8004a82:	f241 0330 	movw	r3, #4144	; 0x1030
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	e00b      	b.n	8004aa2 <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 8004a8a:	f241 0328 	movw	r3, #4136	; 0x1028
 8004a8e:	81fb      	strh	r3, [r7, #14]
 8004a90:	e007      	b.n	8004aa2 <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 8004a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a96:	81fb      	strh	r3, [r7, #14]
 8004a98:	e003      	b.n	8004aa2 <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 8004a9a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a9e:	81fb      	strh	r3, [r7, #14]
 8004aa0:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2003      	movs	r0, #3
 8004aa8:	f7ff fcfc 	bl	80044a4 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <LCD_SetRotation+0xb8>)
 8004aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <LCD_SetRotation+0xbc>)
 8004aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7ff ff1c 	bl	8004904 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <LCD_SetRotation+0xc0>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	619a      	str	r2, [r3, #24]
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2000046d 	.word	0x2000046d
 8004ae0:	20000460 	.word	0x20000460
 8004ae4:	20000462 	.word	0x20000462
 8004ae8:	40020400 	.word	0x40020400

08004aec <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b08b      	sub	sp, #44	; 0x2c
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	461a      	mov	r2, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	80fb      	strh	r3, [r7, #6]
 8004afe:	4603      	mov	r3, r0
 8004b00:	80bb      	strh	r3, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70fb      	strb	r3, [r7, #3]
 8004b06:	4613      	mov	r3, r2
 8004b08:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8004b12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b16:	4a65      	ldr	r2, [pc, #404]	; (8004cac <LCD_DrawChar+0x1c0>)
 8004b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1c:	88db      	ldrh	r3, [r3, #6]
 8004b1e:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 8004b20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b24:	4a61      	ldr	r2, [pc, #388]	; (8004cac <LCD_DrawChar+0x1c0>)
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	889b      	ldrh	r3, [r3, #4]
 8004b2c:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 8004b2e:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <LCD_DrawChar+0x1c4>)
 8004b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	f280 80b2 	bge.w	8004ca2 <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 8004b3e:	4b5d      	ldr	r3, [pc, #372]	; (8004cb4 <LCD_DrawChar+0x1c8>)
 8004b40:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8004b44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	f280 80aa 	bge.w	8004ca2 <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 8004b4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b52:	8abb      	ldrh	r3, [r7, #20]
 8004b54:	4413      	add	r3, r2
 8004b56:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f2c0 80a2 	blt.w	8004ca2 <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 8004b5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	4413      	add	r3, r2
 8004b66:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f2c0 809a 	blt.w	8004ca2 <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 8004b6e:	8abb      	ldrh	r3, [r7, #20]
 8004b70:	3307      	adds	r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da00      	bge.n	8004b78 <LCD_DrawChar+0x8c>
 8004b76:	3307      	adds	r3, #7
 8004b78:	10db      	asrs	r3, r3, #3
 8004b7a:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b1f      	cmp	r3, #31
 8004b80:	d802      	bhi.n	8004b88 <LCD_DrawChar+0x9c>
 8004b82:	2320      	movs	r3, #32
 8004b84:	70fb      	strb	r3, [r7, #3]
 8004b86:	e004      	b.n	8004b92 <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	2b7e      	cmp	r3, #126	; 0x7e
 8004b8c:	d901      	bls.n	8004b92 <LCD_DrawChar+0xa6>
 8004b8e:	2320      	movs	r3, #32
 8004b90:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	3b20      	subs	r3, #32
 8004b96:	8afa      	ldrh	r2, [r7, #22]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	8a7a      	ldrh	r2, [r7, #18]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8abb      	ldrh	r3, [r7, #20]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	e06e      	b.n	8004c98 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8004bba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <LCD_DrawChar+0x1c0>)
 8004bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	441a      	add	r2, r3
 8004bca:	8abb      	ldrh	r3, [r7, #20]
 8004bcc:	3307      	adds	r3, #7
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da00      	bge.n	8004bd4 <LCD_DrawChar+0xe8>
 8004bd2:	3307      	adds	r3, #7
 8004bd4:	10db      	asrs	r3, r3, #3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	fb03 f301 	mul.w	r3, r3, r1
 8004bde:	4413      	add	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8004be2:	8a7b      	ldrh	r3, [r7, #18]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d002      	beq.n	8004bee <LCD_DrawChar+0x102>
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d004      	beq.n	8004bf6 <LCD_DrawChar+0x10a>
 8004bec:	e00c      	b.n	8004c08 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004bf4:	e016      	b.n	8004c24 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	3201      	adds	r2, #1
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004c06:	e00d      	b.n	8004c24 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	4313      	orrs	r3, r2
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	3202      	adds	r2, #2
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004c22:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	e029      	b.n	8004c7e <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 8004c2a:	8aba      	ldrh	r2, [r7, #20]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	7c7b      	ldrb	r3, [r7, #17]
 8004c32:	4413      	add	r3, r2
 8004c34:	3b01      	subs	r3, #1
 8004c36:	2201      	movs	r2, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	b21b      	sxth	r3, r3
 8004c52:	883a      	ldrh	r2, [r7, #0]
 8004c54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fce1 	bl	8004620 <LCD_DrawPixel>
 8004c5e:	e00b      	b.n	8004c78 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	4413      	add	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004c6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fcd4 	bl	8004620 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	8abb      	ldrh	r3, [r7, #20]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3d1      	bcc.n	8004c2a <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8004c86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	3301      	adds	r3, #1
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	8afb      	ldrh	r3, [r7, #22]
 8004c9a:	6a3a      	ldr	r2, [r7, #32]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d38c      	bcc.n	8004bba <LCD_DrawChar+0xce>
 8004ca0:	e000      	b.n	8004ca4 <LCD_DrawChar+0x1b8>
		return;
 8004ca2:	bf00      	nop
	}
}
 8004ca4:	372c      	adds	r7, #44	; 0x2c
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000014 	.word	0x20000014
 8004cb0:	20000460 	.word	0x20000460
 8004cb4:	20000462 	.word	0x20000462

08004cb8 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8004cb8:	b40f      	push	{r0, r1, r2, r3}
 8004cba:	b5b0      	push	{r4, r5, r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8004cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cc4:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf, sizeof(buf), fmt, lst);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cce:	486e      	ldr	r0, [pc, #440]	; (8004e88 <LCD_Printf+0x1d0>)
 8004cd0:	f001 fd8c 	bl	80067ec <vsnprintf_>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <LCD_Printf+0x1d4>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b6d      	ldr	r3, [pc, #436]	; (8004e90 <LCD_Printf+0x1d8>)
 8004cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce0:	88db      	ldrh	r3, [r3, #6]
 8004ce2:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8004ce4:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <LCD_Printf+0x1d4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b69      	ldr	r3, [pc, #420]	; (8004e90 <LCD_Printf+0x1d8>)
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	889b      	ldrh	r3, [r3, #4]
 8004cf2:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <LCD_Printf+0x1d0>)
 8004cf6:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8004cf8:	e0ba      	b.n	8004e70 <LCD_Printf+0x1b8>
		if (*p == '\n') {
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b0a      	cmp	r3, #10
 8004d00:	d10e      	bne.n	8004d20 <LCD_Printf+0x68>
			m_cursor_y += height;
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <LCD_Printf+0x1dc>)
 8004d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b21a      	sxth	r2, r3
 8004d14:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <LCD_Printf+0x1dc>)
 8004d16:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8004d18:	4b5f      	ldr	r3, [pc, #380]	; (8004e98 <LCD_Printf+0x1e0>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e0a4      	b.n	8004e6a <LCD_Printf+0x1b2>
		} else if (*p == '\r') {
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b0d      	cmp	r3, #13
 8004d26:	d103      	bne.n	8004d30 <LCD_Printf+0x78>
			m_cursor_x = 0;
 8004d28:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <LCD_Printf+0x1e0>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e09c      	b.n	8004e6a <LCD_Printf+0x1b2>
		} else if (*p == '\t') {
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d10d      	bne.n	8004d54 <LCD_Printf+0x9c>
			m_cursor_x += width * 4;
 8004d38:	88bb      	ldrh	r3, [r7, #4]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	4b55      	ldr	r3, [pc, #340]	; (8004e98 <LCD_Printf+0x1e0>)
 8004d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	b21a      	sxth	r2, r3
 8004d4e:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <LCD_Printf+0x1e0>)
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e08a      	b.n	8004e6a <LCD_Printf+0x1b2>
		} else {
#ifdef WIPE_LINES
			if (m_cursor_x == 0) {
 8004d54:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <LCD_Printf+0x1e0>)
 8004d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d132      	bne.n	8004dc4 <LCD_Printf+0x10c>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
 8004d5e:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <LCD_Printf+0x1dc>)
 8004d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d64:	b299      	uxth	r1, r3
 8004d66:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <LCD_Printf+0x1e4>)
 8004d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b298      	uxth	r0, r3
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <LCD_Printf+0x1dc>)
 8004d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	4602      	mov	r2, r0
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7ff fdbd 	bl	8004904 <LCD_SetAddrWindow>
				LCD_Flood(m_textbgcolor, (long) m_width * height);
 8004d8a:	4b45      	ldr	r3, [pc, #276]	; (8004ea0 <LCD_Printf+0x1e8>)
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <LCD_Printf+0x1e4>)
 8004d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d94:	88f9      	ldrh	r1, [r7, #6]
 8004d96:	b289      	uxth	r1, r1
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7ff fcaa 	bl	80046f8 <LCD_Flood>
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004da4:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <LCD_Printf+0x1e4>)
 8004da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	4b3c      	ldr	r3, [pc, #240]	; (8004ea4 <LCD_Printf+0x1ec>)
 8004db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f7ff fda0 	bl	8004904 <LCD_SetAddrWindow>
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8004dc4:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <LCD_Printf+0x1dc>)
 8004dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b35      	ldr	r3, [pc, #212]	; (8004ea4 <LCD_Printf+0x1ec>)
 8004dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	1acb      	subs	r3, r1, r3
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	db07      	blt.n	8004dee <LCD_Printf+0x136>
				m_cursor_y = 0;
 8004dde:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <LCD_Printf+0x1dc>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
 8004de4:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <LCD_Printf+0x1e8>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fcff 	bl	80047ec <LCD_FillScreen>
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <LCD_Printf+0x1e0>)
 8004df0:	f9b3 0000 	ldrsh.w	r0, [r3]
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <LCD_Printf+0x1dc>)
 8004df6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	781c      	ldrb	r4, [r3, #0]
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <LCD_Printf+0x1f0>)
 8004e00:	881d      	ldrh	r5, [r3, #0]
 8004e02:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <LCD_Printf+0x1e8>)
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <LCD_Printf+0x1d4>)
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	9201      	str	r2, [sp, #4]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462b      	mov	r3, r5
 8004e10:	4622      	mov	r2, r4
 8004e12:	f7ff fe6b 	bl	8004aec <LCD_DrawChar>
			m_cursor_x += width;
 8004e16:	88bb      	ldrh	r3, [r7, #4]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <LCD_Printf+0x1e0>)
 8004e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b21a      	sxth	r2, r3
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <LCD_Printf+0x1e0>)
 8004e2a:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <LCD_Printf+0x1f4>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01a      	beq.n	8004e6a <LCD_Printf+0x1b2>
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <LCD_Printf+0x1e0>)
 8004e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <LCD_Printf+0x1e4>)
 8004e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e42:	4619      	mov	r1, r3
 8004e44:	88bb      	ldrh	r3, [r7, #4]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	1acb      	subs	r3, r1, r3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	dd0d      	ble.n	8004e6a <LCD_Printf+0x1b2>
				m_cursor_y += height;
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <LCD_Printf+0x1dc>)
 8004e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b21a      	sxth	r2, r3
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <LCD_Printf+0x1dc>)
 8004e62:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <LCD_Printf+0x1e0>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f47f af40 	bne.w	8004cfa <LCD_Printf+0x42>
	}
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004e84:	b004      	add	sp, #16
 8004e86:	4770      	bx	lr
 8004e88:	20000470 	.word	0x20000470
 8004e8c:	2000046c 	.word	0x2000046c
 8004e90:	20000014 	.word	0x20000014
 8004e94:	20000466 	.word	0x20000466
 8004e98:	20000464 	.word	0x20000464
 8004e9c:	20000460 	.word	0x20000460
 8004ea0:	2000046a 	.word	0x2000046a
 8004ea4:	20000462 	.word	0x20000462
 8004ea8:	20000468 	.word	0x20000468
 8004eac:	2000046e 	.word	0x2000046e

08004eb0 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8004eba:	2201      	movs	r2, #1
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d305      	bcc.n	8004ece <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <LCD_SetTextSize+0x30>)
 8004eca:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8004ecc:	e002      	b.n	8004ed4 <LCD_SetTextSize+0x24>
		m_font = s;
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <LCD_SetTextSize+0x30>)
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	7013      	strb	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	2000046c 	.word	0x2000046c

08004ee4 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	460a      	mov	r2, r1
 8004eee:	80fb      	strh	r3, [r7, #6]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8004ef4:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <LCD_SetTextColor+0x28>)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8004efa:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <LCD_SetTextColor+0x2c>)
 8004efc:	88bb      	ldrh	r3, [r7, #4]
 8004efe:	8013      	strh	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000468 	.word	0x20000468
 8004f10:	2000046a 	.word	0x2000046a

08004f14 <LCD_Color565_to_R>:

inline uint32_t LCD_Color565_to_888(uint16_t color) {
    return (((color & 0xF800) << 8) | ((color & 0x7E0) << 5) | ((color & 0x1F) << 3));  // transform to rrrrrrxx ggggggxx bbbbbbxx
}

inline uint8_t LCD_Color565_to_R(uint16_t color) {
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrrxx
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	121b      	asrs	r3, r3, #8
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f023 0307 	bic.w	r3, r3, #7
 8004f28:	b2db      	uxtb	r3, r3
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LCD_Color565_to_G>:
inline uint8_t LCD_Color565_to_G(uint16_t color) {
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	10db      	asrs	r3, r3, #3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	b2db      	uxtb	r3, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <LCD_Color565_to_B>:
inline uint8_t LCD_Color565_to_B(uint16_t color) {
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbbxx
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	b2db      	uxtb	r3, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4603      	mov	r3, r0
 8004f82:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d204      	bcs.n	8004f96 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	701a      	strb	r2, [r3, #0]
  }
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004fb2:	bf00      	nop
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e002      	b.n	8004fd4 <_strnlen_s+0x16>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <_strnlen_s+0x28>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1e5a      	subs	r2, r3, #1
 8004fe0:	603a      	str	r2, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f3      	bne.n	8004fce <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	1ad3      	subs	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	2b2f      	cmp	r3, #47	; 0x2f
 8005006:	d904      	bls.n	8005012 <_is_digit+0x1a>
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	2b39      	cmp	r3, #57	; 0x39
 800500c:	d801      	bhi.n	8005012 <_is_digit+0x1a>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <_is_digit+0x1c>
 8005012:	2300      	movs	r3, #0
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005032:	e00e      	b.n	8005052 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4618      	mov	r0, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6011      	str	r1, [r2, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	4403      	add	r3, r0
 800504e:	3b30      	subs	r3, #48	; 0x30
 8005050:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ffcd 	bl	8004ff8 <_is_digit>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e7      	bne.n	8005034 <_atoi+0xe>
  }
  return i;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800506e:	b590      	push	{r4, r7, lr}
 8005070:	b087      	sub	sp, #28
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d125      	bne.n	80050d6 <_out_rev+0x68>
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d120      	bne.n	80050d6 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e00a      	b.n	80050b0 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	1c53      	adds	r3, r2, #1
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	68fc      	ldr	r4, [r7, #12]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	2020      	movs	r0, #32
 80050a8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3301      	adds	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d3f0      	bcc.n	800509a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80050b8:	e00d      	b.n	80050d6 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	3b01      	subs	r3, #1
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	4413      	add	r3, r2
 80050c6:	7818      	ldrb	r0, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	1c53      	adds	r3, r2, #1
 80050cc:	607b      	str	r3, [r7, #4]
 80050ce:	68fc      	ldr	r4, [r7, #12]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	47a0      	blx	r4
  while (len) {
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ee      	bne.n	80050ba <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80050e6:	e007      	b.n	80050f8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	1c53      	adds	r3, r2, #1
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	68fc      	ldr	r4, [r7, #12]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	2020      	movs	r0, #32
 80050f6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005100:	429a      	cmp	r2, r3
 8005102:	d8f1      	bhi.n	80050e8 <_out_rev+0x7a>
    }
  }

  return idx;
 8005104:	687b      	ldr	r3, [r7, #4]
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd90      	pop	{r4, r7, pc}

0800510e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b088      	sub	sp, #32
 8005112:	af04      	add	r7, sp, #16
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d136      	bne.n	8005194 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <_ntoa_format+0x50>
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d013      	beq.n	800515e <_ntoa_format+0x50>
 8005136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <_ntoa_format+0x3a>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <_ntoa_format+0x50>
      width--;
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	3b01      	subs	r3, #1
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800514e:	e006      	b.n	800515e <_ntoa_format+0x50>
      buf[len++] = '0';
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	61fa      	str	r2, [r7, #28]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	2230      	movs	r2, #48	; 0x30
 800515c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	429a      	cmp	r2, r3
 8005164:	d20a      	bcs.n	800517c <_ntoa_format+0x6e>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b1f      	cmp	r3, #31
 800516a:	d9f1      	bls.n	8005150 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800516c:	e006      	b.n	800517c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	61fa      	str	r2, [r7, #28]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4413      	add	r3, r2
 8005178:	2230      	movs	r2, #48	; 0x30
 800517a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <_ntoa_format+0x86>
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	429a      	cmp	r2, r3
 800518c:	d202      	bcs.n	8005194 <_ntoa_format+0x86>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b1f      	cmp	r3, #31
 8005192:	d9ec      	bls.n	800516e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d058      	beq.n	8005250 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d116      	bne.n	80051d6 <_ntoa_format+0xc8>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <_ntoa_format+0xc8>
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d003      	beq.n	80051be <_ntoa_format+0xb0>
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d10b      	bne.n	80051d6 <_ntoa_format+0xc8>
      len--;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <_ntoa_format+0xc8>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d102      	bne.n	80051d6 <_ntoa_format+0xc8>
        len--;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d10f      	bne.n	80051fc <_ntoa_format+0xee>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <_ntoa_format+0xee>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b1f      	cmp	r3, #31
 80051ea:	d807      	bhi.n	80051fc <_ntoa_format+0xee>
      buf[len++] = 'x';
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4413      	add	r3, r2
 80051f6:	2278      	movs	r2, #120	; 0x78
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e01f      	b.n	800523c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d10f      	bne.n	8005222 <_ntoa_format+0x114>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <_ntoa_format+0x114>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b1f      	cmp	r3, #31
 8005210:	d807      	bhi.n	8005222 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	61fa      	str	r2, [r7, #28]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	2258      	movs	r2, #88	; 0x58
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e00c      	b.n	800523c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	2b02      	cmp	r3, #2
 8005226:	d109      	bne.n	800523c <_ntoa_format+0x12e>
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b1f      	cmp	r3, #31
 800522c:	d806      	bhi.n	800523c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	61fa      	str	r2, [r7, #28]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	2262      	movs	r2, #98	; 0x62
 800523a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2b1f      	cmp	r3, #31
 8005240:	d806      	bhi.n	8005250 <_ntoa_format+0x142>
      buf[len++] = '0';
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	61fa      	str	r2, [r7, #28]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	2230      	movs	r2, #48	; 0x30
 800524e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b1f      	cmp	r3, #31
 8005254:	d824      	bhi.n	80052a0 <_ntoa_format+0x192>
    if (negative) {
 8005256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <_ntoa_format+0x160>
      buf[len++] = '-';
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	61fa      	str	r2, [r7, #28]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4413      	add	r3, r2
 8005268:	222d      	movs	r2, #45	; 0x2d
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	e018      	b.n	80052a0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	61fa      	str	r2, [r7, #28]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4413      	add	r3, r2
 8005282:	222b      	movs	r2, #43	; 0x2b
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e00b      	b.n	80052a0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	61fa      	str	r2, [r7, #28]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4413      	add	r3, r2
 800529c:	2220      	movs	r2, #32
 800529e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	9302      	str	r3, [sp, #8]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f7ff fed9 	bl	800506e <_out_rev>
 80052bc:	4603      	mov	r3, r0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b096      	sub	sp, #88	; 0x58
 80052ca:	af08      	add	r7, sp, #32
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80052de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80052e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <_ntoa_long+0x30>
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d033      	beq.n	800535e <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80052f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80052fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005300:	fb01 f202 	mul.w	r2, r1, r2
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800530a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800530e:	2b09      	cmp	r3, #9
 8005310:	d804      	bhi.n	800531c <_ntoa_long+0x56>
 8005312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005316:	3330      	adds	r3, #48	; 0x30
 8005318:	b2da      	uxtb	r2, r3
 800531a:	e00d      	b.n	8005338 <_ntoa_long+0x72>
 800531c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <_ntoa_long+0x64>
 8005326:	2241      	movs	r2, #65	; 0x41
 8005328:	e000      	b.n	800532c <_ntoa_long+0x66>
 800532a:	2261      	movs	r2, #97	; 0x61
 800532c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005330:	4413      	add	r3, r2
 8005332:	b2db      	uxtb	r3, r3
 8005334:	3b0a      	subs	r3, #10
 8005336:	b2da      	uxtb	r2, r3
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	6379      	str	r1, [r7, #52]	; 0x34
 800533e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005342:	440b      	add	r3, r1
 8005344:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8005348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8005352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <_ntoa_long+0x98>
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	2b1f      	cmp	r3, #31
 800535c:	d9cb      	bls.n	80052f6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800535e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005360:	9306      	str	r3, [sp, #24]
 8005362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff fec2 	bl	800510e <_ntoa_format>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3738      	adds	r7, #56	; 0x38
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b097      	sub	sp, #92	; 0x5c
 8005398:	af08      	add	r7, sp, #32
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80053a6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80053aa:	4323      	orrs	r3, r4
 80053ac:	d103      	bne.n	80053b6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80053ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b0:	f023 0310 	bic.w	r3, r3, #16
 80053b4:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80053b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <_ntoa_long_long+0x34>
 80053c0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80053c4:	4323      	orrs	r3, r4
 80053c6:	d039      	beq.n	800543c <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 80053c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053d0:	f7fb fbda 	bl	8000b88 <__aeabi_uldivmod>
 80053d4:	461c      	mov	r4, r3
 80053d6:	4613      	mov	r3, r2
 80053d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80053dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	d804      	bhi.n	80053ee <_ntoa_long_long+0x5a>
 80053e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053e8:	3330      	adds	r3, #48	; 0x30
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	e00d      	b.n	800540a <_ntoa_long_long+0x76>
 80053ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <_ntoa_long_long+0x68>
 80053f8:	2241      	movs	r2, #65	; 0x41
 80053fa:	e000      	b.n	80053fe <_ntoa_long_long+0x6a>
 80053fc:	2261      	movs	r2, #97	; 0x61
 80053fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005402:	4413      	add	r3, r2
 8005404:	b2db      	uxtb	r3, r3
 8005406:	3b0a      	subs	r3, #10
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	6379      	str	r1, [r7, #52]	; 0x34
 8005410:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005414:	440b      	add	r3, r1
 8005416:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800541a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800541e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005422:	f7fb fbb1 	bl	8000b88 <__aeabi_uldivmod>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800542e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005432:	4323      	orrs	r3, r4
 8005434:	d002      	beq.n	800543c <_ntoa_long_long+0xa8>
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	2b1f      	cmp	r3, #31
 800543a:	d9c5      	bls.n	80053c8 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800543c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005440:	9206      	str	r2, [sp, #24]
 8005442:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005444:	9205      	str	r2, [sp, #20]
 8005446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005448:	9204      	str	r2, [sp, #16]
 800544a:	9303      	str	r3, [sp, #12]
 800544c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	f107 0310 	add.w	r3, r7, #16
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fe53 	bl	800510e <_ntoa_format>
 8005468:	4603      	mov	r3, r0
}
 800546a:	4618      	mov	r0, r3
 800546c:	373c      	adds	r7, #60	; 0x3c
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	0000      	movs	r0, r0
 8005474:	0000      	movs	r0, r0
	...

08005478 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b09d      	sub	sp, #116	; 0x74
 800547c:	af04      	add	r7, sp, #16
 800547e:	6178      	str	r0, [r7, #20]
 8005480:	6139      	str	r1, [r7, #16]
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	f04f 0400 	mov.w	r4, #0
 8005496:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800549a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054a2:	f7fb fae1 	bl	8000a68 <__aeabi_dcmpeq>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10f      	bne.n	80054cc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	2303      	movs	r3, #3
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	4baf      	ldr	r3, [pc, #700]	; (8005778 <_ftoa+0x300>)
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	6939      	ldr	r1, [r7, #16]
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f7ff fdd3 	bl	800506e <_out_rev>
 80054c8:	4603      	mov	r3, r0
 80054ca:	e237      	b.n	800593c <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80054d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054d8:	f7fb fad0 	bl	8000a7c <__aeabi_dcmplt>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00f      	beq.n	8005502 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80054e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e4:	9303      	str	r3, [sp, #12]
 80054e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e8:	9302      	str	r3, [sp, #8]
 80054ea:	2304      	movs	r3, #4
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	4ba3      	ldr	r3, [pc, #652]	; (800577c <_ftoa+0x304>)
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6939      	ldr	r1, [r7, #16]
 80054f8:	6978      	ldr	r0, [r7, #20]
 80054fa:	f7ff fdb8 	bl	800506e <_out_rev>
 80054fe:	4603      	mov	r3, r0
 8005500:	e21c      	b.n	800593c <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8005502:	f04f 32ff 	mov.w	r2, #4294967295
 8005506:	4b9e      	ldr	r3, [pc, #632]	; (8005780 <_ftoa+0x308>)
 8005508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800550c:	f7fb fad4 	bl	8000ab8 <__aeabi_dcmpgt>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01d      	beq.n	8005552 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <_ftoa+0xac>
 8005520:	4b98      	ldr	r3, [pc, #608]	; (8005784 <_ftoa+0x30c>)
 8005522:	e000      	b.n	8005526 <_ftoa+0xae>
 8005524:	4b98      	ldr	r3, [pc, #608]	; (8005788 <_ftoa+0x310>)
 8005526:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005528:	f002 0204 	and.w	r2, r2, #4
 800552c:	2a00      	cmp	r2, #0
 800552e:	d001      	beq.n	8005534 <_ftoa+0xbc>
 8005530:	2204      	movs	r2, #4
 8005532:	e000      	b.n	8005536 <_ftoa+0xbe>
 8005534:	2203      	movs	r2, #3
 8005536:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005538:	9103      	str	r1, [sp, #12]
 800553a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800553c:	9102      	str	r1, [sp, #8]
 800553e:	9201      	str	r2, [sp, #4]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	6939      	ldr	r1, [r7, #16]
 8005548:	6978      	ldr	r0, [r7, #20]
 800554a:	f7ff fd90 	bl	800506e <_out_rev>
 800554e:	4603      	mov	r3, r0
 8005550:	e1f4      	b.n	800593c <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8005552:	a385      	add	r3, pc, #532	; (adr r3, 8005768 <_ftoa+0x2f0>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800555c:	f7fb faac 	bl	8000ab8 <__aeabi_dcmpgt>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <_ftoa+0x102>
 8005566:	a382      	add	r3, pc, #520	; (adr r3, 8005770 <_ftoa+0x2f8>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005570:	f7fb fa84 	bl	8000a7c <__aeabi_dcmplt>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800557a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	ed97 0b00 	vldr	d0, [r7]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	6939      	ldr	r1, [r7, #16]
 8005590:	6978      	ldr	r0, [r7, #20]
 8005592:	f000 f9dd 	bl	8005950 <_etoa>
 8005596:	4603      	mov	r3, r0
 8005598:	e1d0      	b.n	800593c <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ac:	f7fb fa66 	bl	8000a7c <__aeabi_dcmplt>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <_ftoa+0x15c>
    negative = true;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80055bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	f7fa fe2e 	bl	8000228 <__aeabi_dsub>
 80055cc:	4603      	mov	r3, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80055d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10e      	bne.n	80055fc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80055de:	2306      	movs	r3, #6
 80055e0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055e2:	e00b      	b.n	80055fc <_ftoa+0x184>
    buf[len++] = '0';
 80055e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055ee:	4413      	add	r3, r2
 80055f0:	2230      	movs	r2, #48	; 0x30
 80055f2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80055f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f8:	3b01      	subs	r3, #1
 80055fa:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80055fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fe:	2b1f      	cmp	r3, #31
 8005600:	d802      	bhi.n	8005608 <_ftoa+0x190>
 8005602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005604:	2b09      	cmp	r3, #9
 8005606:	d8ed      	bhi.n	80055e4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560c:	f7fb fa74 	bl	8000af8 <__aeabi_d2iz>
 8005610:	4603      	mov	r3, r0
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8005614:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005616:	f7fa ff55 	bl	80004c4 <__aeabi_i2d>
 800561a:	4603      	mov	r3, r0
 800561c:	460c      	mov	r4, r1
 800561e:	461a      	mov	r2, r3
 8005620:	4623      	mov	r3, r4
 8005622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005626:	f7fa fdff 	bl	8000228 <__aeabi_dsub>
 800562a:	4603      	mov	r3, r0
 800562c:	460c      	mov	r4, r1
 800562e:	4618      	mov	r0, r3
 8005630:	4621      	mov	r1, r4
 8005632:	4a56      	ldr	r2, [pc, #344]	; (800578c <_ftoa+0x314>)
 8005634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800563e:	461a      	mov	r2, r3
 8005640:	4623      	mov	r3, r4
 8005642:	f7fa ffa9 	bl	8000598 <__aeabi_dmul>
 8005646:	4603      	mov	r3, r0
 8005648:	460c      	mov	r4, r1
 800564a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800564e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005652:	f7fb fa79 	bl	8000b48 <__aeabi_d2uiz>
 8005656:	4603      	mov	r3, r0
 8005658:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800565a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800565c:	f7fa ff22 	bl	80004a4 <__aeabi_ui2d>
 8005660:	4603      	mov	r3, r0
 8005662:	460c      	mov	r4, r1
 8005664:	461a      	mov	r2, r3
 8005666:	4623      	mov	r3, r4
 8005668:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800566c:	f7fa fddc 	bl	8000228 <__aeabi_dsub>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <_ftoa+0x318>)
 800567e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005682:	f7fb fa19 	bl	8000ab8 <__aeabi_dcmpgt>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d018      	beq.n	80056be <_ftoa+0x246>
    ++frac;
 800568c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568e:	3301      	adds	r3, #1
 8005690:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8005692:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005694:	f7fa ff06 	bl	80004a4 <__aeabi_ui2d>
 8005698:	4a3c      	ldr	r2, [pc, #240]	; (800578c <_ftoa+0x314>)
 800569a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056a4:	461a      	mov	r2, r3
 80056a6:	4623      	mov	r3, r4
 80056a8:	f7fb f9fc 	bl	8000aa4 <__aeabi_dcmpge>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01a      	beq.n	80056e8 <_ftoa+0x270>
      frac = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80056b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b8:	3301      	adds	r3, #1
 80056ba:	657b      	str	r3, [r7, #84]	; 0x54
 80056bc:	e014      	b.n	80056e8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	4b33      	ldr	r3, [pc, #204]	; (8005790 <_ftoa+0x318>)
 80056c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80056c8:	f7fb f9d8 	bl	8000a7c <__aeabi_dcmplt>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <_ftoa+0x26a>
 80056d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80056e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e4:	3301      	adds	r3, #1
 80056e6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80056e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d136      	bne.n	800575c <_ftoa+0x2e4>
    diff = value - (double)whole;
 80056ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056f0:	f7fa fee8 	bl	80004c4 <__aeabi_i2d>
 80056f4:	4603      	mov	r3, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	461a      	mov	r2, r3
 80056fa:	4623      	mov	r3, r4
 80056fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005700:	f7fa fd92 	bl	8000228 <__aeabi_dsub>
 8005704:	4603      	mov	r3, r0
 8005706:	460c      	mov	r4, r1
 8005708:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800570c:	2301      	movs	r3, #1
 800570e:	461c      	mov	r4, r3
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <_ftoa+0x318>)
 8005716:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800571a:	f7fb f9af 	bl	8000a7c <__aeabi_dcmplt>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <_ftoa+0x2b0>
 8005724:	2300      	movs	r3, #0
 8005726:	461c      	mov	r4, r3
 8005728:	b2e3      	uxtb	r3, r4
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <_ftoa+0x2d0>
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <_ftoa+0x318>)
 800573a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800573e:	f7fb f9bb 	bl	8000ab8 <__aeabi_dcmpgt>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d069      	beq.n	800581c <_ftoa+0x3a4>
 8005748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8087 	beq.w	8005862 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8005754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005756:	3301      	adds	r3, #1
 8005758:	657b      	str	r3, [r7, #84]	; 0x54
 800575a:	e082      	b.n	8005862 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800575c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005760:	e039      	b.n	80057d6 <_ftoa+0x35e>
 8005762:	bf00      	nop
 8005764:	f3af 8000 	nop.w
 8005768:	00000000 	.word	0x00000000
 800576c:	41cdcd65 	.word	0x41cdcd65
 8005770:	00000000 	.word	0x00000000
 8005774:	c1cdcd65 	.word	0xc1cdcd65
 8005778:	0800a8e0 	.word	0x0800a8e0
 800577c:	0800a8e4 	.word	0x0800a8e4
 8005780:	7fefffff 	.word	0x7fefffff
 8005784:	0800a8ec 	.word	0x0800a8ec
 8005788:	0800a8f4 	.word	0x0800a8f4
 800578c:	0800ae58 	.word	0x0800ae58
 8005790:	3fe00000 	.word	0x3fe00000
      --count;
 8005794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005796:	3b01      	subs	r3, #1
 8005798:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800579a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800579c:	4b69      	ldr	r3, [pc, #420]	; (8005944 <_ftoa+0x4cc>)
 800579e:	fba3 2301 	umull	r2, r3, r3, r1
 80057a2:	08da      	lsrs	r2, r3, #3
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	1aca      	subs	r2, r1, r3
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80057b6:	3230      	adds	r2, #48	; 0x30
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80057be:	440b      	add	r3, r1
 80057c0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	4a5f      	ldr	r2, [pc, #380]	; (8005944 <_ftoa+0x4cc>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
 80057d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d8:	2b1f      	cmp	r3, #31
 80057da:	d9db      	bls.n	8005794 <_ftoa+0x31c>
 80057dc:	e00a      	b.n	80057f4 <_ftoa+0x37c>
        break;
 80057de:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057e0:	e008      	b.n	80057f4 <_ftoa+0x37c>
      buf[len++] = '0';
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80057ec:	4413      	add	r3, r2
 80057ee:	2230      	movs	r2, #48	; 0x30
 80057f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f6:	2b1f      	cmp	r3, #31
 80057f8:	d804      	bhi.n	8005804 <_ftoa+0x38c>
 80057fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1ee      	bne.n	80057e2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005806:	2b1f      	cmp	r3, #31
 8005808:	d82b      	bhi.n	8005862 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800580a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005810:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005814:	4413      	add	r3, r2
 8005816:	222e      	movs	r2, #46	; 0x2e
 8005818:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800581c:	e021      	b.n	8005862 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800581e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005820:	4b49      	ldr	r3, [pc, #292]	; (8005948 <_ftoa+0x4d0>)
 8005822:	fb83 1302 	smull	r1, r3, r3, r2
 8005826:	1099      	asrs	r1, r3, #2
 8005828:	17d3      	asrs	r3, r2, #31
 800582a:	1ac9      	subs	r1, r1, r3
 800582c:	460b      	mov	r3, r1
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	1ad1      	subs	r1, r2, r3
 8005836:	b2ca      	uxtb	r2, r1
 8005838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583a:	1c59      	adds	r1, r3, #1
 800583c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800583e:	3230      	adds	r2, #48	; 0x30
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005846:	440b      	add	r3, r1
 8005848:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800584c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800584e:	4a3e      	ldr	r2, [pc, #248]	; (8005948 <_ftoa+0x4d0>)
 8005850:	fb82 1203 	smull	r1, r2, r2, r3
 8005854:	1092      	asrs	r2, r2, #2
 8005856:	17db      	asrs	r3, r3, #31
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
 800585c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005864:	2b1f      	cmp	r3, #31
 8005866:	d9da      	bls.n	800581e <_ftoa+0x3a6>
 8005868:	e000      	b.n	800586c <_ftoa+0x3f4>
      break;
 800586a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800586c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d124      	bne.n	80058c0 <_ftoa+0x448>
 8005876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01f      	beq.n	80058c0 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005882:	2b00      	cmp	r3, #0
 8005884:	d015      	beq.n	80058b2 <_ftoa+0x43a>
 8005886:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <_ftoa+0x420>
 800588e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <_ftoa+0x43a>
      width--;
 8005898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589a:	3b01      	subs	r3, #1
 800589c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800589e:	e008      	b.n	80058b2 <_ftoa+0x43a>
      buf[len++] = '0';
 80058a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058aa:	4413      	add	r3, r2
 80058ac:	2230      	movs	r2, #48	; 0x30
 80058ae:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80058b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d202      	bcs.n	80058c0 <_ftoa+0x448>
 80058ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058bc:	2b1f      	cmp	r3, #31
 80058be:	d9ef      	bls.n	80058a0 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80058c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c2:	2b1f      	cmp	r3, #31
 80058c4:	d82a      	bhi.n	800591c <_ftoa+0x4a4>
    if (negative) {
 80058c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <_ftoa+0x46a>
      buf[len++] = '-';
 80058ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058d8:	4413      	add	r3, r2
 80058da:	222d      	movs	r2, #45	; 0x2d
 80058dc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80058e0:	e01c      	b.n	800591c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80058e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80058ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058f6:	4413      	add	r3, r2
 80058f8:	222b      	movs	r2, #43	; 0x2b
 80058fa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80058fe:	e00d      	b.n	800591c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <_ftoa+0x4a4>
      buf[len++] = ' ';
 800590a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005910:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005914:	4413      	add	r3, r2
 8005916:	2220      	movs	r2, #32
 8005918:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800591c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591e:	9303      	str	r3, [sp, #12]
 8005920:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005922:	9302      	str	r3, [sp, #8]
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	f107 0318 	add.w	r3, r7, #24
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f7ff fb9a 	bl	800506e <_out_rev>
 800593a:	4603      	mov	r3, r0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3764      	adds	r7, #100	; 0x64
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}
 8005944:	cccccccd 	.word	0xcccccccd
 8005948:	66666667 	.word	0x66666667
 800594c:	00000000 	.word	0x00000000

08005950 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	b09d      	sub	sp, #116	; 0x74
 8005956:	af06      	add	r7, sp, #24
 8005958:	61f8      	str	r0, [r7, #28]
 800595a:	61b9      	str	r1, [r7, #24]
 800595c:	617a      	str	r2, [r7, #20]
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800596c:	f7fb f87c 	bl	8000a68 <__aeabi_dcmpeq>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d014      	beq.n	80059a0 <_etoa+0x50>
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	4bc9      	ldr	r3, [pc, #804]	; (8005ca0 <_etoa+0x350>)
 800597c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005980:	f7fb f89a 	bl	8000ab8 <__aeabi_dcmpgt>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <_etoa+0x50>
 800598a:	f04f 32ff 	mov.w	r2, #4294967295
 800598e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005996:	f7fb f871 	bl	8000a7c <__aeabi_dcmplt>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d012      	beq.n	80059c6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80059a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059a4:	9302      	str	r3, [sp, #8]
 80059a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	69b9      	ldr	r1, [r7, #24]
 80059bc:	69f8      	ldr	r0, [r7, #28]
 80059be:	f7ff fd5b 	bl	8005478 <_ftoa>
 80059c2:	4603      	mov	r3, r0
 80059c4:	e24f      	b.n	8005e66 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 80059c6:	2301      	movs	r3, #1
 80059c8:	461c      	mov	r4, r3
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059d6:	f7fb f851 	bl	8000a7c <__aeabi_dcmplt>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <_etoa+0x94>
 80059e0:	2300      	movs	r3, #0
 80059e2:	461c      	mov	r4, r3
 80059e4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80059e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <_etoa+0xac>
    value = -value;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80059fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005a08:	2306      	movs	r3, #6
 8005a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8005a0e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005a12:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005a16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	0d13      	lsrs	r3, r2, #20
 8005a24:	2400      	movs	r4, #0
 8005a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005a30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005a34:	f04f 31ff 	mov.w	r1, #4294967295
 8005a38:	4a9a      	ldr	r2, [pc, #616]	; (8005ca4 <_etoa+0x354>)
 8005a3a:	ea03 0801 	and.w	r8, r3, r1
 8005a3e:	ea04 0902 	and.w	r9, r4, r2
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	4a98      	ldr	r2, [pc, #608]	; (8005ca8 <_etoa+0x358>)
 8005a48:	ea48 0301 	orr.w	r3, r8, r1
 8005a4c:	ea49 0402 	orr.w	r4, r9, r2
 8005a50:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005a54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005a56:	f7fa fd35 	bl	80004c4 <__aeabi_i2d>
 8005a5a:	a385      	add	r3, pc, #532	; (adr r3, 8005c70 <_etoa+0x320>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fd9a 	bl	8000598 <__aeabi_dmul>
 8005a64:	4603      	mov	r3, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	a382      	add	r3, pc, #520	; (adr r3, 8005c78 <_etoa+0x328>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f7fa fbdb 	bl	800022c <__adddf3>
 8005a76:	4603      	mov	r3, r0
 8005a78:	460c      	mov	r4, r1
 8005a7a:	4698      	mov	r8, r3
 8005a7c:	46a1      	mov	r9, r4
 8005a7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	4b89      	ldr	r3, [pc, #548]	; (8005cac <_etoa+0x35c>)
 8005a88:	f7fa fbce 	bl	8000228 <__aeabi_dsub>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	4618      	mov	r0, r3
 8005a92:	4621      	mov	r1, r4
 8005a94:	a37a      	add	r3, pc, #488	; (adr r3, 8005c80 <_etoa+0x330>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa fd7d 	bl	8000598 <__aeabi_dmul>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4623      	mov	r3, r4
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7fa fbbf 	bl	800022c <__adddf3>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f7fb f81f 	bl	8000af8 <__aeabi_d2iz>
 8005aba:	4603      	mov	r3, r0
 8005abc:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005abe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ac0:	f7fa fd00 	bl	80004c4 <__aeabi_i2d>
 8005ac4:	a370      	add	r3, pc, #448	; (adr r3, 8005c88 <_etoa+0x338>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fd65 	bl	8000598 <__aeabi_dmul>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	4b75      	ldr	r3, [pc, #468]	; (8005cb0 <_etoa+0x360>)
 8005adc:	f7fa fba6 	bl	800022c <__adddf3>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	f7fb f806 	bl	8000af8 <__aeabi_d2iz>
 8005aec:	4603      	mov	r3, r0
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8005af0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005af2:	f7fa fce7 	bl	80004c4 <__aeabi_i2d>
 8005af6:	a366      	add	r3, pc, #408	; (adr r3, 8005c90 <_etoa+0x340>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fd4c 	bl	8000598 <__aeabi_dmul>
 8005b00:	4603      	mov	r3, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4698      	mov	r8, r3
 8005b06:	46a1      	mov	r9, r4
 8005b08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b0a:	f7fa fcdb 	bl	80004c4 <__aeabi_i2d>
 8005b0e:	a362      	add	r3, pc, #392	; (adr r3, 8005c98 <_etoa+0x348>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd40 	bl	8000598 <__aeabi_dmul>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa fb80 	bl	8000228 <__aeabi_dsub>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8005b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b34:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b38:	f7fa fd2e 	bl	8000598 <__aeabi_dmul>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b46:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	050c      	lsls	r4, r1, #20
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	f7fa fb5e 	bl	800022c <__adddf3>
 8005b70:	4603      	mov	r3, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	469a      	mov	sl, r3
 8005b76:	46a3      	mov	fp, r4
 8005b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b7c:	f04f 0000 	mov.w	r0, #0
 8005b80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b84:	f7fa fb50 	bl	8000228 <__aeabi_dsub>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	e9c7 3400 	strd	r3, r4, [r7]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <_etoa+0x364>)
 8005b96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b9a:	f7fa fe27 	bl	80007ec <__aeabi_ddiv>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <_etoa+0x368>)
 8005bac:	f7fa fb3e 	bl	800022c <__adddf3>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005bbc:	f7fa fe16 	bl	80007ec <__aeabi_ddiv>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <_etoa+0x36c>)
 8005bce:	f7fa fb2d 	bl	800022c <__adddf3>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4623      	mov	r3, r4
 8005bda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005bde:	f7fa fe05 	bl	80007ec <__aeabi_ddiv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	461a      	mov	r2, r3
 8005be8:	4623      	mov	r3, r4
 8005bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bee:	f7fa fb1d 	bl	800022c <__adddf3>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	4650      	mov	r0, sl
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	f7fa fdf5 	bl	80007ec <__aeabi_ddiv>
 8005c02:	4603      	mov	r3, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	4618      	mov	r0, r3
 8005c08:	4621      	mov	r1, r4
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <_etoa+0x358>)
 8005c10:	f7fa fb0c 	bl	800022c <__adddf3>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa fcba 	bl	8000598 <__aeabi_dmul>
 8005c24:	4603      	mov	r3, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8005c2c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005c30:	461a      	mov	r2, r3
 8005c32:	4623      	mov	r3, r4
 8005c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c38:	f7fa ff20 	bl	8000a7c <__aeabi_dcmplt>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <_etoa+0x30e>
    expval--;
 8005c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c44:	3b01      	subs	r3, #1
 8005c46:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8005c48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <_etoa+0x368>)
 8005c52:	f7fa fdcb 	bl	80007ec <__aeabi_ddiv>
 8005c56:	4603      	mov	r3, r0
 8005c58:	460c      	mov	r4, r1
 8005c5a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8005c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c60:	2b63      	cmp	r3, #99	; 0x63
 8005c62:	dc2d      	bgt.n	8005cc0 <_etoa+0x370>
 8005c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c66:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005c6a:	db29      	blt.n	8005cc0 <_etoa+0x370>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	e028      	b.n	8005cc2 <_etoa+0x372>
 8005c70:	509f79fb 	.word	0x509f79fb
 8005c74:	3fd34413 	.word	0x3fd34413
 8005c78:	8b60c8b3 	.word	0x8b60c8b3
 8005c7c:	3fc68a28 	.word	0x3fc68a28
 8005c80:	636f4361 	.word	0x636f4361
 8005c84:	3fd287a7 	.word	0x3fd287a7
 8005c88:	0979a371 	.word	0x0979a371
 8005c8c:	400a934f 	.word	0x400a934f
 8005c90:	bbb55516 	.word	0xbbb55516
 8005c94:	40026bb1 	.word	0x40026bb1
 8005c98:	fefa39ef 	.word	0xfefa39ef
 8005c9c:	3fe62e42 	.word	0x3fe62e42
 8005ca0:	7fefffff 	.word	0x7fefffff
 8005ca4:	000fffff 	.word	0x000fffff
 8005ca8:	3ff00000 	.word	0x3ff00000
 8005cac:	3ff80000 	.word	0x3ff80000
 8005cb0:	3fe00000 	.word	0x3fe00000
 8005cb4:	402c0000 	.word	0x402c0000
 8005cb8:	40240000 	.word	0x40240000
 8005cbc:	40180000 	.word	0x40180000
 8005cc0:	2305      	movs	r3, #5
 8005cc2:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03d      	beq.n	8005d4c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005cd0:	a367      	add	r3, pc, #412	; (adr r3, 8005e70 <_etoa+0x520>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cda:	f7fa fee3 	bl	8000aa4 <__aeabi_dcmpge>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d024      	beq.n	8005d2e <_etoa+0x3de>
 8005ce4:	a364      	add	r3, pc, #400	; (adr r3, 8005e78 <_etoa+0x528>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cee:	f7fa fec5 	bl	8000a7c <__aeabi_dcmplt>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <_etoa+0x3de>
      if ((int)prec > expval) {
 8005cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	da07      	bge.n	8005d12 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 8005d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d10:	e002      	b.n	8005d18 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d2c:	e00e      	b.n	8005d4c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8005d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <_etoa+0x3fc>
 8005d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <_etoa+0x3fc>
        --prec;
 8005d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d46:	3b01      	subs	r3, #1
 8005d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8005d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8005d52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d904      	bls.n	8005d66 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8005d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	e001      	b.n	8005d6a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8005d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <_etoa+0x430>
 8005d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <_etoa+0x44e>
    value /= conv.F;
 8005d86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d92:	f7fa fd2b 	bl	80007ec <__aeabi_ddiv>
 8005d96:	4603      	mov	r3, r0
 8005d98:	460c      	mov	r4, r1
 8005d9a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005da2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <_etoa+0x464>
 8005daa:	68bd      	ldr	r5, [r7, #8]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005db2:	e001      	b.n	8005db8 <_etoa+0x468>
 8005db4:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8005db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc0:	9302      	str	r3, [sp, #8]
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	ec46 5b10 	vmov	d0, r5, r6
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	69f8      	ldr	r0, [r7, #28]
 8005dd8:	f7ff fb4e 	bl	8005478 <_ftoa>
 8005ddc:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d03f      	beq.n	8005e64 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005de4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <_etoa+0x4a4>
 8005df0:	2045      	movs	r0, #69	; 0x45
 8005df2:	e000      	b.n	8005df6 <_etoa+0x4a6>
 8005df4:	2065      	movs	r0, #101	; 0x65
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	1c53      	adds	r3, r2, #1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	69fc      	ldr	r4, [r7, #28]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfb8      	it	lt
 8005e0a:	425b      	neglt	r3, r3
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e10:	0fdb      	lsrs	r3, r3, #31
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e16:	3a01      	subs	r2, #1
 8005e18:	2105      	movs	r1, #5
 8005e1a:	9105      	str	r1, [sp, #20]
 8005e1c:	9204      	str	r2, [sp, #16]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	9203      	str	r2, [sp, #12]
 8005e22:	220a      	movs	r2, #10
 8005e24:	9202      	str	r2, [sp, #8]
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	9000      	str	r0, [sp, #0]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	69f8      	ldr	r0, [r7, #28]
 8005e32:	f7ff fa48 	bl	80052c6 <_ntoa_long>
 8005e36:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005e44:	e007      	b.n	8005e56 <_etoa+0x506>
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	1c53      	adds	r3, r2, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	69fc      	ldr	r4, [r7, #28]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	69b9      	ldr	r1, [r7, #24]
 8005e52:	2020      	movs	r0, #32
 8005e54:	47a0      	blx	r4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d8f0      	bhi.n	8005e46 <_etoa+0x4f6>
    }
  }
  return idx;
 8005e64:	697b      	ldr	r3, [r7, #20]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	375c      	adds	r7, #92	; 0x5c
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	eb1c432d 	.word	0xeb1c432d
 8005e74:	3f1a36e2 	.word	0x3f1a36e2
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	412e8480 	.word	0x412e8480

08005e80 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b0a0      	sub	sp, #128	; 0x80
 8005e84:	af0a      	add	r7, sp, #40	; 0x28
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 8492 	bne.w	80067be <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 8005e9a:	4ba0      	ldr	r3, [pc, #640]	; (800611c <_vsnprintf+0x29c>)
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8005e9e:	f000 bc8e 	b.w	80067be <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b25      	cmp	r3, #37	; 0x25
 8005ea8:	d00d      	beq.n	8005ec6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	7818      	ldrb	r0, [r3, #0]
 8005eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb0:	1c53      	adds	r3, r2, #1
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb4:	68fc      	ldr	r4, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	47a0      	blx	r4
      format++;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	603b      	str	r3, [r7, #0]
      continue;
 8005ec2:	f000 bc7c 	b.w	80067be <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	3b20      	subs	r3, #32
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d856      	bhi.n	8005f88 <_vsnprintf+0x108>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <_vsnprintf+0x60>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f61 	.word	0x08005f61
 8005ee4:	08005f89 	.word	0x08005f89
 8005ee8:	08005f89 	.word	0x08005f89
 8005eec:	08005f75 	.word	0x08005f75
 8005ef0:	08005f89 	.word	0x08005f89
 8005ef4:	08005f89 	.word	0x08005f89
 8005ef8:	08005f89 	.word	0x08005f89
 8005efc:	08005f89 	.word	0x08005f89
 8005f00:	08005f89 	.word	0x08005f89
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	08005f89 	.word	0x08005f89
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f89 	.word	0x08005f89
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f89 	.word	0x08005f89
 8005f1c:	08005f89 	.word	0x08005f89
 8005f20:	08005f25 	.word	0x08005f25
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	603b      	str	r3, [r7, #0]
 8005f32:	2301      	movs	r3, #1
 8005f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f36:	e02a      	b.n	8005f8e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f3a:	f043 0302 	orr.w	r3, r3, #2
 8005f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	3301      	adds	r3, #1
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	2301      	movs	r3, #1
 8005f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4a:	e020      	b.n	8005f8e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f5e:	e016      	b.n	8005f8e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f62:	f043 0308 	orr.w	r3, r3, #8
 8005f66:	657b      	str	r3, [r7, #84]	; 0x54
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f72:	e00c      	b.n	8005f8e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	f043 0310 	orr.w	r3, r3, #16
 8005f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	2301      	movs	r3, #1
 8005f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f86:	e002      	b.n	8005f8e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8c:	bf00      	nop
      }
    } while (n);
 8005f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d19d      	bne.n	8005ed0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff f82b 	bl	8004ff8 <_is_digit>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <_vsnprintf+0x134>
      width = _atoi(&format);
 8005fa8:	463b      	mov	r3, r7
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff f83b 	bl	8005026 <_atoi>
 8005fb0:	6538      	str	r0, [r7, #80]	; 0x50
 8005fb2:	e018      	b.n	8005fe6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fba:	d114      	bne.n	8005fe6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da07      	bge.n	8005fdc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	f043 0302 	orr.w	r3, r3, #2
 8005fd2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	425b      	negs	r3, r3
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8005fda:	e001      	b.n	8005fe0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff0:	d124      	bne.n	800603c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fff7 	bl	8004ff8 <_is_digit>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8006010:	463b      	mov	r3, r7
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f807 	bl	8005026 <_atoi>
 8006018:	64f8      	str	r0, [r7, #76]	; 0x4c
 800601a:	e00f      	b.n	800603c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b2a      	cmp	r3, #42	; 0x2a
 8006022:	d10b      	bne.n	800603c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8006024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	66ba      	str	r2, [r7, #104]	; 0x68
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	3b68      	subs	r3, #104	; 0x68
 8006042:	2b12      	cmp	r3, #18
 8006044:	d866      	bhi.n	8006114 <_vsnprintf+0x294>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <_vsnprintf+0x1cc>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	080060bf 	.word	0x080060bf
 8006050:	08006115 	.word	0x08006115
 8006054:	080060f5 	.word	0x080060f5
 8006058:	08006115 	.word	0x08006115
 800605c:	08006099 	.word	0x08006099
 8006060:	08006115 	.word	0x08006115
 8006064:	08006115 	.word	0x08006115
 8006068:	08006115 	.word	0x08006115
 800606c:	08006115 	.word	0x08006115
 8006070:	08006115 	.word	0x08006115
 8006074:	08006115 	.word	0x08006115
 8006078:	08006115 	.word	0x08006115
 800607c:	080060e5 	.word	0x080060e5
 8006080:	08006115 	.word	0x08006115
 8006084:	08006115 	.word	0x08006115
 8006088:	08006115 	.word	0x08006115
 800608c:	08006115 	.word	0x08006115
 8006090:	08006115 	.word	0x08006115
 8006094:	08006105 	.word	0x08006105
      case 'l' :
        flags |= FLAGS_LONG;
 8006098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b6c      	cmp	r3, #108	; 0x6c
 80060ac:	d134      	bne.n	8006118 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	603b      	str	r3, [r7, #0]
        }
        break;
 80060bc:	e02c      	b.n	8006118 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 80060be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b68      	cmp	r3, #104	; 0x68
 80060d2:	d125      	bne.n	8006120 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 80060d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060da:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	3301      	adds	r3, #1
 80060e0:	603b      	str	r3, [r7, #0]
        }
        break;
 80060e2:	e01d      	b.n	8006120 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	603b      	str	r3, [r7, #0]
        break;
 80060f2:	e016      	b.n	8006122 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80060f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060fa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	603b      	str	r3, [r7, #0]
        break;
 8006102:	e00e      	b.n	8006122 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	603b      	str	r3, [r7, #0]
        break;
 8006112:	e006      	b.n	8006122 <_vsnprintf+0x2a2>
      default :
        break;
 8006114:	bf00      	nop
 8006116:	e004      	b.n	8006122 <_vsnprintf+0x2a2>
        break;
 8006118:	bf00      	nop
 800611a:	e002      	b.n	8006122 <_vsnprintf+0x2a2>
 800611c:	08004fa3 	.word	0x08004fa3
        break;
 8006120:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	3b25      	subs	r3, #37	; 0x25
 8006128:	2b53      	cmp	r3, #83	; 0x53
 800612a:	f200 833b 	bhi.w	80067a4 <_vsnprintf+0x924>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <_vsnprintf+0x2b4>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	0800678d 	.word	0x0800678d
 8006138:	080067a5 	.word	0x080067a5
 800613c:	080067a5 	.word	0x080067a5
 8006140:	080067a5 	.word	0x080067a5
 8006144:	080067a5 	.word	0x080067a5
 8006148:	080067a5 	.word	0x080067a5
 800614c:	080067a5 	.word	0x080067a5
 8006150:	080067a5 	.word	0x080067a5
 8006154:	080067a5 	.word	0x080067a5
 8006158:	080067a5 	.word	0x080067a5
 800615c:	080067a5 	.word	0x080067a5
 8006160:	080067a5 	.word	0x080067a5
 8006164:	080067a5 	.word	0x080067a5
 8006168:	080067a5 	.word	0x080067a5
 800616c:	080067a5 	.word	0x080067a5
 8006170:	080067a5 	.word	0x080067a5
 8006174:	080067a5 	.word	0x080067a5
 8006178:	080067a5 	.word	0x080067a5
 800617c:	080067a5 	.word	0x080067a5
 8006180:	080067a5 	.word	0x080067a5
 8006184:	080067a5 	.word	0x080067a5
 8006188:	080067a5 	.word	0x080067a5
 800618c:	080067a5 	.word	0x080067a5
 8006190:	080067a5 	.word	0x080067a5
 8006194:	080067a5 	.word	0x080067a5
 8006198:	080067a5 	.word	0x080067a5
 800619c:	080067a5 	.word	0x080067a5
 80061a0:	080067a5 	.word	0x080067a5
 80061a4:	080067a5 	.word	0x080067a5
 80061a8:	080067a5 	.word	0x080067a5
 80061ac:	080067a5 	.word	0x080067a5
 80061b0:	080067a5 	.word	0x080067a5
 80061b4:	0800655d 	.word	0x0800655d
 80061b8:	08006511 	.word	0x08006511
 80061bc:	0800655d 	.word	0x0800655d
 80061c0:	080067a5 	.word	0x080067a5
 80061c4:	080067a5 	.word	0x080067a5
 80061c8:	080067a5 	.word	0x080067a5
 80061cc:	080067a5 	.word	0x080067a5
 80061d0:	080067a5 	.word	0x080067a5
 80061d4:	080067a5 	.word	0x080067a5
 80061d8:	080067a5 	.word	0x080067a5
 80061dc:	080067a5 	.word	0x080067a5
 80061e0:	080067a5 	.word	0x080067a5
 80061e4:	080067a5 	.word	0x080067a5
 80061e8:	080067a5 	.word	0x080067a5
 80061ec:	080067a5 	.word	0x080067a5
 80061f0:	080067a5 	.word	0x080067a5
 80061f4:	080067a5 	.word	0x080067a5
 80061f8:	080067a5 	.word	0x080067a5
 80061fc:	080067a5 	.word	0x080067a5
 8006200:	08006285 	.word	0x08006285
 8006204:	080067a5 	.word	0x080067a5
 8006208:	080067a5 	.word	0x080067a5
 800620c:	080067a5 	.word	0x080067a5
 8006210:	080067a5 	.word	0x080067a5
 8006214:	080067a5 	.word	0x080067a5
 8006218:	080067a5 	.word	0x080067a5
 800621c:	080067a5 	.word	0x080067a5
 8006220:	080067a5 	.word	0x080067a5
 8006224:	080067a5 	.word	0x080067a5
 8006228:	08006285 	.word	0x08006285
 800622c:	080065c9 	.word	0x080065c9
 8006230:	08006285 	.word	0x08006285
 8006234:	0800655d 	.word	0x0800655d
 8006238:	08006511 	.word	0x08006511
 800623c:	0800655d 	.word	0x0800655d
 8006240:	080067a5 	.word	0x080067a5
 8006244:	08006285 	.word	0x08006285
 8006248:	080067a5 	.word	0x080067a5
 800624c:	080067a5 	.word	0x080067a5
 8006250:	080067a5 	.word	0x080067a5
 8006254:	080067a5 	.word	0x080067a5
 8006258:	080067a5 	.word	0x080067a5
 800625c:	08006285 	.word	0x08006285
 8006260:	08006701 	.word	0x08006701
 8006264:	080067a5 	.word	0x080067a5
 8006268:	080067a5 	.word	0x080067a5
 800626c:	0800663d 	.word	0x0800663d
 8006270:	080067a5 	.word	0x080067a5
 8006274:	08006285 	.word	0x08006285
 8006278:	080067a5 	.word	0x080067a5
 800627c:	080067a5 	.word	0x080067a5
 8006280:	08006285 	.word	0x08006285
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b78      	cmp	r3, #120	; 0x78
 800628a:	d003      	beq.n	8006294 <_vsnprintf+0x414>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b58      	cmp	r3, #88	; 0x58
 8006292:	d102      	bne.n	800629a <_vsnprintf+0x41a>
          base = 16U;
 8006294:	2310      	movs	r3, #16
 8006296:	643b      	str	r3, [r7, #64]	; 0x40
 8006298:	e013      	b.n	80062c2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b6f      	cmp	r3, #111	; 0x6f
 80062a0:	d102      	bne.n	80062a8 <_vsnprintf+0x428>
          base =  8U;
 80062a2:	2308      	movs	r3, #8
 80062a4:	643b      	str	r3, [r7, #64]	; 0x40
 80062a6:	e00c      	b.n	80062c2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b62      	cmp	r3, #98	; 0x62
 80062ae:	d102      	bne.n	80062b6 <_vsnprintf+0x436>
          base =  2U;
 80062b0:	2302      	movs	r3, #2
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
 80062b4:	e005      	b.n	80062c2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 80062b6:	230a      	movs	r3, #10
 80062b8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80062ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062bc:	f023 0310 	bic.w	r3, r3, #16
 80062c0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b58      	cmp	r3, #88	; 0x58
 80062c8:	d103      	bne.n	80062d2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 80062ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b69      	cmp	r3, #105	; 0x69
 80062d8:	d007      	beq.n	80062ea <_vsnprintf+0x46a>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d003      	beq.n	80062ea <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80062e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e4:	f023 030c 	bic.w	r3, r3, #12
 80062e8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80062ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80062f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b69      	cmp	r3, #105	; 0x69
 8006302:	d004      	beq.n	800630e <_vsnprintf+0x48e>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b64      	cmp	r3, #100	; 0x64
 800630a:	f040 808d 	bne.w	8006428 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006314:	2b00      	cmp	r3, #0
 8006316:	d02e      	beq.n	8006376 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8006318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631a:	3307      	adds	r3, #7
 800631c:	f023 0307 	bic.w	r3, r3, #7
 8006320:	f103 0208 	add.w	r2, r3, #8
 8006324:	66ba      	str	r2, [r7, #104]	; 0x68
 8006326:	e9d3 3400 	ldrd	r3, r4, [r3]
 800632a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800632e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f174 0200 	sbcs.w	r2, r4, #0
 8006338:	da02      	bge.n	8006340 <_vsnprintf+0x4c0>
 800633a:	425b      	negs	r3, r3
 800633c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8006340:	4619      	mov	r1, r3
 8006342:	4622      	mov	r2, r4
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	0fdb      	lsrs	r3, r3, #31
 8006348:	b2d8      	uxtb	r0, r3
 800634a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634c:	f04f 0400 	mov.w	r4, #0
 8006350:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8006352:	9508      	str	r5, [sp, #32]
 8006354:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006356:	9507      	str	r5, [sp, #28]
 8006358:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800635a:	9506      	str	r5, [sp, #24]
 800635c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006360:	9002      	str	r0, [sp, #8]
 8006362:	e9cd 1200 	strd	r1, r2, [sp]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff f811 	bl	8005394 <_ntoa_long_long>
 8006372:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8006374:	e0c8      	b.n	8006508 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01e      	beq.n	80063be <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8006380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	66ba      	str	r2, [r7, #104]	; 0x68
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfb8      	it	lt
 8006390:	425b      	neglt	r3, r3
 8006392:	4619      	mov	r1, r3
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	0fdb      	lsrs	r3, r3, #31
 8006398:	b2db      	uxtb	r3, r3
 800639a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800639c:	9205      	str	r2, [sp, #20]
 800639e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063a0:	9204      	str	r2, [sp, #16]
 80063a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063a8:	9202      	str	r2, [sp, #8]
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	9100      	str	r1, [sp, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7fe ff86 	bl	80052c6 <_ntoa_long>
 80063ba:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80063bc:	e0a4      	b.n	8006508 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80063be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <_vsnprintf+0x554>
 80063c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	66ba      	str	r2, [r7, #104]	; 0x68
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e00e      	b.n	80063f2 <_vsnprintf+0x572>
 80063d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <_vsnprintf+0x56a>
 80063de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b21b      	sxth	r3, r3
 80063e8:	e003      	b.n	80063f2 <_vsnprintf+0x572>
 80063ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	425b      	neglt	r3, r3
 80063fc:	4619      	mov	r1, r3
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	0fdb      	lsrs	r3, r3, #31
 8006402:	b2db      	uxtb	r3, r3
 8006404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006406:	9205      	str	r2, [sp, #20]
 8006408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800640a:	9204      	str	r2, [sp, #16]
 800640c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640e:	9203      	str	r2, [sp, #12]
 8006410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006412:	9202      	str	r2, [sp, #8]
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	9100      	str	r1, [sp, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7fe ff51 	bl	80052c6 <_ntoa_long>
 8006424:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8006426:	e06f      	b.n	8006508 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8006428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8006432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006434:	3307      	adds	r3, #7
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	f103 0208 	add.w	r2, r3, #8
 800643e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006440:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006446:	4611      	mov	r1, r2
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800644e:	9008      	str	r0, [sp, #32]
 8006450:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006452:	9007      	str	r0, [sp, #28]
 8006454:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006456:	9006      	str	r0, [sp, #24]
 8006458:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800645c:	2200      	movs	r2, #0
 800645e:	9202      	str	r2, [sp, #8]
 8006460:	e9cd 3400 	strd	r3, r4, [sp]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7fe ff92 	bl	8005394 <_ntoa_long_long>
 8006470:	6478      	str	r0, [r7, #68]	; 0x44
 8006472:	e049      	b.n	8006508 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8006474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800647e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	66ba      	str	r2, [r7, #104]	; 0x68
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006488:	9205      	str	r2, [sp, #20]
 800648a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800648c:	9204      	str	r2, [sp, #16]
 800648e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006490:	9203      	str	r2, [sp, #12]
 8006492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7fe ff0f 	bl	80052c6 <_ntoa_long>
 80064a8:	6478      	str	r0, [r7, #68]	; 0x44
 80064aa:	e02d      	b.n	8006508 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80064ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <_vsnprintf+0x642>
 80064b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	66ba      	str	r2, [r7, #104]	; 0x68
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	e00e      	b.n	80064e0 <_vsnprintf+0x660>
 80064c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <_vsnprintf+0x658>
 80064cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	e003      	b.n	80064e0 <_vsnprintf+0x660>
 80064d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	66ba      	str	r2, [r7, #104]	; 0x68
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80064e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ec:	9303      	str	r3, [sp, #12]
 80064ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	2300      	movs	r3, #0
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7fe fee0 	bl	80052c6 <_ntoa_long>
 8006506:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	603b      	str	r3, [r7, #0]
        break;
 800650e:	e156      	b.n	80067be <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b46      	cmp	r3, #70	; 0x46
 8006516:	d103      	bne.n	8006520 <_vsnprintf+0x6a0>
 8006518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006522:	3307      	adds	r3, #7
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	f103 0208 	add.w	r2, r3, #8
 800652c:	66ba      	str	r2, [r7, #104]	; 0x68
 800652e:	ed93 7b00 	vldr	d7, [r3]
 8006532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	eeb0 0a47 	vmov.f32	s0, s14
 8006542:	eef0 0a67 	vmov.f32	s1, s15
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7fe ff93 	bl	8005478 <_ftoa>
 8006552:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	603b      	str	r3, [r7, #0]
        break;
 800655a:	e130      	b.n	80067be <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b67      	cmp	r3, #103	; 0x67
 8006562:	d003      	beq.n	800656c <_vsnprintf+0x6ec>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b47      	cmp	r3, #71	; 0x47
 800656a:	d103      	bne.n	8006574 <_vsnprintf+0x6f4>
 800656c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006572:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b45      	cmp	r3, #69	; 0x45
 800657a:	d003      	beq.n	8006584 <_vsnprintf+0x704>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b47      	cmp	r3, #71	; 0x47
 8006582:	d103      	bne.n	800658c <_vsnprintf+0x70c>
 8006584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006586:	f043 0320 	orr.w	r3, r3, #32
 800658a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800658c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	f103 0208 	add.w	r2, r3, #8
 8006598:	66ba      	str	r2, [r7, #104]	; 0x68
 800659a:	ed93 7b00 	vldr	d7, [r3]
 800659e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a0:	9302      	str	r3, [sp, #8]
 80065a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	eeb0 0a47 	vmov.f32	s0, s14
 80065ae:	eef0 0a67 	vmov.f32	s1, s15
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff f9c9 	bl	8005950 <_etoa>
 80065be:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	603b      	str	r3, [r7, #0]
        break;
 80065c6:	e0fa      	b.n	80067be <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80065c8:	2301      	movs	r3, #1
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80065cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10e      	bne.n	80065f4 <_vsnprintf+0x774>
          while (l++ < width) {
 80065d6:	e007      	b.n	80065e8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 80065d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065da:	1c53      	adds	r3, r2, #1
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
 80065de:	68fc      	ldr	r4, [r7, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	2020      	movs	r0, #32
 80065e6:	47a0      	blx	r4
          while (l++ < width) {
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d8f1      	bhi.n	80065d8 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80065f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b2d8      	uxtb	r0, r3
 80065fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006600:	1c53      	adds	r3, r2, #1
 8006602:	647b      	str	r3, [r7, #68]	; 0x44
 8006604:	68fc      	ldr	r4, [r7, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800660c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00e      	beq.n	8006634 <_vsnprintf+0x7b4>
          while (l++ < width) {
 8006616:	e007      	b.n	8006628 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8006618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661a:	1c53      	adds	r3, r2, #1
 800661c:	647b      	str	r3, [r7, #68]	; 0x44
 800661e:	68fc      	ldr	r4, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	2020      	movs	r0, #32
 8006626:	47a0      	blx	r4
          while (l++ < width) {
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800662e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006630:	429a      	cmp	r2, r3
 8006632:	d8f1      	bhi.n	8006618 <_vsnprintf+0x798>
          }
        }
        format++;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	603b      	str	r3, [r7, #0]
        break;
 800663a:	e0c0      	b.n	80067be <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	66ba      	str	r2, [r7, #104]	; 0x68
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8006646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <_vsnprintf+0x7d0>
 800664c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664e:	e001      	b.n	8006654 <_vsnprintf+0x7d4>
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	4619      	mov	r1, r3
 8006656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006658:	f7fe fcb1 	bl	8004fbe <_strnlen_s>
 800665c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800665e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8006668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800666a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666c:	4293      	cmp	r3, r2
 800666e:	bf28      	it	cs
 8006670:	4613      	movcs	r3, r2
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8006674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11a      	bne.n	80066b4 <_vsnprintf+0x834>
          while (l++ < width) {
 800667e:	e007      	b.n	8006690 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006682:	1c53      	adds	r3, r2, #1
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	68fc      	ldr	r4, [r7, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	2020      	movs	r0, #32
 800668e:	47a0      	blx	r4
          while (l++ < width) {
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	637a      	str	r2, [r7, #52]	; 0x34
 8006696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006698:	429a      	cmp	r2, r3
 800669a:	d8f1      	bhi.n	8006680 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800669c:	e00a      	b.n	80066b4 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80066a4:	7818      	ldrb	r0, [r3, #0]
 80066a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a8:	1c53      	adds	r3, r2, #1
 80066aa:	647b      	str	r3, [r7, #68]	; 0x44
 80066ac:	68fc      	ldr	r4, [r7, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <_vsnprintf+0x850>
 80066bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0eb      	beq.n	800669e <_vsnprintf+0x81e>
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e6      	bne.n	800669e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80066d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <_vsnprintf+0x878>
          while (l++ < width) {
 80066da:	e007      	b.n	80066ec <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 80066dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066de:	1c53      	adds	r3, r2, #1
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
 80066e2:	68fc      	ldr	r4, [r7, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	2020      	movs	r0, #32
 80066ea:	47a0      	blx	r4
          while (l++ < width) {
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	637a      	str	r2, [r7, #52]	; 0x34
 80066f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d8f1      	bhi.n	80066dc <_vsnprintf+0x85c>
          }
        }
        format++;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	603b      	str	r3, [r7, #0]
        break;
 80066fe:	e05e      	b.n	80067be <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006700:	2308      	movs	r3, #8
 8006702:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006706:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800670a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800670c:	2300      	movs	r3, #0
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8006712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01d      	beq.n	8006756 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800671a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800671c:	1d1a      	adds	r2, r3, #4
 800671e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f04f 0400 	mov.w	r4, #0
 8006726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006728:	9208      	str	r2, [sp, #32]
 800672a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800672c:	9207      	str	r2, [sp, #28]
 800672e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006730:	9206      	str	r2, [sp, #24]
 8006732:	f04f 0110 	mov.w	r1, #16
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800673e:	2200      	movs	r2, #0
 8006740:	9202      	str	r2, [sp, #8]
 8006742:	e9cd 3400 	strd	r3, r4, [sp]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7fe fe21 	bl	8005394 <_ntoa_long_long>
 8006752:	6478      	str	r0, [r7, #68]	; 0x44
 8006754:	e016      	b.n	8006784 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	66ba      	str	r2, [r7, #104]	; 0x68
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006762:	9305      	str	r3, [sp, #20]
 8006764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	2310      	movs	r3, #16
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	2300      	movs	r3, #0
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	9200      	str	r2, [sp, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7fe fda2 	bl	80052c6 <_ntoa_long>
 8006782:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	603b      	str	r3, [r7, #0]
        break;
 800678a:	e018      	b.n	80067be <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800678c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800678e:	1c53      	adds	r3, r2, #1
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
 8006792:	68fc      	ldr	r4, [r7, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	2025      	movs	r0, #37	; 0x25
 800679a:	47a0      	blx	r4
        format++;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	603b      	str	r3, [r7, #0]
        break;
 80067a2:	e00c      	b.n	80067be <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	7818      	ldrb	r0, [r3, #0]
 80067a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067aa:	1c53      	adds	r3, r2, #1
 80067ac:	647b      	str	r3, [r7, #68]	; 0x44
 80067ae:	68fc      	ldr	r4, [r7, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	47a0      	blx	r4
        format++;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	603b      	str	r3, [r7, #0]
        break;
 80067bc:	bf00      	nop
  while (*format)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f47f ab6d 	bne.w	8005ea2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80067c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d302      	bcc.n	80067d6 <_vsnprintf+0x956>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	e000      	b.n	80067d8 <_vsnprintf+0x958>
 80067d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d8:	68fc      	ldr	r4, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	2000      	movs	r0, #0
 80067e0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80067e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3758      	adds	r7, #88	; 0x58
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bdb0      	pop	{r4, r5, r7, pc}

080067ec <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	4803      	ldr	r0, [pc, #12]	; (8006814 <vsnprintf_+0x28>)
 8006806:	f7ff fb3b 	bl	8005e80 <_vsnprintf>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	08004f75 	.word	0x08004f75

08006818 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800682a:	2b84      	cmp	r3, #132	; 0x84
 800682c:	d005      	beq.n	800683a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800682e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	3303      	adds	r3, #3
 8006838:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800683a:	68fb      	ldr	r3, [r7, #12]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684e:	f3ef 8305 	mrs	r3, IPSR
 8006852:	607b      	str	r3, [r7, #4]
  return(result);
 8006854:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf14      	ite	ne
 800685a:	2301      	movne	r3, #1
 800685c:	2300      	moveq	r3, #0
 800685e:	b2db      	uxtb	r3, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006870:	f001 f96c 	bl	8007b4c <vTaskStartScheduler>
  
  return osOK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	bd80      	pop	{r7, pc}

0800687a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800687a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687c:	b089      	sub	sp, #36	; 0x24
 800687e:	af04      	add	r7, sp, #16
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d020      	beq.n	80068ce <osThreadCreate+0x54>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01c      	beq.n	80068ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685c      	ldr	r4, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681d      	ldr	r5, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691e      	ldr	r6, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff ffb6 	bl	8006818 <makeFreeRtosPriority>
 80068ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068b6:	9202      	str	r2, [sp, #8]
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	9100      	str	r1, [sp, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	4632      	mov	r2, r6
 80068c0:	4629      	mov	r1, r5
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 ff87 	bl	80077d6 <xTaskCreateStatic>
 80068c8:	4603      	mov	r3, r0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	e01c      	b.n	8006908 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685c      	ldr	r4, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068da:	b29e      	uxth	r6, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ff98 	bl	8006818 <makeFreeRtosPriority>
 80068e8:	4602      	mov	r2, r0
 80068ea:	f107 030c 	add.w	r3, r7, #12
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	9200      	str	r2, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	4632      	mov	r2, r6
 80068f6:	4629      	mov	r1, r5
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 ffc5 	bl	8007888 <xTaskCreate>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006908:	68fb      	ldr	r3, [r7, #12]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006912 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <osDelay+0x16>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e000      	b.n	800692a <osDelay+0x18>
 8006928:	2301      	movs	r3, #1
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f8da 	bl	8007ae4 <vTaskDelay>
  
  return osOK;
 8006930:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	3303      	adds	r3, #3
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800694e:	2014      	movs	r0, #20
 8006950:	f002 f846 	bl	80089e0 <pvPortMalloc>
 8006954:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d046      	beq.n	80069ea <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f002 f833 	bl	80089e0 <pvPortMalloc>
 800697a:	4602      	mov	r2, r0
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02b      	beq.n	80069e0 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	4618      	mov	r0, r3
 8006994:	f002 f824 	bl	80089e0 <pvPortMalloc>
 8006998:	4602      	mov	r2, r0
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d011      	beq.n	80069ca <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e008      	b.n	80069be <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4413      	add	r3, r2
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	3301      	adds	r3, #1
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d3f1      	bcc.n	80069ac <osPoolCreate+0x72>
 80069c8:	e00f      	b.n	80069ea <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f002 f8c8 	bl	8008b64 <vPortFree>
        vPortFree(thePool);
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	f002 f8c5 	bl	8008b64 <vPortFree>
        thePool = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	e004      	b.n	80069ea <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f002 f8bf 	bl	8008b64 <vPortFree>
      thePool = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80069ea:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8006a04:	f7ff ff20 	bl	8006848 <inHandlerMode>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00e      	beq.n	8006a2c <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	617a      	str	r2, [r7, #20]
 8006a24:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a26:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	e001      	b.n	8006a30 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8006a2c:	f001 febe 	bl	80087ac <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e029      	b.n	8006a8a <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d301      	bcc.n	8006a4e <osPoolAlloc+0x5a>
      index = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	4413      	add	r3, r2
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d113      	bne.n	8006a84 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	4413      	add	r3, r2
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	440b      	add	r3, r1
 8006a7a:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	611a      	str	r2, [r3, #16]
      break;
 8006a82:	e007      	b.n	8006a94 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d3d0      	bcc.n	8006a36 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8006a94:	f7ff fed8 	bl	8006848 <inHandlerMode>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	e001      	b.n	8006aae <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8006aaa:	f001 fead 	bl	8008808 <vPortExitCritical>
  }
  
  return p;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689c      	ldr	r4, [r3, #8]
 8006ad6:	200c      	movs	r0, #12
 8006ad8:	f001 ff82 	bl	80089e0 <pvPortMalloc>
 8006adc:	4603      	mov	r3, r0
 8006ade:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <osMailCreate+0x36>
    return NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e038      	b.n	8006b60 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	2104      	movs	r1, #4
 8006b06:	f000 fa13 	bl	8006f30 <xQueueGenericCreate>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f002 f81f 	bl	8008b64 <vPortFree>
    return NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e01a      	b.n	8006b60 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	681c      	ldr	r4, [r3, #0]
 8006b30:	f107 030c 	add.w	r3, r7, #12
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ff00 	bl	800693a <osPoolCreate>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f002 f807 	bl	8008b64 <vPortFree>
    return NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e002      	b.n	8006b60 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd90      	pop	{r4, r7, pc}

08006b68 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <osMailAlloc+0x14>
    return NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e006      	b.n	8006b8a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ff37 	bl	80069f4 <osPoolAlloc>
 8006b86:	60f8      	str	r0, [r7, #12]
  
  return p;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <osMailPut+0x14>
    return osErrorParameter;
 8006ba4:	2380      	movs	r3, #128	; 0x80
 8006ba6:	e02c      	b.n	8006c02 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8006bac:	f7ff fe4c 	bl	8006848 <inHandlerMode>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6858      	ldr	r0, [r3, #4]
 8006bba:	f107 020c 	add.w	r2, r7, #12
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f000 fb0b 	bl	80071dc <xQueueGenericSendFromISR>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d001      	beq.n	8006bd0 <osMailPut+0x3c>
      return osErrorOS;
 8006bcc:	23ff      	movs	r3, #255	; 0xff
 8006bce:	e018      	b.n	8006c02 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <osMailPut+0x6c>
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <osMailPut+0x78>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	e00b      	b.n	8006c00 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6858      	ldr	r0, [r3, #4]
 8006bec:	4639      	mov	r1, r7
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f000 f9f9 	bl	8006fe8 <xQueueGenericSend>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d001      	beq.n	8006c00 <osMailPut+0x6c>
      return osErrorOS;
 8006bfc:	23ff      	movs	r3, #255	; 0xff
 8006bfe:	e000      	b.n	8006c02 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b08b      	sub	sp, #44	; 0x2c
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	617b      	str	r3, [r7, #20]
    return event;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	f107 0314 	add.w	r3, r7, #20
 8006c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c3a:	e056      	b.n	8006cea <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d103      	bne.n	8006c54 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e009      	b.n	8006c68 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <osMailGet+0x58>
      ticks = 1;
 8006c64:	2301      	movs	r3, #1
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006c68:	f7ff fdee 	bl	8006848 <inHandlerMode>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01d      	beq.n	8006cae <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6858      	ldr	r0, [r3, #4]
 8006c76:	f107 0220 	add.w	r2, r7, #32
 8006c7a:	f107 0314 	add.w	r3, r7, #20
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	f000 fc1b 	bl	80074bc <xQueueReceiveFromISR>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d102      	bne.n	8006c92 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	e001      	b.n	8006c96 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01e      	beq.n	8006cda <osMailGet+0xca>
 8006c9c:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <osMailGet+0xe4>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	e015      	b.n	8006cda <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6858      	ldr	r0, [r3, #4]
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f000 fb22 	bl	8007304 <xQueueReceive>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d102      	bne.n	8006ccc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8006cc6:	2320      	movs	r3, #32
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e006      	b.n	8006cda <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <osMailGet+0xc6>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e000      	b.n	8006cd8 <osMailGet+0xc8>
 8006cd6:	2340      	movs	r3, #64	; 0x40
 8006cd8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	461c      	mov	r4, r3
 8006cde:	f107 0314 	add.w	r3, r7, #20
 8006ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	372c      	adds	r7, #44	; 0x2c
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd90      	pop	{r4, r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f103 0208 	add.w	r2, r3, #8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f103 0208 	add.w	r2, r3, #8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0208 	add.w	r2, r3, #8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d103      	bne.n	8006dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e00c      	b.n	8006dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e002      	b.n	8006dc8 <vListInsert+0x2e>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d2f6      	bcs.n	8006dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	601a      	str	r2, [r3, #0]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6892      	ldr	r2, [r2, #8]
 8006e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6852      	ldr	r2, [r2, #4]
 8006e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d103      	bne.n	8006e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	1e5a      	subs	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <xQueueGenericReset+0x28>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	e7fe      	b.n	8006e86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006e88:	f001 fc90 	bl	80087ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d114      	bne.n	8006f08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01a      	beq.n	8006f1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3310      	adds	r3, #16
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f870 	bl	8007fd0 <xTaskRemoveFromEventList>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d012      	beq.n	8006f1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <xQueueGenericReset+0xcc>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	e009      	b.n	8006f1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3310      	adds	r3, #16
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fef3 	bl	8006cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3324      	adds	r3, #36	; 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff feee 	bl	8006cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f1c:	f001 fc74 	bl	8008808 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <xQueueGenericCreate+0x28>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	e7fe      	b.n	8006f56 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	e004      	b.n	8006f6e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3348      	adds	r3, #72	; 0x48
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fd34 	bl	80089e0 <pvPortMalloc>
 8006f78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00f      	beq.n	8006fa0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3348      	adds	r3, #72	; 0x48
 8006f84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f8e:	79fa      	ldrb	r2, [r7, #7]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 f805 	bl	8006faa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3720      	adds	r7, #32
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d103      	bne.n	8006fc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e002      	b.n	8006fcc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fd8:	2101      	movs	r1, #1
 8006fda:	69b8      	ldr	r0, [r7, #24]
 8006fdc:	f7ff ff40 	bl	8006e60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	; 0x38
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <xQueueGenericSend+0x30>
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
 8007016:	e7fe      	b.n	8007016 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <xQueueGenericSend+0x3e>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <xQueueGenericSend+0x42>
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <xQueueGenericSend+0x44>
 800702a:	2300      	movs	r3, #0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <xQueueGenericSend+0x5c>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	e7fe      	b.n	8007042 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <xQueueGenericSend+0x6a>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <xQueueGenericSend+0x6e>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericSend+0x70>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xQueueGenericSend+0x88>
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e7fe      	b.n	800706e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007070:	f001 f96a 	bl	8008348 <xTaskGetSchedulerState>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <xQueueGenericSend+0x98>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <xQueueGenericSend+0x9c>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <xQueueGenericSend+0x9e>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <xQueueGenericSend+0xb6>
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e7fe      	b.n	800709c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800709e:	f001 fb85 	bl	80087ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <xQueueGenericSend+0xcc>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d129      	bne.n	8007108 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ba:	f000 fa7c 	bl	80075b6 <prvCopyDataToQueue>
 80070be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 ff7f 	bl	8007fd0 <xTaskRemoveFromEventList>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d013      	beq.n	8007100 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070d8:	4b3f      	ldr	r3, [pc, #252]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	e00a      	b.n	8007100 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070f0:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80070f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007100:	f001 fb82 	bl	8008808 <vPortExitCritical>
				return pdPASS;
 8007104:	2301      	movs	r3, #1
 8007106:	e063      	b.n	80071d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800710e:	f001 fb7b 	bl	8008808 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007112:	2300      	movs	r3, #0
 8007114:	e05c      	b.n	80071d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	4618      	mov	r0, r3
 8007122:	f000 ffb7 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007126:	2301      	movs	r3, #1
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800712a:	f001 fb6d 	bl	8008808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800712e:	f000 fd6b 	bl	8007c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007132:	f001 fb3b 	bl	80087ac <vPortEnterCritical>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713c:	b25b      	sxtb	r3, r3
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d103      	bne.n	800714c <xQueueGenericSend+0x164>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007152:	b25b      	sxtb	r3, r3
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d103      	bne.n	8007162 <xQueueGenericSend+0x17a>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007162:	f001 fb51 	bl	8008808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007166:	1d3a      	adds	r2, r7, #4
 8007168:	f107 0314 	add.w	r3, r7, #20
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 ffa6 	bl	80080c0 <xTaskCheckForTimeOut>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d124      	bne.n	80071c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800717a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800717c:	f000 fb13 	bl	80077a6 <prvIsQueueFull>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d018      	beq.n	80071b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	3310      	adds	r3, #16
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fefa 	bl	8007f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007196:	f000 fa9e 	bl	80076d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800719a:	f000 fd43 	bl	8007c24 <xTaskResumeAll>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af7c 	bne.w	800709e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	e772      	b.n	800709e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ba:	f000 fa8c 	bl	80076d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071be:	f000 fd31 	bl	8007c24 <xTaskResumeAll>
 80071c2:	e76c      	b.n	800709e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c6:	f000 fa86 	bl	80076d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ca:	f000 fd2b 	bl	8007c24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071ce:	2300      	movs	r3, #0
		}
	}
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3738      	adds	r7, #56	; 0x38
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <xQueueGenericSendFromISR+0x2c>
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	e7fe      	b.n	8007206 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <xQueueGenericSendFromISR+0x3a>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <xQueueGenericSendFromISR+0x3e>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <xQueueGenericSendFromISR+0x40>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <xQueueGenericSendFromISR+0x58>
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	e7fe      	b.n	8007232 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d103      	bne.n	8007242 <xQueueGenericSendFromISR+0x66>
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <xQueueGenericSendFromISR+0x6a>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <xQueueGenericSendFromISR+0x6c>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <xQueueGenericSendFromISR+0x84>
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e7fe      	b.n	800725e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007260:	f001 fb80 	bl	8008964 <vPortValidateInterruptPriority>
	__asm volatile
 8007264:	f3ef 8211 	mrs	r2, BASEPRI
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	61ba      	str	r2, [r7, #24]
 800727a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800727c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <xQueueGenericSendFromISR+0xb6>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d12c      	bne.n	80072ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a2:	f000 f988 	bl	80075b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d112      	bne.n	80072d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d016      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	3324      	adds	r3, #36	; 0x24
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fe87 	bl	8007fd0 <xTaskRemoveFromEventList>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00e      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e007      	b.n	80072e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072da:	3301      	adds	r3, #1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	b25a      	sxtb	r2, r3
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072e6:	2301      	movs	r3, #1
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80072ea:	e001      	b.n	80072f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3738      	adds	r7, #56	; 0x38
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08c      	sub	sp, #48	; 0x30
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007310:	2300      	movs	r3, #0
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <xQueueReceive+0x2e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	623b      	str	r3, [r7, #32]
 8007330:	e7fe      	b.n	8007330 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d103      	bne.n	8007340 <xQueueReceive+0x3c>
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <xQueueReceive+0x40>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <xQueueReceive+0x42>
 8007344:	2300      	movs	r3, #0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <xQueueReceive+0x5a>
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e7fe      	b.n	800735c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800735e:	f000 fff3 	bl	8008348 <xTaskGetSchedulerState>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <xQueueReceive+0x6a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <xQueueReceive+0x6e>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueReceive+0x70>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <xQueueReceive+0x88>
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e7fe      	b.n	800738a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800738c:	f001 fa0e 	bl	80087ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01f      	beq.n	80073dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a0:	f000 f973 	bl	800768a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00f      	beq.n	80073d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	3310      	adds	r3, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fe09 	bl	8007fd0 <xTaskRemoveFromEventList>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073c4:	4b3c      	ldr	r3, [pc, #240]	; (80074b8 <xQueueReceive+0x1b4>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073d4:	f001 fa18 	bl	8008808 <vPortExitCritical>
				return pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	e069      	b.n	80074b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e2:	f001 fa11 	bl	8008808 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e062      	b.n	80074b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fe4d 	bl	8008094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073fe:	f001 fa03 	bl	8008808 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007402:	f000 fc01 	bl	8007c08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007406:	f001 f9d1 	bl	80087ac <vPortEnterCritical>
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007410:	b25b      	sxtb	r3, r3
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d103      	bne.n	8007420 <xQueueReceive+0x11c>
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d103      	bne.n	8007436 <xQueueReceive+0x132>
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007436:	f001 f9e7 	bl	8008808 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800743a:	1d3a      	adds	r2, r7, #4
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fe3c 	bl	80080c0 <xTaskCheckForTimeOut>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d123      	bne.n	8007496 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800744e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007450:	f000 f993 	bl	800777a <prvIsQueueEmpty>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d017      	beq.n	800748a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	3324      	adds	r3, #36	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fd90 	bl	8007f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746a:	f000 f934 	bl	80076d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800746e:	f000 fbd9 	bl	8007c24 <xTaskResumeAll>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d189      	bne.n	800738c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <xQueueReceive+0x1b4>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	e780      	b.n	800738c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800748a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748c:	f000 f923 	bl	80076d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007490:	f000 fbc8 	bl	8007c24 <xTaskResumeAll>
 8007494:	e77a      	b.n	800738c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007498:	f000 f91d 	bl	80076d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800749c:	f000 fbc2 	bl	8007c24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a2:	f000 f96a 	bl	800777a <prvIsQueueEmpty>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f43f af6f 	beq.w	800738c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	; 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <xQueueReceiveFromISR+0x2a>
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	623b      	str	r3, [r7, #32]
 80074e4:	e7fe      	b.n	80074e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <xQueueReceiveFromISR+0x38>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <xQueueReceiveFromISR+0x3c>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <xQueueReceiveFromISR+0x3e>
 80074f8:	2300      	movs	r3, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <xQueueReceiveFromISR+0x56>
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	e7fe      	b.n	8007510 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007512:	f001 fa27 	bl	8008964 <vPortValidateInterruptPriority>
	__asm volatile
 8007516:	f3ef 8211 	mrs	r2, BASEPRI
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	61ba      	str	r2, [r7, #24]
 800752c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800752e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d02f      	beq.n	800759e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800754c:	f000 f89d 	bl	800768a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	1e5a      	subs	r2, r3, #1
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d112      	bne.n	8007588 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	3310      	adds	r3, #16
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fd2e 	bl	8007fd0 <xTaskRemoveFromEventList>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e007      	b.n	8007598 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758c:	3301      	adds	r3, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	b25a      	sxtb	r2, r3
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007598:	2301      	movs	r3, #1
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
 800759c:	e001      	b.n	80075a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800759e:	2300      	movs	r3, #0
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3738      	adds	r7, #56	; 0x38
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10d      	bne.n	80075f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d14d      	bne.n	8007678 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fecf 	bl	8008384 <xTaskPriorityDisinherit>
 80075e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	e043      	b.n	8007678 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d119      	bne.n	800762a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6898      	ldr	r0, [r3, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	461a      	mov	r2, r3
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	f001 fc01 	bl	8008e08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	441a      	add	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d32b      	bcc.n	8007678 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	e026      	b.n	8007678 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68d8      	ldr	r0, [r3, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	461a      	mov	r2, r3
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	f001 fbe7 	bl	8008e08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	425b      	negs	r3, r3
 8007644:	441a      	add	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d207      	bcs.n	8007666 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	425b      	negs	r3, r3
 8007660:	441a      	add	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d105      	bne.n	8007678 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007680:	697b      	ldr	r3, [r7, #20]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d018      	beq.n	80076ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d303      	bcc.n	80076be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68d9      	ldr	r1, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	461a      	mov	r2, r3
 80076c8:	6838      	ldr	r0, [r7, #0]
 80076ca:	f001 fb9d 	bl	8008e08 <memcpy>
	}
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076de:	f001 f865 	bl	80087ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ea:	e011      	b.n	8007710 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3324      	adds	r3, #36	; 0x24
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fc69 	bl	8007fd0 <xTaskRemoveFromEventList>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007704:	f000 fd3c 	bl	8008180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	3b01      	subs	r3, #1
 800770c:	b2db      	uxtb	r3, r3
 800770e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dce9      	bgt.n	80076ec <prvUnlockQueue+0x16>
 8007718:	e000      	b.n	800771c <prvUnlockQueue+0x46>
					break;
 800771a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007724:	f001 f870 	bl	8008808 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007728:	f001 f840 	bl	80087ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007732:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007734:	e011      	b.n	800775a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d012      	beq.n	8007764 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3310      	adds	r3, #16
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fc44 	bl	8007fd0 <xTaskRemoveFromEventList>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800774e:	f000 fd17 	bl	8008180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	3b01      	subs	r3, #1
 8007756:	b2db      	uxtb	r3, r3
 8007758:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dce9      	bgt.n	8007736 <prvUnlockQueue+0x60>
 8007762:	e000      	b.n	8007766 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007764:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	22ff      	movs	r2, #255	; 0xff
 800776a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800776e:	f001 f84b 	bl	8008808 <vPortExitCritical>
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007782:	f001 f813 	bl	80087ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	e001      	b.n	8007798 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007798:	f001 f836 	bl	8008808 <vPortExitCritical>

	return xReturn;
 800779c:	68fb      	ldr	r3, [r7, #12]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077ae:	f000 fffd 	bl	80087ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d102      	bne.n	80077c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077be:	2301      	movs	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e001      	b.n	80077c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077c8:	f001 f81e 	bl	8008808 <vPortExitCritical>

	return xReturn;
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b08e      	sub	sp, #56	; 0x38
 80077da:	af04      	add	r7, sp, #16
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <xTaskCreateStatic+0x28>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	e7fe      	b.n	80077fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <xTaskCreateStatic+0x42>
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	e7fe      	b.n	8007816 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007818:	2354      	movs	r3, #84	; 0x54
 800781a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	2b54      	cmp	r3, #84	; 0x54
 8007820:	d009      	beq.n	8007836 <xTaskCreateStatic+0x60>
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	e7fe      	b.n	8007834 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01e      	beq.n	800787a <xTaskCreateStatic+0xa4>
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01b      	beq.n	800787a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800784a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2202      	movs	r2, #2
 8007850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007854:	2300      	movs	r3, #0
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	f107 0314 	add.w	r3, r7, #20
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f850 	bl	8007912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007874:	f000 f8cc 	bl	8007a10 <prvAddNewTaskToReadyList>
 8007878:	e001      	b.n	800787e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800787e:	697b      	ldr	r3, [r7, #20]
	}
 8007880:	4618      	mov	r0, r3
 8007882:	3728      	adds	r7, #40	; 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08c      	sub	sp, #48	; 0x30
 800788c:	af04      	add	r7, sp, #16
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f89f 	bl	80089e0 <pvPortMalloc>
 80078a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00e      	beq.n	80078c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80078aa:	2054      	movs	r0, #84	; 0x54
 80078ac:	f001 f898 	bl	80089e0 <pvPortMalloc>
 80078b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
 80078be:	e005      	b.n	80078cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f001 f94f 	bl	8008b64 <vPortFree>
 80078c6:	e001      	b.n	80078cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d017      	beq.n	8007902 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	9302      	str	r3, [sp, #8]
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f80e 	bl	8007912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078f6:	69f8      	ldr	r0, [r7, #28]
 80078f8:	f000 f88a 	bl	8007a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078fc:	2301      	movs	r3, #1
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	e002      	b.n	8007908 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007902:	f04f 33ff 	mov.w	r3, #4294967295
 8007906:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007908:	69bb      	ldr	r3, [r7, #24]
	}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b088      	sub	sp, #32
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800792a:	3b01      	subs	r3, #1
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <prvInitialiseNewTask+0x46>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	e7fe      	b.n	8007956 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	e012      	b.n	8007984 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	7819      	ldrb	r1, [r3, #0]
 8007966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	3334      	adds	r3, #52	; 0x34
 800796e:	460a      	mov	r2, r1
 8007970:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	3301      	adds	r3, #1
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d9e9      	bls.n	800795e <prvInitialiseNewTask+0x4c>
 800798a:	e000      	b.n	800798e <prvInitialiseNewTask+0x7c>
		{
			break;
 800798c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	2b06      	cmp	r3, #6
 800799a:	d901      	bls.n	80079a0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800799c:	2306      	movs	r3, #6
 800799e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	2200      	movs	r2, #0
 80079b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f9be 	bl	8006d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff f9b9 	bl	8006d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	f1c3 0207 	rsb	r2, r3, #7
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	2200      	movs	r2, #0
 80079e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	68f9      	ldr	r1, [r7, #12]
 80079ee:	69b8      	ldr	r0, [r7, #24]
 80079f0:	f000 fdb2 	bl	8008558 <pxPortInitialiseStack>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a06:	bf00      	nop
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a18:	f000 fec8 	bl	80087ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a1c:	4b2a      	ldr	r3, [pc, #168]	; (8007ac8 <prvAddNewTaskToReadyList+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3301      	adds	r3, #1
 8007a22:	4a29      	ldr	r2, [pc, #164]	; (8007ac8 <prvAddNewTaskToReadyList+0xb8>)
 8007a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a26:	4b29      	ldr	r3, [pc, #164]	; (8007acc <prvAddNewTaskToReadyList+0xbc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a2e:	4a27      	ldr	r2, [pc, #156]	; (8007acc <prvAddNewTaskToReadyList+0xbc>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <prvAddNewTaskToReadyList+0xb8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d110      	bne.n	8007a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a3c:	f000 fbc4 	bl	80081c8 <prvInitialiseTaskLists>
 8007a40:	e00d      	b.n	8007a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a42:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <prvAddNewTaskToReadyList+0xc0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <prvAddNewTaskToReadyList+0xbc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d802      	bhi.n	8007a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a58:	4a1c      	ldr	r2, [pc, #112]	; (8007acc <prvAddNewTaskToReadyList+0xbc>)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <prvAddNewTaskToReadyList+0xc4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <prvAddNewTaskToReadyList+0xc4>)
 8007a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	409a      	lsls	r2, r3
 8007a70:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <prvAddNewTaskToReadyList+0xc8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	4a18      	ldr	r2, [pc, #96]	; (8007ad8 <prvAddNewTaskToReadyList+0xc8>)
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4a15      	ldr	r2, [pc, #84]	; (8007adc <prvAddNewTaskToReadyList+0xcc>)
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7ff f95e 	bl	8006d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a96:	f000 feb7 	bl	8008808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <prvAddNewTaskToReadyList+0xc0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <prvAddNewTaskToReadyList+0xbc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d207      	bcs.n	8007ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <prvAddNewTaskToReadyList+0xd0>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000670 	.word	0x20000670
 8007acc:	20000570 	.word	0x20000570
 8007ad0:	2000067c 	.word	0x2000067c
 8007ad4:	2000068c 	.word	0x2000068c
 8007ad8:	20000678 	.word	0x20000678
 8007adc:	20000574 	.word	0x20000574
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <vTaskDelay+0x60>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <vTaskDelay+0x2e>
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	60bb      	str	r3, [r7, #8]
 8007b10:	e7fe      	b.n	8007b10 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007b12:	f000 f879 	bl	8007c08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fcb7 	bl	800848c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b1e:	f000 f881 	bl	8007c24 <xTaskResumeAll>
 8007b22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <vTaskDelay+0x64>)
 8007b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000698 	.word	0x20000698
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b5a:	463a      	mov	r2, r7
 8007b5c:	1d39      	adds	r1, r7, #4
 8007b5e:	f107 0308 	add.w	r3, r7, #8
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f9 f990 	bl	8000e88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	9202      	str	r2, [sp, #8]
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	2300      	movs	r3, #0
 8007b78:	460a      	mov	r2, r1
 8007b7a:	491d      	ldr	r1, [pc, #116]	; (8007bf0 <vTaskStartScheduler+0xa4>)
 8007b7c:	481d      	ldr	r0, [pc, #116]	; (8007bf4 <vTaskStartScheduler+0xa8>)
 8007b7e:	f7ff fe2a 	bl	80077d6 <xTaskCreateStatic>
 8007b82:	4602      	mov	r2, r0
 8007b84:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <vTaskStartScheduler+0xac>)
 8007b86:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b88:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <vTaskStartScheduler+0xac>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e001      	b.n	8007b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d115      	bne.n	8007bcc <vTaskStartScheduler+0x80>
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <vTaskStartScheduler+0xb0>)
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bba:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <vTaskStartScheduler+0xb4>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007bc0:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <vTaskStartScheduler+0xb8>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bc6:	f000 fd53 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007bca:	e00d      	b.n	8007be8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	d109      	bne.n	8007be8 <vTaskStartScheduler+0x9c>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e7fe      	b.n	8007be6 <vTaskStartScheduler+0x9a>
}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	0800a8f8 	.word	0x0800a8f8
 8007bf4:	08008199 	.word	0x08008199
 8007bf8:	20000694 	.word	0x20000694
 8007bfc:	20000690 	.word	0x20000690
 8007c00:	2000067c 	.word	0x2000067c
 8007c04:	20000674 	.word	0x20000674

08007c08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vTaskSuspendAll+0x18>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a03      	ldr	r2, [pc, #12]	; (8007c20 <vTaskSuspendAll+0x18>)
 8007c14:	6013      	str	r3, [r2, #0]
}
 8007c16:	bf00      	nop
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000698 	.word	0x20000698

08007c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c32:	4b41      	ldr	r3, [pc, #260]	; (8007d38 <xTaskResumeAll+0x114>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <xTaskResumeAll+0x2a>
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	e7fe      	b.n	8007c4c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c4e:	f000 fdad 	bl	80087ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c52:	4b39      	ldr	r3, [pc, #228]	; (8007d38 <xTaskResumeAll+0x114>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	4a37      	ldr	r2, [pc, #220]	; (8007d38 <xTaskResumeAll+0x114>)
 8007c5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <xTaskResumeAll+0x114>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d161      	bne.n	8007d28 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c64:	4b35      	ldr	r3, [pc, #212]	; (8007d3c <xTaskResumeAll+0x118>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d05d      	beq.n	8007d28 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c6c:	e02e      	b.n	8007ccc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c6e:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <xTaskResumeAll+0x11c>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3318      	adds	r3, #24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff f8c6 	bl	8006e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff f8c1 	bl	8006e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	2201      	movs	r2, #1
 8007c90:	409a      	lsls	r2, r3
 8007c92:	4b2c      	ldr	r3, [pc, #176]	; (8007d44 <xTaskResumeAll+0x120>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	4a2a      	ldr	r2, [pc, #168]	; (8007d44 <xTaskResumeAll+0x120>)
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4a27      	ldr	r2, [pc, #156]	; (8007d48 <xTaskResumeAll+0x124>)
 8007caa:	441a      	add	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7ff f84d 	bl	8006d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <xTaskResumeAll+0x128>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d302      	bcc.n	8007ccc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007cc6:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <xTaskResumeAll+0x12c>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ccc:	4b1c      	ldr	r3, [pc, #112]	; (8007d40 <xTaskResumeAll+0x11c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1cc      	bne.n	8007c6e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cda:	f000 fb0f 	bl	80082fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cde:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <xTaskResumeAll+0x130>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d010      	beq.n	8007d0c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cea:	f000 f837 	bl	8007d5c <xTaskIncrementTick>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007cf4:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <xTaskResumeAll+0x12c>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f1      	bne.n	8007cea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <xTaskResumeAll+0x130>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d0c:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <xTaskResumeAll+0x12c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d009      	beq.n	8007d28 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d14:	2301      	movs	r3, #1
 8007d16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <xTaskResumeAll+0x134>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d28:	f000 fd6e 	bl	8008808 <vPortExitCritical>

	return xAlreadyYielded;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000698 	.word	0x20000698
 8007d3c:	20000670 	.word	0x20000670
 8007d40:	20000630 	.word	0x20000630
 8007d44:	20000678 	.word	0x20000678
 8007d48:	20000574 	.word	0x20000574
 8007d4c:	20000570 	.word	0x20000570
 8007d50:	20000684 	.word	0x20000684
 8007d54:	20000680 	.word	0x20000680
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d66:	4b50      	ldr	r3, [pc, #320]	; (8007ea8 <xTaskIncrementTick+0x14c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f040 808c 	bne.w	8007e88 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d70:	4b4e      	ldr	r3, [pc, #312]	; (8007eac <xTaskIncrementTick+0x150>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d78:	4a4c      	ldr	r2, [pc, #304]	; (8007eac <xTaskIncrementTick+0x150>)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11f      	bne.n	8007dc4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d84:	4b4a      	ldr	r3, [pc, #296]	; (8007eb0 <xTaskIncrementTick+0x154>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <xTaskIncrementTick+0x46>
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	e7fe      	b.n	8007da0 <xTaskIncrementTick+0x44>
 8007da2:	4b43      	ldr	r3, [pc, #268]	; (8007eb0 <xTaskIncrementTick+0x154>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <xTaskIncrementTick+0x158>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a40      	ldr	r2, [pc, #256]	; (8007eb0 <xTaskIncrementTick+0x154>)
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	4a40      	ldr	r2, [pc, #256]	; (8007eb4 <xTaskIncrementTick+0x158>)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <xTaskIncrementTick+0x15c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	4a3e      	ldr	r2, [pc, #248]	; (8007eb8 <xTaskIncrementTick+0x15c>)
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	f000 fa9c 	bl	80082fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dc4:	4b3d      	ldr	r3, [pc, #244]	; (8007ebc <xTaskIncrementTick+0x160>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d34d      	bcc.n	8007e6a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <xTaskIncrementTick+0x154>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <xTaskIncrementTick+0x80>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <xTaskIncrementTick+0x82>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <xTaskIncrementTick+0x160>)
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295
 8007de8:	601a      	str	r2, [r3, #0]
					break;
 8007dea:	e03e      	b.n	8007e6a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007dec:	4b30      	ldr	r3, [pc, #192]	; (8007eb0 <xTaskIncrementTick+0x154>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d203      	bcs.n	8007e0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <xTaskIncrementTick+0x160>)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6013      	str	r3, [r2, #0]
						break;
 8007e0a:	e02e      	b.n	8007e6a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fffb 	bl	8006e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	3318      	adds	r3, #24
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fff2 	bl	8006e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	409a      	lsls	r2, r3
 8007e30:	4b23      	ldr	r3, [pc, #140]	; (8007ec0 <xTaskIncrementTick+0x164>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	4a22      	ldr	r2, [pc, #136]	; (8007ec0 <xTaskIncrementTick+0x164>)
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4a1f      	ldr	r2, [pc, #124]	; (8007ec4 <xTaskIncrementTick+0x168>)
 8007e48:	441a      	add	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4610      	mov	r0, r2
 8007e52:	f7fe ff7e 	bl	8006d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <xTaskIncrementTick+0x16c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d3b4      	bcc.n	8007dce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e68:	e7b1      	b.n	8007dce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e6a:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <xTaskIncrementTick+0x16c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	4914      	ldr	r1, [pc, #80]	; (8007ec4 <xTaskIncrementTick+0x168>)
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d907      	bls.n	8007e92 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	e004      	b.n	8007e92 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e88:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <xTaskIncrementTick+0x170>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	4a0f      	ldr	r2, [pc, #60]	; (8007ecc <xTaskIncrementTick+0x170>)
 8007e90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <xTaskIncrementTick+0x174>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e9e:	697b      	ldr	r3, [r7, #20]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000698 	.word	0x20000698
 8007eac:	20000674 	.word	0x20000674
 8007eb0:	20000628 	.word	0x20000628
 8007eb4:	2000062c 	.word	0x2000062c
 8007eb8:	20000688 	.word	0x20000688
 8007ebc:	20000690 	.word	0x20000690
 8007ec0:	20000678 	.word	0x20000678
 8007ec4:	20000574 	.word	0x20000574
 8007ec8:	20000570 	.word	0x20000570
 8007ecc:	20000680 	.word	0x20000680
 8007ed0:	20000684 	.word	0x20000684

08007ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eda:	4b26      	ldr	r3, [pc, #152]	; (8007f74 <vTaskSwitchContext+0xa0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ee2:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <vTaskSwitchContext+0xa4>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ee8:	e03e      	b.n	8007f68 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007eea:	4b23      	ldr	r3, [pc, #140]	; (8007f78 <vTaskSwitchContext+0xa4>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ef0:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <vTaskSwitchContext+0xa8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	fab3 f383 	clz	r3, r3
 8007efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	f1c3 031f 	rsb	r3, r3, #31
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	491e      	ldr	r1, [pc, #120]	; (8007f80 <vTaskSwitchContext+0xac>)
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <vTaskSwitchContext+0x5a>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e7fe      	b.n	8007f2c <vTaskSwitchContext+0x58>
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <vTaskSwitchContext+0xac>)
 8007f3a:	4413      	add	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d104      	bne.n	8007f5e <vTaskSwitchContext+0x8a>
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4a07      	ldr	r2, [pc, #28]	; (8007f84 <vTaskSwitchContext+0xb0>)
 8007f66:	6013      	str	r3, [r2, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	20000698 	.word	0x20000698
 8007f78:	20000684 	.word	0x20000684
 8007f7c:	20000678 	.word	0x20000678
 8007f80:	20000574 	.word	0x20000574
 8007f84:	20000570 	.word	0x20000570

08007f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <vTaskPlaceOnEventList+0x24>
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e7fe      	b.n	8007faa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <vTaskPlaceOnEventList+0x44>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe fef0 	bl	8006d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fba:	2101      	movs	r1, #1
 8007fbc:	6838      	ldr	r0, [r7, #0]
 8007fbe:	f000 fa65 	bl	800848c <prvAddCurrentTaskToDelayedList>
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000570 	.word	0x20000570

08007fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <xTaskRemoveFromEventList+0x2a>
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e7fe      	b.n	8007ff8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3318      	adds	r3, #24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe ff04 	bl	8006e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008004:	4b1d      	ldr	r3, [pc, #116]	; (800807c <xTaskRemoveFromEventList+0xac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11c      	bne.n	8008046 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fefb 	bl	8006e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	2201      	movs	r2, #1
 800801c:	409a      	lsls	r2, r3
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <xTaskRemoveFromEventList+0xb0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4313      	orrs	r3, r2
 8008024:	4a16      	ldr	r2, [pc, #88]	; (8008080 <xTaskRemoveFromEventList+0xb0>)
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	4613      	mov	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <xTaskRemoveFromEventList+0xb4>)
 8008036:	441a      	add	r2, r3
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f7fe fe87 	bl	8006d52 <vListInsertEnd>
 8008044:	e005      	b.n	8008052 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3318      	adds	r3, #24
 800804a:	4619      	mov	r1, r3
 800804c:	480e      	ldr	r0, [pc, #56]	; (8008088 <xTaskRemoveFromEventList+0xb8>)
 800804e:	f7fe fe80 	bl	8006d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <xTaskRemoveFromEventList+0xbc>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d905      	bls.n	800806c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <xTaskRemoveFromEventList+0xc0>)
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	e001      	b.n	8008070 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008070:	697b      	ldr	r3, [r7, #20]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000698 	.word	0x20000698
 8008080:	20000678 	.word	0x20000678
 8008084:	20000574 	.word	0x20000574
 8008088:	20000630 	.word	0x20000630
 800808c:	20000570 	.word	0x20000570
 8008090:	20000684 	.word	0x20000684

08008094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <vTaskInternalSetTimeOutState+0x24>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <vTaskInternalSetTimeOutState+0x28>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20000688 	.word	0x20000688
 80080bc:	20000674 	.word	0x20000674

080080c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <xTaskCheckForTimeOut+0x24>
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	e7fe      	b.n	80080e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <xTaskCheckForTimeOut+0x3e>
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e7fe      	b.n	80080fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80080fe:	f000 fb55 	bl	80087ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008102:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <xTaskCheckForTimeOut+0xb8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d102      	bne.n	8008122 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800811c:	2300      	movs	r3, #0
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e023      	b.n	800816a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	4b15      	ldr	r3, [pc, #84]	; (800817c <xTaskCheckForTimeOut+0xbc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d007      	beq.n	800813e <xTaskCheckForTimeOut+0x7e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	429a      	cmp	r2, r3
 8008136:	d302      	bcc.n	800813e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e015      	b.n	800816a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	429a      	cmp	r2, r3
 8008146:	d20b      	bcs.n	8008160 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff ff9d 	bl	8008094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	e004      	b.n	800816a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008166:	2301      	movs	r3, #1
 8008168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800816a:	f000 fb4d 	bl	8008808 <vPortExitCritical>

	return xReturn;
 800816e:	69fb      	ldr	r3, [r7, #28]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3720      	adds	r7, #32
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000674 	.word	0x20000674
 800817c:	20000688 	.word	0x20000688

08008180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008184:	4b03      	ldr	r3, [pc, #12]	; (8008194 <vTaskMissedYield+0x14>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
}
 800818a:	bf00      	nop
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	20000684 	.word	0x20000684

08008198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081a0:	f000 f852 	bl	8008248 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081a4:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <prvIdleTask+0x28>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d9f9      	bls.n	80081a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <prvIdleTask+0x2c>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081bc:	e7f0      	b.n	80081a0 <prvIdleTask+0x8>
 80081be:	bf00      	nop
 80081c0:	20000574 	.word	0x20000574
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ce:	2300      	movs	r3, #0
 80081d0:	607b      	str	r3, [r7, #4]
 80081d2:	e00c      	b.n	80081ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4613      	mov	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4a12      	ldr	r2, [pc, #72]	; (8008228 <prvInitialiseTaskLists+0x60>)
 80081e0:	4413      	add	r3, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fd88 	bl	8006cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3301      	adds	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	d9ef      	bls.n	80081d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081f4:	480d      	ldr	r0, [pc, #52]	; (800822c <prvInitialiseTaskLists+0x64>)
 80081f6:	f7fe fd7f 	bl	8006cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081fa:	480d      	ldr	r0, [pc, #52]	; (8008230 <prvInitialiseTaskLists+0x68>)
 80081fc:	f7fe fd7c 	bl	8006cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008200:	480c      	ldr	r0, [pc, #48]	; (8008234 <prvInitialiseTaskLists+0x6c>)
 8008202:	f7fe fd79 	bl	8006cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008206:	480c      	ldr	r0, [pc, #48]	; (8008238 <prvInitialiseTaskLists+0x70>)
 8008208:	f7fe fd76 	bl	8006cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800820c:	480b      	ldr	r0, [pc, #44]	; (800823c <prvInitialiseTaskLists+0x74>)
 800820e:	f7fe fd73 	bl	8006cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008212:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <prvInitialiseTaskLists+0x78>)
 8008214:	4a05      	ldr	r2, [pc, #20]	; (800822c <prvInitialiseTaskLists+0x64>)
 8008216:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <prvInitialiseTaskLists+0x7c>)
 800821a:	4a05      	ldr	r2, [pc, #20]	; (8008230 <prvInitialiseTaskLists+0x68>)
 800821c:	601a      	str	r2, [r3, #0]
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000574 	.word	0x20000574
 800822c:	20000600 	.word	0x20000600
 8008230:	20000614 	.word	0x20000614
 8008234:	20000630 	.word	0x20000630
 8008238:	20000644 	.word	0x20000644
 800823c:	2000065c 	.word	0x2000065c
 8008240:	20000628 	.word	0x20000628
 8008244:	2000062c 	.word	0x2000062c

08008248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800824e:	e019      	b.n	8008284 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008250:	f000 faac 	bl	80087ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <prvCheckTasksWaitingTermination+0x4c>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fdd3 	bl	8006e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvCheckTasksWaitingTermination+0x50>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3b01      	subs	r3, #1
 800826c:	4a0a      	ldr	r2, [pc, #40]	; (8008298 <prvCheckTasksWaitingTermination+0x50>)
 800826e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <prvCheckTasksWaitingTermination+0x54>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3b01      	subs	r3, #1
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <prvCheckTasksWaitingTermination+0x54>)
 8008278:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800827a:	f000 fac5 	bl	8008808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f80e 	bl	80082a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <prvCheckTasksWaitingTermination+0x54>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e1      	bne.n	8008250 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000644 	.word	0x20000644
 8008298:	20000670 	.word	0x20000670
 800829c:	20000658 	.word	0x20000658

080082a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d108      	bne.n	80082c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fc54 	bl	8008b64 <vPortFree>
				vPortFree( pxTCB );
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc51 	bl	8008b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082c2:	e017      	b.n	80082f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d103      	bne.n	80082d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fc48 	bl	8008b64 <vPortFree>
	}
 80082d4:	e00e      	b.n	80082f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d009      	beq.n	80082f4 <prvDeleteTCB+0x54>
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
 80082f2:	e7fe      	b.n	80082f2 <prvDeleteTCB+0x52>
	}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <prvResetNextTaskUnblockTime+0x44>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <prvResetNextTaskUnblockTime+0x14>
 800830c:	2301      	movs	r3, #1
 800830e:	e000      	b.n	8008312 <prvResetNextTaskUnblockTime+0x16>
 8008310:	2300      	movs	r3, #0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d004      	beq.n	8008320 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <prvResetNextTaskUnblockTime+0x48>)
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800831e:	e008      	b.n	8008332 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <prvResetNextTaskUnblockTime+0x44>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	4a05      	ldr	r2, [pc, #20]	; (8008344 <prvResetNextTaskUnblockTime+0x48>)
 8008330:	6013      	str	r3, [r2, #0]
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20000628 	.word	0x20000628
 8008344:	20000690 	.word	0x20000690

08008348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <xTaskGetSchedulerState+0x34>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008356:	2301      	movs	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e008      	b.n	800836e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835c:	4b08      	ldr	r3, [pc, #32]	; (8008380 <xTaskGetSchedulerState+0x38>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008364:	2302      	movs	r3, #2
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	e001      	b.n	800836e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800836e:	687b      	ldr	r3, [r7, #4]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000067c 	.word	0x2000067c
 8008380:	20000698 	.word	0x20000698

08008384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d06c      	beq.n	8008474 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <xTaskPriorityDisinherit+0xfc>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d009      	beq.n	80083b8 <xTaskPriorityDisinherit+0x34>
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e7fe      	b.n	80083b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <xTaskPriorityDisinherit+0x50>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	e7fe      	b.n	80083d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d8:	1e5a      	subs	r2, r3, #1
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d044      	beq.n	8008474 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d140      	bne.n	8008474 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fd08 	bl	8006e0c <uxListRemove>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d115      	bne.n	800842e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	491f      	ldr	r1, [pc, #124]	; (8008484 <xTaskPriorityDisinherit+0x100>)
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xTaskPriorityDisinherit+0xaa>
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	2201      	movs	r2, #1
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43da      	mvns	r2, r3
 8008424:	4b18      	ldr	r3, [pc, #96]	; (8008488 <xTaskPriorityDisinherit+0x104>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4013      	ands	r3, r2
 800842a:	4a17      	ldr	r2, [pc, #92]	; (8008488 <xTaskPriorityDisinherit+0x104>)
 800842c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f1c3 0207 	rsb	r2, r3, #7
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	2201      	movs	r2, #1
 8008448:	409a      	lsls	r2, r3
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <xTaskPriorityDisinherit+0x104>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4313      	orrs	r3, r2
 8008450:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <xTaskPriorityDisinherit+0x104>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4a08      	ldr	r2, [pc, #32]	; (8008484 <xTaskPriorityDisinherit+0x100>)
 8008462:	441a      	add	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe fc71 	bl	8006d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008470:	2301      	movs	r3, #1
 8008472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008474:	697b      	ldr	r3, [r7, #20]
	}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000570 	.word	0x20000570
 8008484:	20000574 	.word	0x20000574
 8008488:	20000678 	.word	0x20000678

0800848c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008496:	4b29      	ldr	r3, [pc, #164]	; (800853c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800849c:	4b28      	ldr	r3, [pc, #160]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fcb2 	bl	8006e0c <uxListRemove>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10b      	bne.n	80084c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084ae:	4b24      	ldr	r3, [pc, #144]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43da      	mvns	r2, r3
 80084bc:	4b21      	ldr	r3, [pc, #132]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4013      	ands	r3, r2
 80084c2:	4a20      	ldr	r2, [pc, #128]	; (8008544 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d10a      	bne.n	80084e4 <prvAddCurrentTaskToDelayedList+0x58>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d4:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	481a      	ldr	r0, [pc, #104]	; (8008548 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084de:	f7fe fc38 	bl	8006d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084e2:	e026      	b.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ec:	4b14      	ldr	r3, [pc, #80]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d209      	bcs.n	8008510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fc:	4b13      	ldr	r3, [pc, #76]	; (800854c <prvAddCurrentTaskToDelayedList+0xc0>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3304      	adds	r3, #4
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7fe fc46 	bl	8006d9a <vListInsert>
}
 800850e:	e010      	b.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3304      	adds	r3, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4610      	mov	r0, r2
 800851e:	f7fe fc3c 	bl	8006d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008522:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	429a      	cmp	r2, r3
 800852a:	d202      	bcs.n	8008532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800852c:	4a09      	ldr	r2, [pc, #36]	; (8008554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6013      	str	r3, [r2, #0]
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000674 	.word	0x20000674
 8008540:	20000570 	.word	0x20000570
 8008544:	20000678 	.word	0x20000678
 8008548:	2000065c 	.word	0x2000065c
 800854c:	2000062c 	.word	0x2000062c
 8008550:	20000628 	.word	0x20000628
 8008554:	20000690 	.word	0x20000690

08008558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3b04      	subs	r3, #4
 8008568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3b04      	subs	r3, #4
 8008576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3b04      	subs	r3, #4
 8008586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <pxPortInitialiseStack+0x64>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3b14      	subs	r3, #20
 8008592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f06f 0202 	mvn.w	r2, #2
 80085a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	3b20      	subs	r3, #32
 80085ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	080085c1 	.word	0x080085c1

080085c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <prvTaskExitError+0x50>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d2:	d009      	beq.n	80085e8 <prvTaskExitError+0x28>
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e7fe      	b.n	80085e6 <prvTaskExitError+0x26>
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085fa:	bf00      	nop
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0fc      	beq.n	80085fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000018 	.word	0x20000018
	...

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	; (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	; (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008676:	4b44      	ldr	r3, [pc, #272]	; (8008788 <xPortStartScheduler+0x118>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a44      	ldr	r2, [pc, #272]	; (800878c <xPortStartScheduler+0x11c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d109      	bne.n	8008694 <xPortStartScheduler+0x24>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	e7fe      	b.n	8008692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008694:	4b3c      	ldr	r3, [pc, #240]	; (8008788 <xPortStartScheduler+0x118>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a3d      	ldr	r2, [pc, #244]	; (8008790 <xPortStartScheduler+0x120>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d109      	bne.n	80086b2 <xPortStartScheduler+0x42>
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	e7fe      	b.n	80086b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086b2:	4b38      	ldr	r3, [pc, #224]	; (8008794 <xPortStartScheduler+0x124>)
 80086b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <xPortStartScheduler+0x128>)
 80086d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086da:	4b30      	ldr	r3, [pc, #192]	; (800879c <xPortStartScheduler+0x12c>)
 80086dc:	2207      	movs	r2, #7
 80086de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086e0:	e009      	b.n	80086f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <xPortStartScheduler+0x12c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	4a2c      	ldr	r2, [pc, #176]	; (800879c <xPortStartScheduler+0x12c>)
 80086ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	d0ef      	beq.n	80086e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008702:	4b26      	ldr	r3, [pc, #152]	; (800879c <xPortStartScheduler+0x12c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f1c3 0307 	rsb	r3, r3, #7
 800870a:	2b04      	cmp	r3, #4
 800870c:	d009      	beq.n	8008722 <xPortStartScheduler+0xb2>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	60bb      	str	r3, [r7, #8]
 8008720:	e7fe      	b.n	8008720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008722:	4b1e      	ldr	r3, [pc, #120]	; (800879c <xPortStartScheduler+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	4a1c      	ldr	r2, [pc, #112]	; (800879c <xPortStartScheduler+0x12c>)
 800872a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <xPortStartScheduler+0x12c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008734:	4a19      	ldr	r2, [pc, #100]	; (800879c <xPortStartScheduler+0x12c>)
 8008736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008740:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <xPortStartScheduler+0x130>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <xPortStartScheduler+0x130>)
 8008746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800874a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <xPortStartScheduler+0x130>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <xPortStartScheduler+0x130>)
 8008752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008758:	f000 f8d6 	bl	8008908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <xPortStartScheduler+0x134>)
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008762:	f000 f8f5 	bl	8008950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <xPortStartScheduler+0x138>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a0f      	ldr	r2, [pc, #60]	; (80087a8 <xPortStartScheduler+0x138>)
 800876c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008772:	f7ff ff69 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008776:	f7ff fbad 	bl	8007ed4 <vTaskSwitchContext>
	prvTaskExitError();
 800877a:	f7ff ff21 	bl	80085c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	e000ed00 	.word	0xe000ed00
 800878c:	410fc271 	.word	0x410fc271
 8008790:	410fc270 	.word	0x410fc270
 8008794:	e000e400 	.word	0xe000e400
 8008798:	2000069c 	.word	0x2000069c
 800879c:	200006a0 	.word	0x200006a0
 80087a0:	e000ed20 	.word	0xe000ed20
 80087a4:	20000018 	.word	0x20000018
 80087a8:	e000ef34 	.word	0xe000ef34

080087ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <vPortEnterCritical+0x54>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	4a0d      	ldr	r2, [pc, #52]	; (8008800 <vPortEnterCritical+0x54>)
 80087cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <vPortEnterCritical+0x54>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10e      	bne.n	80087f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <vPortEnterCritical+0x58>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <vPortEnterCritical+0x48>
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	e7fe      	b.n	80087f2 <vPortEnterCritical+0x46>
	}
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20000018 	.word	0x20000018
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800880e:	4b11      	ldr	r3, [pc, #68]	; (8008854 <vPortExitCritical+0x4c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <vPortExitCritical+0x22>
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	e7fe      	b.n	8008828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <vPortExitCritical+0x4c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a08      	ldr	r2, [pc, #32]	; (8008854 <vPortExitCritical+0x4c>)
 8008832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008834:	4b07      	ldr	r3, [pc, #28]	; (8008854 <vPortExitCritical+0x4c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <vPortExitCritical+0x3e>
 800883c:	2300      	movs	r3, #0
 800883e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000018 	.word	0x20000018
	...

08008860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008860:	f3ef 8009 	mrs	r0, PSP
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <pxCurrentTCBConst>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	f01e 0f10 	tst.w	lr, #16
 8008870:	bf08      	it	eq
 8008872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008884:	f380 8811 	msr	BASEPRI, r0
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f7ff fb20 	bl	8007ed4 <vTaskSwitchContext>
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f380 8811 	msr	BASEPRI, r0
 800889c:	bc09      	pop	{r0, r3}
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a6:	f01e 0f10 	tst.w	lr, #16
 80088aa:	bf08      	it	eq
 80088ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088b0:	f380 8809 	msr	PSP, r0
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst>:
 80088c0:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088e0:	f7ff fa3c 	bl	8007d5c <xTaskIncrementTick>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ea:	4b06      	ldr	r3, [pc, #24]	; (8008904 <SysTick_Handler+0x3c>)
 80088ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800890c:	4b0b      	ldr	r3, [pc, #44]	; (800893c <vPortSetupTimerInterrupt+0x34>)
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <vPortSetupTimerInterrupt+0x38>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <vPortSetupTimerInterrupt+0x3c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <vPortSetupTimerInterrupt+0x40>)
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	099b      	lsrs	r3, r3, #6
 8008924:	4a09      	ldr	r2, [pc, #36]	; (800894c <vPortSetupTimerInterrupt+0x44>)
 8008926:	3b01      	subs	r3, #1
 8008928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800892a:	4b04      	ldr	r3, [pc, #16]	; (800893c <vPortSetupTimerInterrupt+0x34>)
 800892c:	2207      	movs	r2, #7
 800892e:	601a      	str	r2, [r3, #0]
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e010 	.word	0xe000e010
 8008940:	e000e018 	.word	0xe000e018
 8008944:	20000000 	.word	0x20000000
 8008948:	10624dd3 	.word	0x10624dd3
 800894c:	e000e014 	.word	0xe000e014

08008950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008960 <vPortEnableVFP+0x10>
 8008954:	6801      	ldr	r1, [r0, #0]
 8008956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800895a:	6001      	str	r1, [r0, #0]
 800895c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800895e:	bf00      	nop
 8008960:	e000ed88 	.word	0xe000ed88

08008964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800896a:	f3ef 8305 	mrs	r3, IPSR
 800896e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b0f      	cmp	r3, #15
 8008974:	d913      	bls.n	800899e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008976:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <vPortValidateInterruptPriority+0x6c>)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008980:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <vPortValidateInterruptPriority+0x70>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	7afa      	ldrb	r2, [r7, #11]
 8008986:	429a      	cmp	r2, r3
 8008988:	d209      	bcs.n	800899e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
 800899c:	e7fe      	b.n	800899c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <vPortValidateInterruptPriority+0x74>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <vPortValidateInterruptPriority+0x78>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d909      	bls.n	80089c2 <vPortValidateInterruptPriority+0x5e>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	e7fe      	b.n	80089c0 <vPortValidateInterruptPriority+0x5c>
	}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e3f0 	.word	0xe000e3f0
 80089d4:	2000069c 	.word	0x2000069c
 80089d8:	e000ed0c 	.word	0xe000ed0c
 80089dc:	200006a0 	.word	0x200006a0

080089e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089ec:	f7ff f90c 	bl	8007c08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089f0:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <pvPortMalloc+0x170>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089f8:	f000 f90c 	bl	8008c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089fc:	4b55      	ldr	r3, [pc, #340]	; (8008b54 <pvPortMalloc+0x174>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f040 808c 	bne.w	8008b22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01c      	beq.n	8008a4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a10:	2208      	movs	r2, #8
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f023 0307 	bic.w	r3, r3, #7
 8008a28:	3308      	adds	r3, #8
 8008a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <pvPortMalloc+0x6a>
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e7fe      	b.n	8008a48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d068      	beq.n	8008b22 <pvPortMalloc+0x142>
 8008a50:	4b41      	ldr	r3, [pc, #260]	; (8008b58 <pvPortMalloc+0x178>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d863      	bhi.n	8008b22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <pvPortMalloc+0x17c>)
 8008a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a5e:	4b3f      	ldr	r3, [pc, #252]	; (8008b5c <pvPortMalloc+0x17c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a64:	e004      	b.n	8008a70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d903      	bls.n	8008a82 <pvPortMalloc+0xa2>
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f1      	bne.n	8008a66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a82:	4b33      	ldr	r3, [pc, #204]	; (8008b50 <pvPortMalloc+0x170>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d04a      	beq.n	8008b22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2208      	movs	r2, #8
 8008a92:	4413      	add	r3, r2
 8008a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d91e      	bls.n	8008aec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d009      	beq.n	8008ad4 <pvPortMalloc+0xf4>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	e7fe      	b.n	8008ad2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1ad2      	subs	r2, r2, r3
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ae6:	69b8      	ldr	r0, [r7, #24]
 8008ae8:	f000 f8f6 	bl	8008cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <pvPortMalloc+0x178>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <pvPortMalloc+0x178>)
 8008af8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008afa:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <pvPortMalloc+0x178>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <pvPortMalloc+0x180>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d203      	bcs.n	8008b0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <pvPortMalloc+0x178>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a15      	ldr	r2, [pc, #84]	; (8008b60 <pvPortMalloc+0x180>)
 8008b0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	4b10      	ldr	r3, [pc, #64]	; (8008b54 <pvPortMalloc+0x174>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b22:	f7ff f87f 	bl	8007c24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <pvPortMalloc+0x164>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e7fe      	b.n	8008b42 <pvPortMalloc+0x162>
	return pvReturn;
 8008b44:	69fb      	ldr	r3, [r7, #28]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3728      	adds	r7, #40	; 0x28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	200042ac 	.word	0x200042ac
 8008b54:	200042b8 	.word	0x200042b8
 8008b58:	200042b0 	.word	0x200042b0
 8008b5c:	200042a4 	.word	0x200042a4
 8008b60:	200042b4 	.word	0x200042b4

08008b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d046      	beq.n	8008c04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b76:	2308      	movs	r3, #8
 8008b78:	425b      	negs	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <vPortFree+0xa8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <vPortFree+0x42>
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e7fe      	b.n	8008ba4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <vPortFree+0x5e>
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60bb      	str	r3, [r7, #8]
 8008bc0:	e7fe      	b.n	8008bc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <vPortFree+0xa8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d019      	beq.n	8008c04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d115      	bne.n	8008c04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <vPortFree+0xa8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	401a      	ands	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008be8:	f7ff f80e 	bl	8007c08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <vPortFree+0xac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vPortFree+0xac>)
 8008bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f000 f86c 	bl	8008cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c00:	f7ff f810 	bl	8007c24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c04:	bf00      	nop
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	200042b8 	.word	0x200042b8
 8008c10:	200042b0 	.word	0x200042b0

08008c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c20:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <prvHeapInit+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00c      	beq.n	8008c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3307      	adds	r3, #7
 8008c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0307 	bic.w	r3, r3, #7
 8008c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <prvHeapInit+0xac>)
 8008c44:	4413      	add	r3, r2
 8008c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c4c:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <prvHeapInit+0xb0>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <prvHeapInit+0xb0>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c60:	2208      	movs	r2, #8
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0307 	bic.w	r3, r3, #7
 8008c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a15      	ldr	r2, [pc, #84]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvHeapInit+0xb4>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <prvHeapInit+0xb8>)
 8008ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <prvHeapInit+0xbc>)
 8008caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cac:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <prvHeapInit+0xc0>)
 8008cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	200006a4 	.word	0x200006a4
 8008cc4:	200042a4 	.word	0x200042a4
 8008cc8:	200042ac 	.word	0x200042ac
 8008ccc:	200042b4 	.word	0x200042b4
 8008cd0:	200042b0 	.word	0x200042b0
 8008cd4:	200042b8 	.word	0x200042b8

08008cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <prvInsertBlockIntoFreeList+0xac>)
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e002      	b.n	8008cec <prvInsertBlockIntoFreeList+0x14>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d8f7      	bhi.n	8008ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4413      	add	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d108      	bne.n	8008d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	441a      	add	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d118      	bne.n	8008d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <prvInsertBlockIntoFreeList+0xb0>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d00d      	beq.n	8008d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e008      	b.n	8008d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <prvInsertBlockIntoFreeList+0xb0>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e003      	b.n	8008d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d002      	beq.n	8008d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	200042a4 	.word	0x200042a4
 8008d88:	200042ac 	.word	0x200042ac

08008d8c <__errno>:
 8008d8c:	4b01      	ldr	r3, [pc, #4]	; (8008d94 <__errno+0x8>)
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	2000001c 	.word	0x2000001c

08008d98 <exit>:
 8008d98:	b508      	push	{r3, lr}
 8008d9a:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <exit+0x20>)
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	b113      	cbz	r3, 8008da6 <exit+0xe>
 8008da0:	2100      	movs	r1, #0
 8008da2:	f3af 8000 	nop.w
 8008da6:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <exit+0x24>)
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008dac:	b103      	cbz	r3, 8008db0 <exit+0x18>
 8008dae:	4798      	blx	r3
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7f8 fba1 	bl	80014f8 <_exit>
 8008db6:	bf00      	nop
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	0800aea8 	.word	0x0800aea8

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4e0d      	ldr	r6, [pc, #52]	; (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	; (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1ba4      	subs	r4, r4, r6
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2500      	movs	r5, #0
 8008dcc:	42a5      	cmp	r5, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4e0b      	ldr	r6, [pc, #44]	; (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	; (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f001 fd48 	bl	800a868 <_init>
 8008dd8:	1ba4      	subs	r4, r4, r6
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2500      	movs	r5, #0
 8008dde:	42a5      	cmp	r5, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008de8:	4798      	blx	r3
 8008dea:	3501      	adds	r5, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008df2:	4798      	blx	r3
 8008df4:	3501      	adds	r5, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	0800b0e0 	.word	0x0800b0e0
 8008dfc:	0800b0e0 	.word	0x0800b0e0
 8008e00:	0800b0e0 	.word	0x0800b0e0
 8008e04:	0800b0e4 	.word	0x0800b0e4

08008e08 <memcpy>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	1e43      	subs	r3, r0, #1
 8008e0c:	440a      	add	r2, r1
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	d100      	bne.n	8008e14 <memcpy+0xc>
 8008e12:	bd10      	pop	{r4, pc}
 8008e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1c:	e7f7      	b.n	8008e0e <memcpy+0x6>

08008e1e <memset>:
 8008e1e:	4402      	add	r2, r0
 8008e20:	4603      	mov	r3, r0
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d100      	bne.n	8008e28 <memset+0xa>
 8008e26:	4770      	bx	lr
 8008e28:	f803 1b01 	strb.w	r1, [r3], #1
 8008e2c:	e7f9      	b.n	8008e22 <memset+0x4>

08008e2e <__cvt>:
 8008e2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e32:	ec55 4b10 	vmov	r4, r5, d0
 8008e36:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	460e      	mov	r6, r1
 8008e40:	4691      	mov	r9, r2
 8008e42:	4619      	mov	r1, r3
 8008e44:	bfb8      	it	lt
 8008e46:	4622      	movlt	r2, r4
 8008e48:	462b      	mov	r3, r5
 8008e4a:	f027 0720 	bic.w	r7, r7, #32
 8008e4e:	bfbb      	ittet	lt
 8008e50:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e54:	461d      	movlt	r5, r3
 8008e56:	2300      	movge	r3, #0
 8008e58:	232d      	movlt	r3, #45	; 0x2d
 8008e5a:	bfb8      	it	lt
 8008e5c:	4614      	movlt	r4, r2
 8008e5e:	2f46      	cmp	r7, #70	; 0x46
 8008e60:	700b      	strb	r3, [r1, #0]
 8008e62:	d004      	beq.n	8008e6e <__cvt+0x40>
 8008e64:	2f45      	cmp	r7, #69	; 0x45
 8008e66:	d100      	bne.n	8008e6a <__cvt+0x3c>
 8008e68:	3601      	adds	r6, #1
 8008e6a:	2102      	movs	r1, #2
 8008e6c:	e000      	b.n	8008e70 <__cvt+0x42>
 8008e6e:	2103      	movs	r1, #3
 8008e70:	ab03      	add	r3, sp, #12
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	ab02      	add	r3, sp, #8
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4653      	mov	r3, sl
 8008e7c:	ec45 4b10 	vmov	d0, r4, r5
 8008e80:	f000 fbae 	bl	80095e0 <_dtoa_r>
 8008e84:	2f47      	cmp	r7, #71	; 0x47
 8008e86:	4680      	mov	r8, r0
 8008e88:	d102      	bne.n	8008e90 <__cvt+0x62>
 8008e8a:	f019 0f01 	tst.w	r9, #1
 8008e8e:	d026      	beq.n	8008ede <__cvt+0xb0>
 8008e90:	2f46      	cmp	r7, #70	; 0x46
 8008e92:	eb08 0906 	add.w	r9, r8, r6
 8008e96:	d111      	bne.n	8008ebc <__cvt+0x8e>
 8008e98:	f898 3000 	ldrb.w	r3, [r8]
 8008e9c:	2b30      	cmp	r3, #48	; 0x30
 8008e9e:	d10a      	bne.n	8008eb6 <__cvt+0x88>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 fdde 	bl	8000a68 <__aeabi_dcmpeq>
 8008eac:	b918      	cbnz	r0, 8008eb6 <__cvt+0x88>
 8008eae:	f1c6 0601 	rsb	r6, r6, #1
 8008eb2:	f8ca 6000 	str.w	r6, [sl]
 8008eb6:	f8da 3000 	ldr.w	r3, [sl]
 8008eba:	4499      	add	r9, r3
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	f7f7 fdd0 	bl	8000a68 <__aeabi_dcmpeq>
 8008ec8:	b938      	cbnz	r0, 8008eda <__cvt+0xac>
 8008eca:	2230      	movs	r2, #48	; 0x30
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	454b      	cmp	r3, r9
 8008ed0:	d205      	bcs.n	8008ede <__cvt+0xb0>
 8008ed2:	1c59      	adds	r1, r3, #1
 8008ed4:	9103      	str	r1, [sp, #12]
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e7f8      	b.n	8008ecc <__cvt+0x9e>
 8008eda:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee2:	eba3 0308 	sub.w	r3, r3, r8
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	b004      	add	sp, #16
 8008eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ef0 <__exponent>:
 8008ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	bfba      	itte	lt
 8008ef8:	4249      	neglt	r1, r1
 8008efa:	232d      	movlt	r3, #45	; 0x2d
 8008efc:	232b      	movge	r3, #43	; 0x2b
 8008efe:	2909      	cmp	r1, #9
 8008f00:	f804 2b02 	strb.w	r2, [r4], #2
 8008f04:	7043      	strb	r3, [r0, #1]
 8008f06:	dd20      	ble.n	8008f4a <__exponent+0x5a>
 8008f08:	f10d 0307 	add.w	r3, sp, #7
 8008f0c:	461f      	mov	r7, r3
 8008f0e:	260a      	movs	r6, #10
 8008f10:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f14:	fb06 1115 	mls	r1, r6, r5, r1
 8008f18:	3130      	adds	r1, #48	; 0x30
 8008f1a:	2d09      	cmp	r5, #9
 8008f1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f20:	f103 32ff 	add.w	r2, r3, #4294967295
 8008f24:	4629      	mov	r1, r5
 8008f26:	dc09      	bgt.n	8008f3c <__exponent+0x4c>
 8008f28:	3130      	adds	r1, #48	; 0x30
 8008f2a:	3b02      	subs	r3, #2
 8008f2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f30:	42bb      	cmp	r3, r7
 8008f32:	4622      	mov	r2, r4
 8008f34:	d304      	bcc.n	8008f40 <__exponent+0x50>
 8008f36:	1a10      	subs	r0, r2, r0
 8008f38:	b003      	add	sp, #12
 8008f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	e7e7      	b.n	8008f10 <__exponent+0x20>
 8008f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f44:	f804 2b01 	strb.w	r2, [r4], #1
 8008f48:	e7f2      	b.n	8008f30 <__exponent+0x40>
 8008f4a:	2330      	movs	r3, #48	; 0x30
 8008f4c:	4419      	add	r1, r3
 8008f4e:	7083      	strb	r3, [r0, #2]
 8008f50:	1d02      	adds	r2, r0, #4
 8008f52:	70c1      	strb	r1, [r0, #3]
 8008f54:	e7ef      	b.n	8008f36 <__exponent+0x46>
	...

08008f58 <_printf_float>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	b08d      	sub	sp, #52	; 0x34
 8008f5e:	460c      	mov	r4, r1
 8008f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008f64:	4616      	mov	r6, r2
 8008f66:	461f      	mov	r7, r3
 8008f68:	4605      	mov	r5, r0
 8008f6a:	f001 f8f1 	bl	800a150 <_localeconv_r>
 8008f6e:	6803      	ldr	r3, [r0, #0]
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7f7 f94c 	bl	8000210 <strlen>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f80:	9005      	str	r0, [sp, #20]
 8008f82:	3307      	adds	r3, #7
 8008f84:	f023 0307 	bic.w	r3, r3, #7
 8008f88:	f103 0208 	add.w	r2, r3, #8
 8008f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f90:	f8d4 b000 	ldr.w	fp, [r4]
 8008f94:	f8c8 2000 	str.w	r2, [r8]
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008fa0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008fa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fae:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb2:	4ba7      	ldr	r3, [pc, #668]	; (8009250 <_printf_float+0x2f8>)
 8008fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fb8:	f7f7 fd88 	bl	8000acc <__aeabi_dcmpun>
 8008fbc:	bb70      	cbnz	r0, 800901c <_printf_float+0xc4>
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	4ba3      	ldr	r3, [pc, #652]	; (8009250 <_printf_float+0x2f8>)
 8008fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fc8:	f7f7 fd62 	bl	8000a90 <__aeabi_dcmple>
 8008fcc:	bb30      	cbnz	r0, 800901c <_printf_float+0xc4>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fd51 	bl	8000a7c <__aeabi_dcmplt>
 8008fda:	b110      	cbz	r0, 8008fe2 <_printf_float+0x8a>
 8008fdc:	232d      	movs	r3, #45	; 0x2d
 8008fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe2:	4a9c      	ldr	r2, [pc, #624]	; (8009254 <_printf_float+0x2fc>)
 8008fe4:	4b9c      	ldr	r3, [pc, #624]	; (8009258 <_printf_float+0x300>)
 8008fe6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008fea:	bf8c      	ite	hi
 8008fec:	4690      	movhi	r8, r2
 8008fee:	4698      	movls	r8, r3
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	f02b 0204 	bic.w	r2, fp, #4
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	6022      	str	r2, [r4, #0]
 8008ffa:	f04f 0900 	mov.w	r9, #0
 8008ffe:	9700      	str	r7, [sp, #0]
 8009000:	4633      	mov	r3, r6
 8009002:	aa0b      	add	r2, sp, #44	; 0x2c
 8009004:	4621      	mov	r1, r4
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f9e6 	bl	80093d8 <_printf_common>
 800900c:	3001      	adds	r0, #1
 800900e:	f040 808d 	bne.w	800912c <_printf_float+0x1d4>
 8009012:	f04f 30ff 	mov.w	r0, #4294967295
 8009016:	b00d      	add	sp, #52	; 0x34
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	4642      	mov	r2, r8
 800901e:	464b      	mov	r3, r9
 8009020:	4640      	mov	r0, r8
 8009022:	4649      	mov	r1, r9
 8009024:	f7f7 fd52 	bl	8000acc <__aeabi_dcmpun>
 8009028:	b110      	cbz	r0, 8009030 <_printf_float+0xd8>
 800902a:	4a8c      	ldr	r2, [pc, #560]	; (800925c <_printf_float+0x304>)
 800902c:	4b8c      	ldr	r3, [pc, #560]	; (8009260 <_printf_float+0x308>)
 800902e:	e7da      	b.n	8008fe6 <_printf_float+0x8e>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	1c4b      	adds	r3, r1, #1
 8009034:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009038:	a80a      	add	r0, sp, #40	; 0x28
 800903a:	d13e      	bne.n	80090ba <_printf_float+0x162>
 800903c:	2306      	movs	r3, #6
 800903e:	6063      	str	r3, [r4, #4]
 8009040:	2300      	movs	r3, #0
 8009042:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009046:	ab09      	add	r3, sp, #36	; 0x24
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	ec49 8b10 	vmov	d0, r8, r9
 800904e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	f8cd a004 	str.w	sl, [sp, #4]
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	4628      	mov	r0, r5
 800905c:	f7ff fee7 	bl	8008e2e <__cvt>
 8009060:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009064:	2b47      	cmp	r3, #71	; 0x47
 8009066:	4680      	mov	r8, r0
 8009068:	d109      	bne.n	800907e <_printf_float+0x126>
 800906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906c:	1cd8      	adds	r0, r3, #3
 800906e:	db02      	blt.n	8009076 <_printf_float+0x11e>
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	4293      	cmp	r3, r2
 8009074:	dd47      	ble.n	8009106 <_printf_float+0x1ae>
 8009076:	f1aa 0a02 	sub.w	sl, sl, #2
 800907a:	fa5f fa8a 	uxtb.w	sl, sl
 800907e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009084:	d824      	bhi.n	80090d0 <_printf_float+0x178>
 8009086:	3901      	subs	r1, #1
 8009088:	4652      	mov	r2, sl
 800908a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800908e:	9109      	str	r1, [sp, #36]	; 0x24
 8009090:	f7ff ff2e 	bl	8008ef0 <__exponent>
 8009094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009096:	1813      	adds	r3, r2, r0
 8009098:	2a01      	cmp	r2, #1
 800909a:	4681      	mov	r9, r0
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	dc02      	bgt.n	80090a6 <_printf_float+0x14e>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	07d1      	lsls	r1, r2, #31
 80090a4:	d501      	bpl.n	80090aa <_printf_float+0x152>
 80090a6:	3301      	adds	r3, #1
 80090a8:	6123      	str	r3, [r4, #16]
 80090aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0a5      	beq.n	8008ffe <_printf_float+0xa6>
 80090b2:	232d      	movs	r3, #45	; 0x2d
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090b8:	e7a1      	b.n	8008ffe <_printf_float+0xa6>
 80090ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80090be:	f000 8177 	beq.w	80093b0 <_printf_float+0x458>
 80090c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80090c6:	d1bb      	bne.n	8009040 <_printf_float+0xe8>
 80090c8:	2900      	cmp	r1, #0
 80090ca:	d1b9      	bne.n	8009040 <_printf_float+0xe8>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e7b6      	b.n	800903e <_printf_float+0xe6>
 80090d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80090d4:	d119      	bne.n	800910a <_printf_float+0x1b2>
 80090d6:	2900      	cmp	r1, #0
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	dd0c      	ble.n	80090f6 <_printf_float+0x19e>
 80090dc:	6121      	str	r1, [r4, #16]
 80090de:	b913      	cbnz	r3, 80090e6 <_printf_float+0x18e>
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	07d2      	lsls	r2, r2, #31
 80090e4:	d502      	bpl.n	80090ec <_printf_float+0x194>
 80090e6:	3301      	adds	r3, #1
 80090e8:	440b      	add	r3, r1
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80090f0:	f04f 0900 	mov.w	r9, #0
 80090f4:	e7d9      	b.n	80090aa <_printf_float+0x152>
 80090f6:	b913      	cbnz	r3, 80090fe <_printf_float+0x1a6>
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	07d0      	lsls	r0, r2, #31
 80090fc:	d501      	bpl.n	8009102 <_printf_float+0x1aa>
 80090fe:	3302      	adds	r3, #2
 8009100:	e7f3      	b.n	80090ea <_printf_float+0x192>
 8009102:	2301      	movs	r3, #1
 8009104:	e7f1      	b.n	80090ea <_printf_float+0x192>
 8009106:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800910a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800910e:	4293      	cmp	r3, r2
 8009110:	db05      	blt.n	800911e <_printf_float+0x1c6>
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	07d1      	lsls	r1, r2, #31
 8009118:	d5e8      	bpl.n	80090ec <_printf_float+0x194>
 800911a:	3301      	adds	r3, #1
 800911c:	e7e5      	b.n	80090ea <_printf_float+0x192>
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfd4      	ite	le
 8009122:	f1c3 0302 	rsble	r3, r3, #2
 8009126:	2301      	movgt	r3, #1
 8009128:	4413      	add	r3, r2
 800912a:	e7de      	b.n	80090ea <_printf_float+0x192>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	055a      	lsls	r2, r3, #21
 8009130:	d407      	bmi.n	8009142 <_printf_float+0x1ea>
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	4642      	mov	r2, r8
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d12b      	bne.n	8009198 <_printf_float+0x240>
 8009140:	e767      	b.n	8009012 <_printf_float+0xba>
 8009142:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009146:	f240 80dc 	bls.w	8009302 <_printf_float+0x3aa>
 800914a:	2200      	movs	r2, #0
 800914c:	2300      	movs	r3, #0
 800914e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009152:	f7f7 fc89 	bl	8000a68 <__aeabi_dcmpeq>
 8009156:	2800      	cmp	r0, #0
 8009158:	d033      	beq.n	80091c2 <_printf_float+0x26a>
 800915a:	2301      	movs	r3, #1
 800915c:	4a41      	ldr	r2, [pc, #260]	; (8009264 <_printf_float+0x30c>)
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	f43f af54 	beq.w	8009012 <_printf_float+0xba>
 800916a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916e:	429a      	cmp	r2, r3
 8009170:	db02      	blt.n	8009178 <_printf_float+0x220>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	07d8      	lsls	r0, r3, #31
 8009176:	d50f      	bpl.n	8009198 <_printf_float+0x240>
 8009178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f43f af45 	beq.w	8009012 <_printf_float+0xba>
 8009188:	f04f 0800 	mov.w	r8, #0
 800918c:	f104 091a 	add.w	r9, r4, #26
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	3b01      	subs	r3, #1
 8009194:	4543      	cmp	r3, r8
 8009196:	dc09      	bgt.n	80091ac <_printf_float+0x254>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	079b      	lsls	r3, r3, #30
 800919c:	f100 8103 	bmi.w	80093a6 <_printf_float+0x44e>
 80091a0:	68e0      	ldr	r0, [r4, #12]
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	4298      	cmp	r0, r3
 80091a6:	bfb8      	it	lt
 80091a8:	4618      	movlt	r0, r3
 80091aa:	e734      	b.n	8009016 <_printf_float+0xbe>
 80091ac:	2301      	movs	r3, #1
 80091ae:	464a      	mov	r2, r9
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af2b 	beq.w	8009012 <_printf_float+0xba>
 80091bc:	f108 0801 	add.w	r8, r8, #1
 80091c0:	e7e6      	b.n	8009190 <_printf_float+0x238>
 80091c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dc2b      	bgt.n	8009220 <_printf_float+0x2c8>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4a26      	ldr	r2, [pc, #152]	; (8009264 <_printf_float+0x30c>)
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f af1d 	beq.w	8009012 <_printf_float+0xba>
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	b923      	cbnz	r3, 80091e6 <_printf_float+0x28e>
 80091dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091de:	b913      	cbnz	r3, 80091e6 <_printf_float+0x28e>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	07d9      	lsls	r1, r3, #31
 80091e4:	d5d8      	bpl.n	8009198 <_printf_float+0x240>
 80091e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	f43f af0e 	beq.w	8009012 <_printf_float+0xba>
 80091f6:	f04f 0900 	mov.w	r9, #0
 80091fa:	f104 0a1a 	add.w	sl, r4, #26
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	425b      	negs	r3, r3
 8009202:	454b      	cmp	r3, r9
 8009204:	dc01      	bgt.n	800920a <_printf_float+0x2b2>
 8009206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009208:	e794      	b.n	8009134 <_printf_float+0x1dc>
 800920a:	2301      	movs	r3, #1
 800920c:	4652      	mov	r2, sl
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f aefc 	beq.w	8009012 <_printf_float+0xba>
 800921a:	f109 0901 	add.w	r9, r9, #1
 800921e:	e7ee      	b.n	80091fe <_printf_float+0x2a6>
 8009220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009224:	429a      	cmp	r2, r3
 8009226:	bfa8      	it	ge
 8009228:	461a      	movge	r2, r3
 800922a:	2a00      	cmp	r2, #0
 800922c:	4691      	mov	r9, r2
 800922e:	dd07      	ble.n	8009240 <_printf_float+0x2e8>
 8009230:	4613      	mov	r3, r2
 8009232:	4631      	mov	r1, r6
 8009234:	4642      	mov	r2, r8
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	f43f aee9 	beq.w	8009012 <_printf_float+0xba>
 8009240:	f104 031a 	add.w	r3, r4, #26
 8009244:	f04f 0b00 	mov.w	fp, #0
 8009248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800924c:	9306      	str	r3, [sp, #24]
 800924e:	e015      	b.n	800927c <_printf_float+0x324>
 8009250:	7fefffff 	.word	0x7fefffff
 8009254:	0800aeb0 	.word	0x0800aeb0
 8009258:	0800aeac 	.word	0x0800aeac
 800925c:	0800aeb8 	.word	0x0800aeb8
 8009260:	0800aeb4 	.word	0x0800aeb4
 8009264:	0800aebc 	.word	0x0800aebc
 8009268:	2301      	movs	r3, #1
 800926a:	9a06      	ldr	r2, [sp, #24]
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f aecd 	beq.w	8009012 <_printf_float+0xba>
 8009278:	f10b 0b01 	add.w	fp, fp, #1
 800927c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009280:	ebaa 0309 	sub.w	r3, sl, r9
 8009284:	455b      	cmp	r3, fp
 8009286:	dcef      	bgt.n	8009268 <_printf_float+0x310>
 8009288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800928c:	429a      	cmp	r2, r3
 800928e:	44d0      	add	r8, sl
 8009290:	db15      	blt.n	80092be <_printf_float+0x366>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	07da      	lsls	r2, r3, #31
 8009296:	d412      	bmi.n	80092be <_printf_float+0x366>
 8009298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800929c:	eba3 020a 	sub.w	r2, r3, sl
 80092a0:	eba3 0a01 	sub.w	sl, r3, r1
 80092a4:	4592      	cmp	sl, r2
 80092a6:	bfa8      	it	ge
 80092a8:	4692      	movge	sl, r2
 80092aa:	f1ba 0f00 	cmp.w	sl, #0
 80092ae:	dc0e      	bgt.n	80092ce <_printf_float+0x376>
 80092b0:	f04f 0800 	mov.w	r8, #0
 80092b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092b8:	f104 091a 	add.w	r9, r4, #26
 80092bc:	e019      	b.n	80092f2 <_printf_float+0x39a>
 80092be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c2:	4631      	mov	r1, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b8      	blx	r7
 80092c8:	3001      	adds	r0, #1
 80092ca:	d1e5      	bne.n	8009298 <_printf_float+0x340>
 80092cc:	e6a1      	b.n	8009012 <_printf_float+0xba>
 80092ce:	4653      	mov	r3, sl
 80092d0:	4642      	mov	r2, r8
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	d1e9      	bne.n	80092b0 <_printf_float+0x358>
 80092dc:	e699      	b.n	8009012 <_printf_float+0xba>
 80092de:	2301      	movs	r3, #1
 80092e0:	464a      	mov	r2, r9
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae92 	beq.w	8009012 <_printf_float+0xba>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	eba3 030a 	sub.w	r3, r3, sl
 80092fc:	4543      	cmp	r3, r8
 80092fe:	dcee      	bgt.n	80092de <_printf_float+0x386>
 8009300:	e74a      	b.n	8009198 <_printf_float+0x240>
 8009302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009304:	2a01      	cmp	r2, #1
 8009306:	dc01      	bgt.n	800930c <_printf_float+0x3b4>
 8009308:	07db      	lsls	r3, r3, #31
 800930a:	d53a      	bpl.n	8009382 <_printf_float+0x42a>
 800930c:	2301      	movs	r3, #1
 800930e:	4642      	mov	r2, r8
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f ae7b 	beq.w	8009012 <_printf_float+0xba>
 800931c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f108 0801 	add.w	r8, r8, #1
 800932c:	f43f ae71 	beq.w	8009012 <_printf_float+0xba>
 8009330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009332:	2200      	movs	r2, #0
 8009334:	f103 3aff 	add.w	sl, r3, #4294967295
 8009338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800933c:	2300      	movs	r3, #0
 800933e:	f7f7 fb93 	bl	8000a68 <__aeabi_dcmpeq>
 8009342:	b9c8      	cbnz	r0, 8009378 <_printf_float+0x420>
 8009344:	4653      	mov	r3, sl
 8009346:	4642      	mov	r2, r8
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	d10e      	bne.n	8009370 <_printf_float+0x418>
 8009352:	e65e      	b.n	8009012 <_printf_float+0xba>
 8009354:	2301      	movs	r3, #1
 8009356:	4652      	mov	r2, sl
 8009358:	4631      	mov	r1, r6
 800935a:	4628      	mov	r0, r5
 800935c:	47b8      	blx	r7
 800935e:	3001      	adds	r0, #1
 8009360:	f43f ae57 	beq.w	8009012 <_printf_float+0xba>
 8009364:	f108 0801 	add.w	r8, r8, #1
 8009368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936a:	3b01      	subs	r3, #1
 800936c:	4543      	cmp	r3, r8
 800936e:	dcf1      	bgt.n	8009354 <_printf_float+0x3fc>
 8009370:	464b      	mov	r3, r9
 8009372:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009376:	e6de      	b.n	8009136 <_printf_float+0x1de>
 8009378:	f04f 0800 	mov.w	r8, #0
 800937c:	f104 0a1a 	add.w	sl, r4, #26
 8009380:	e7f2      	b.n	8009368 <_printf_float+0x410>
 8009382:	2301      	movs	r3, #1
 8009384:	e7df      	b.n	8009346 <_printf_float+0x3ee>
 8009386:	2301      	movs	r3, #1
 8009388:	464a      	mov	r2, r9
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f ae3e 	beq.w	8009012 <_printf_float+0xba>
 8009396:	f108 0801 	add.w	r8, r8, #1
 800939a:	68e3      	ldr	r3, [r4, #12]
 800939c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	4543      	cmp	r3, r8
 80093a2:	dcf0      	bgt.n	8009386 <_printf_float+0x42e>
 80093a4:	e6fc      	b.n	80091a0 <_printf_float+0x248>
 80093a6:	f04f 0800 	mov.w	r8, #0
 80093aa:	f104 0919 	add.w	r9, r4, #25
 80093ae:	e7f4      	b.n	800939a <_printf_float+0x442>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	f43f ae8b 	beq.w	80090cc <_printf_float+0x174>
 80093b6:	2300      	movs	r3, #0
 80093b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80093bc:	ab09      	add	r3, sp, #36	; 0x24
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	ec49 8b10 	vmov	d0, r8, r9
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	f8cd a004 	str.w	sl, [sp, #4]
 80093ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093ce:	4628      	mov	r0, r5
 80093d0:	f7ff fd2d 	bl	8008e2e <__cvt>
 80093d4:	4680      	mov	r8, r0
 80093d6:	e648      	b.n	800906a <_printf_float+0x112>

080093d8 <_printf_common>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	4691      	mov	r9, r2
 80093de:	461f      	mov	r7, r3
 80093e0:	688a      	ldr	r2, [r1, #8]
 80093e2:	690b      	ldr	r3, [r1, #16]
 80093e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	bfb8      	it	lt
 80093ec:	4613      	movlt	r3, r2
 80093ee:	f8c9 3000 	str.w	r3, [r9]
 80093f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093f6:	4606      	mov	r6, r0
 80093f8:	460c      	mov	r4, r1
 80093fa:	b112      	cbz	r2, 8009402 <_printf_common+0x2a>
 80093fc:	3301      	adds	r3, #1
 80093fe:	f8c9 3000 	str.w	r3, [r9]
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	0699      	lsls	r1, r3, #26
 8009406:	bf42      	ittt	mi
 8009408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800940c:	3302      	addmi	r3, #2
 800940e:	f8c9 3000 	strmi.w	r3, [r9]
 8009412:	6825      	ldr	r5, [r4, #0]
 8009414:	f015 0506 	ands.w	r5, r5, #6
 8009418:	d107      	bne.n	800942a <_printf_common+0x52>
 800941a:	f104 0a19 	add.w	sl, r4, #25
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	f8d9 2000 	ldr.w	r2, [r9]
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	42ab      	cmp	r3, r5
 8009428:	dc28      	bgt.n	800947c <_printf_common+0xa4>
 800942a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800942e:	6822      	ldr	r2, [r4, #0]
 8009430:	3300      	adds	r3, #0
 8009432:	bf18      	it	ne
 8009434:	2301      	movne	r3, #1
 8009436:	0692      	lsls	r2, r2, #26
 8009438:	d42d      	bmi.n	8009496 <_printf_common+0xbe>
 800943a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800943e:	4639      	mov	r1, r7
 8009440:	4630      	mov	r0, r6
 8009442:	47c0      	blx	r8
 8009444:	3001      	adds	r0, #1
 8009446:	d020      	beq.n	800948a <_printf_common+0xb2>
 8009448:	6823      	ldr	r3, [r4, #0]
 800944a:	68e5      	ldr	r5, [r4, #12]
 800944c:	f8d9 2000 	ldr.w	r2, [r9]
 8009450:	f003 0306 	and.w	r3, r3, #6
 8009454:	2b04      	cmp	r3, #4
 8009456:	bf08      	it	eq
 8009458:	1aad      	subeq	r5, r5, r2
 800945a:	68a3      	ldr	r3, [r4, #8]
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	bf0c      	ite	eq
 8009460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009464:	2500      	movne	r5, #0
 8009466:	4293      	cmp	r3, r2
 8009468:	bfc4      	itt	gt
 800946a:	1a9b      	subgt	r3, r3, r2
 800946c:	18ed      	addgt	r5, r5, r3
 800946e:	f04f 0900 	mov.w	r9, #0
 8009472:	341a      	adds	r4, #26
 8009474:	454d      	cmp	r5, r9
 8009476:	d11a      	bne.n	80094ae <_printf_common+0xd6>
 8009478:	2000      	movs	r0, #0
 800947a:	e008      	b.n	800948e <_printf_common+0xb6>
 800947c:	2301      	movs	r3, #1
 800947e:	4652      	mov	r2, sl
 8009480:	4639      	mov	r1, r7
 8009482:	4630      	mov	r0, r6
 8009484:	47c0      	blx	r8
 8009486:	3001      	adds	r0, #1
 8009488:	d103      	bne.n	8009492 <_printf_common+0xba>
 800948a:	f04f 30ff 	mov.w	r0, #4294967295
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	3501      	adds	r5, #1
 8009494:	e7c3      	b.n	800941e <_printf_common+0x46>
 8009496:	18e1      	adds	r1, r4, r3
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	2030      	movs	r0, #48	; 0x30
 800949c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094a0:	4422      	add	r2, r4
 80094a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094aa:	3302      	adds	r3, #2
 80094ac:	e7c5      	b.n	800943a <_printf_common+0x62>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4622      	mov	r2, r4
 80094b2:	4639      	mov	r1, r7
 80094b4:	4630      	mov	r0, r6
 80094b6:	47c0      	blx	r8
 80094b8:	3001      	adds	r0, #1
 80094ba:	d0e6      	beq.n	800948a <_printf_common+0xb2>
 80094bc:	f109 0901 	add.w	r9, r9, #1
 80094c0:	e7d8      	b.n	8009474 <_printf_common+0x9c>

080094c2 <quorem>:
 80094c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c6:	6903      	ldr	r3, [r0, #16]
 80094c8:	690c      	ldr	r4, [r1, #16]
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	4680      	mov	r8, r0
 80094ce:	f2c0 8082 	blt.w	80095d6 <quorem+0x114>
 80094d2:	3c01      	subs	r4, #1
 80094d4:	f101 0714 	add.w	r7, r1, #20
 80094d8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80094dc:	f100 0614 	add.w	r6, r0, #20
 80094e0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80094e4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80094e8:	eb06 030c 	add.w	r3, r6, ip
 80094ec:	3501      	adds	r5, #1
 80094ee:	eb07 090c 	add.w	r9, r7, ip
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80094f8:	b395      	cbz	r5, 8009560 <quorem+0x9e>
 80094fa:	f04f 0a00 	mov.w	sl, #0
 80094fe:	4638      	mov	r0, r7
 8009500:	46b6      	mov	lr, r6
 8009502:	46d3      	mov	fp, sl
 8009504:	f850 2b04 	ldr.w	r2, [r0], #4
 8009508:	b293      	uxth	r3, r2
 800950a:	fb05 a303 	mla	r3, r5, r3, sl
 800950e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009512:	b29b      	uxth	r3, r3
 8009514:	ebab 0303 	sub.w	r3, fp, r3
 8009518:	0c12      	lsrs	r2, r2, #16
 800951a:	f8de b000 	ldr.w	fp, [lr]
 800951e:	fb05 a202 	mla	r2, r5, r2, sl
 8009522:	fa13 f38b 	uxtah	r3, r3, fp
 8009526:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800952a:	fa1f fb82 	uxth.w	fp, r2
 800952e:	f8de 2000 	ldr.w	r2, [lr]
 8009532:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009536:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009540:	4581      	cmp	r9, r0
 8009542:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009546:	f84e 3b04 	str.w	r3, [lr], #4
 800954a:	d2db      	bcs.n	8009504 <quorem+0x42>
 800954c:	f856 300c 	ldr.w	r3, [r6, ip]
 8009550:	b933      	cbnz	r3, 8009560 <quorem+0x9e>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	3b04      	subs	r3, #4
 8009556:	429e      	cmp	r6, r3
 8009558:	461a      	mov	r2, r3
 800955a:	d330      	bcc.n	80095be <quorem+0xfc>
 800955c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009560:	4640      	mov	r0, r8
 8009562:	f001 f821 	bl	800a5a8 <__mcmp>
 8009566:	2800      	cmp	r0, #0
 8009568:	db25      	blt.n	80095b6 <quorem+0xf4>
 800956a:	3501      	adds	r5, #1
 800956c:	4630      	mov	r0, r6
 800956e:	f04f 0c00 	mov.w	ip, #0
 8009572:	f857 2b04 	ldr.w	r2, [r7], #4
 8009576:	f8d0 e000 	ldr.w	lr, [r0]
 800957a:	b293      	uxth	r3, r2
 800957c:	ebac 0303 	sub.w	r3, ip, r3
 8009580:	0c12      	lsrs	r2, r2, #16
 8009582:	fa13 f38e 	uxtah	r3, r3, lr
 8009586:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800958a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009594:	45b9      	cmp	r9, r7
 8009596:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800959a:	f840 3b04 	str.w	r3, [r0], #4
 800959e:	d2e8      	bcs.n	8009572 <quorem+0xb0>
 80095a0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80095a4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80095a8:	b92a      	cbnz	r2, 80095b6 <quorem+0xf4>
 80095aa:	3b04      	subs	r3, #4
 80095ac:	429e      	cmp	r6, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	d30b      	bcc.n	80095ca <quorem+0x108>
 80095b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80095b6:	4628      	mov	r0, r5
 80095b8:	b003      	add	sp, #12
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	6812      	ldr	r2, [r2, #0]
 80095c0:	3b04      	subs	r3, #4
 80095c2:	2a00      	cmp	r2, #0
 80095c4:	d1ca      	bne.n	800955c <quorem+0x9a>
 80095c6:	3c01      	subs	r4, #1
 80095c8:	e7c5      	b.n	8009556 <quorem+0x94>
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	3b04      	subs	r3, #4
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	d1ef      	bne.n	80095b2 <quorem+0xf0>
 80095d2:	3c01      	subs	r4, #1
 80095d4:	e7ea      	b.n	80095ac <quorem+0xea>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e7ee      	b.n	80095b8 <quorem+0xf6>
 80095da:	0000      	movs	r0, r0
 80095dc:	0000      	movs	r0, r0
	...

080095e0 <_dtoa_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	ec57 6b10 	vmov	r6, r7, d0
 80095e8:	b097      	sub	sp, #92	; 0x5c
 80095ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095ec:	9106      	str	r1, [sp, #24]
 80095ee:	4604      	mov	r4, r0
 80095f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80095f2:	9312      	str	r3, [sp, #72]	; 0x48
 80095f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095f8:	e9cd 6700 	strd	r6, r7, [sp]
 80095fc:	b93d      	cbnz	r5, 800960e <_dtoa_r+0x2e>
 80095fe:	2010      	movs	r0, #16
 8009600:	f000 fdb4 	bl	800a16c <malloc>
 8009604:	6260      	str	r0, [r4, #36]	; 0x24
 8009606:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800960a:	6005      	str	r5, [r0, #0]
 800960c:	60c5      	str	r5, [r0, #12]
 800960e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009610:	6819      	ldr	r1, [r3, #0]
 8009612:	b151      	cbz	r1, 800962a <_dtoa_r+0x4a>
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	604a      	str	r2, [r1, #4]
 8009618:	2301      	movs	r3, #1
 800961a:	4093      	lsls	r3, r2
 800961c:	608b      	str	r3, [r1, #8]
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fde0 	bl	800a1e4 <_Bfree>
 8009624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	1e3b      	subs	r3, r7, #0
 800962c:	bfbb      	ittet	lt
 800962e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009632:	9301      	strlt	r3, [sp, #4]
 8009634:	2300      	movge	r3, #0
 8009636:	2201      	movlt	r2, #1
 8009638:	bfac      	ite	ge
 800963a:	f8c8 3000 	strge.w	r3, [r8]
 800963e:	f8c8 2000 	strlt.w	r2, [r8]
 8009642:	4baf      	ldr	r3, [pc, #700]	; (8009900 <_dtoa_r+0x320>)
 8009644:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009648:	ea33 0308 	bics.w	r3, r3, r8
 800964c:	d114      	bne.n	8009678 <_dtoa_r+0x98>
 800964e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009650:	f242 730f 	movw	r3, #9999	; 0x270f
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	b923      	cbnz	r3, 8009664 <_dtoa_r+0x84>
 800965a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800965e:	2800      	cmp	r0, #0
 8009660:	f000 8542 	beq.w	800a0e8 <_dtoa_r+0xb08>
 8009664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009666:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009914 <_dtoa_r+0x334>
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 8544 	beq.w	800a0f8 <_dtoa_r+0xb18>
 8009670:	f10b 0303 	add.w	r3, fp, #3
 8009674:	f000 bd3e 	b.w	800a0f4 <_dtoa_r+0xb14>
 8009678:	e9dd 6700 	ldrd	r6, r7, [sp]
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f7 f9f0 	bl	8000a68 <__aeabi_dcmpeq>
 8009688:	4681      	mov	r9, r0
 800968a:	b168      	cbz	r0, 80096a8 <_dtoa_r+0xc8>
 800968c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800968e:	2301      	movs	r3, #1
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 8524 	beq.w	800a0e2 <_dtoa_r+0xb02>
 800969a:	4b9a      	ldr	r3, [pc, #616]	; (8009904 <_dtoa_r+0x324>)
 800969c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800969e:	f103 3bff 	add.w	fp, r3, #4294967295
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	f000 bd28 	b.w	800a0f8 <_dtoa_r+0xb18>
 80096a8:	aa14      	add	r2, sp, #80	; 0x50
 80096aa:	a915      	add	r1, sp, #84	; 0x54
 80096ac:	ec47 6b10 	vmov	d0, r6, r7
 80096b0:	4620      	mov	r0, r4
 80096b2:	f000 fff0 	bl	800a696 <__d2b>
 80096b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80096ba:	9004      	str	r0, [sp, #16]
 80096bc:	2d00      	cmp	r5, #0
 80096be:	d07c      	beq.n	80097ba <_dtoa_r+0x1da>
 80096c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80096c8:	46b2      	mov	sl, r6
 80096ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80096ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80096d6:	2200      	movs	r2, #0
 80096d8:	4b8b      	ldr	r3, [pc, #556]	; (8009908 <_dtoa_r+0x328>)
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f7f6 fda3 	bl	8000228 <__aeabi_dsub>
 80096e2:	a381      	add	r3, pc, #516	; (adr r3, 80098e8 <_dtoa_r+0x308>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f7f6 ff56 	bl	8000598 <__aeabi_dmul>
 80096ec:	a380      	add	r3, pc, #512	; (adr r3, 80098f0 <_dtoa_r+0x310>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fd9b 	bl	800022c <__adddf3>
 80096f6:	4606      	mov	r6, r0
 80096f8:	4628      	mov	r0, r5
 80096fa:	460f      	mov	r7, r1
 80096fc:	f7f6 fee2 	bl	80004c4 <__aeabi_i2d>
 8009700:	a37d      	add	r3, pc, #500	; (adr r3, 80098f8 <_dtoa_r+0x318>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff47 	bl	8000598 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fd8b 	bl	800022c <__adddf3>
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	f7f7 f9ed 	bl	8000af8 <__aeabi_d2iz>
 800971e:	2200      	movs	r2, #0
 8009720:	4682      	mov	sl, r0
 8009722:	2300      	movs	r3, #0
 8009724:	4630      	mov	r0, r6
 8009726:	4639      	mov	r1, r7
 8009728:	f7f7 f9a8 	bl	8000a7c <__aeabi_dcmplt>
 800972c:	b148      	cbz	r0, 8009742 <_dtoa_r+0x162>
 800972e:	4650      	mov	r0, sl
 8009730:	f7f6 fec8 	bl	80004c4 <__aeabi_i2d>
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	f7f7 f996 	bl	8000a68 <__aeabi_dcmpeq>
 800973c:	b908      	cbnz	r0, 8009742 <_dtoa_r+0x162>
 800973e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009742:	f1ba 0f16 	cmp.w	sl, #22
 8009746:	d859      	bhi.n	80097fc <_dtoa_r+0x21c>
 8009748:	4970      	ldr	r1, [pc, #448]	; (800990c <_dtoa_r+0x32c>)
 800974a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800974e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009756:	f7f7 f9af 	bl	8000ab8 <__aeabi_dcmpgt>
 800975a:	2800      	cmp	r0, #0
 800975c:	d050      	beq.n	8009800 <_dtoa_r+0x220>
 800975e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009762:	2300      	movs	r3, #0
 8009764:	930f      	str	r3, [sp, #60]	; 0x3c
 8009766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009768:	1b5d      	subs	r5, r3, r5
 800976a:	f1b5 0801 	subs.w	r8, r5, #1
 800976e:	bf49      	itett	mi
 8009770:	f1c5 0301 	rsbmi	r3, r5, #1
 8009774:	2300      	movpl	r3, #0
 8009776:	9305      	strmi	r3, [sp, #20]
 8009778:	f04f 0800 	movmi.w	r8, #0
 800977c:	bf58      	it	pl
 800977e:	9305      	strpl	r3, [sp, #20]
 8009780:	f1ba 0f00 	cmp.w	sl, #0
 8009784:	db3e      	blt.n	8009804 <_dtoa_r+0x224>
 8009786:	2300      	movs	r3, #0
 8009788:	44d0      	add	r8, sl
 800978a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	9b06      	ldr	r3, [sp, #24]
 8009792:	2b09      	cmp	r3, #9
 8009794:	f200 8090 	bhi.w	80098b8 <_dtoa_r+0x2d8>
 8009798:	2b05      	cmp	r3, #5
 800979a:	bfc4      	itt	gt
 800979c:	3b04      	subgt	r3, #4
 800979e:	9306      	strgt	r3, [sp, #24]
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	f1a3 0302 	sub.w	r3, r3, #2
 80097a6:	bfcc      	ite	gt
 80097a8:	2500      	movgt	r5, #0
 80097aa:	2501      	movle	r5, #1
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	f200 808f 	bhi.w	80098d0 <_dtoa_r+0x2f0>
 80097b2:	e8df f003 	tbb	[pc, r3]
 80097b6:	7f7d      	.short	0x7f7d
 80097b8:	7131      	.short	0x7131
 80097ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80097be:	441d      	add	r5, r3
 80097c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80097c4:	2820      	cmp	r0, #32
 80097c6:	dd13      	ble.n	80097f0 <_dtoa_r+0x210>
 80097c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80097cc:	9b00      	ldr	r3, [sp, #0]
 80097ce:	fa08 f800 	lsl.w	r8, r8, r0
 80097d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80097d6:	fa23 f000 	lsr.w	r0, r3, r0
 80097da:	ea48 0000 	orr.w	r0, r8, r0
 80097de:	f7f6 fe61 	bl	80004a4 <__aeabi_ui2d>
 80097e2:	2301      	movs	r3, #1
 80097e4:	4682      	mov	sl, r0
 80097e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80097ea:	3d01      	subs	r5, #1
 80097ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80097ee:	e772      	b.n	80096d6 <_dtoa_r+0xf6>
 80097f0:	9b00      	ldr	r3, [sp, #0]
 80097f2:	f1c0 0020 	rsb	r0, r0, #32
 80097f6:	fa03 f000 	lsl.w	r0, r3, r0
 80097fa:	e7f0      	b.n	80097de <_dtoa_r+0x1fe>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e7b1      	b.n	8009764 <_dtoa_r+0x184>
 8009800:	900f      	str	r0, [sp, #60]	; 0x3c
 8009802:	e7b0      	b.n	8009766 <_dtoa_r+0x186>
 8009804:	9b05      	ldr	r3, [sp, #20]
 8009806:	eba3 030a 	sub.w	r3, r3, sl
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	f1ca 0300 	rsb	r3, sl, #0
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	2300      	movs	r3, #0
 8009814:	930e      	str	r3, [sp, #56]	; 0x38
 8009816:	e7bb      	b.n	8009790 <_dtoa_r+0x1b0>
 8009818:	2301      	movs	r3, #1
 800981a:	930a      	str	r3, [sp, #40]	; 0x28
 800981c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd59      	ble.n	80098d6 <_dtoa_r+0x2f6>
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	4699      	mov	r9, r3
 8009826:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009828:	2200      	movs	r2, #0
 800982a:	6072      	str	r2, [r6, #4]
 800982c:	2204      	movs	r2, #4
 800982e:	f102 0014 	add.w	r0, r2, #20
 8009832:	4298      	cmp	r0, r3
 8009834:	6871      	ldr	r1, [r6, #4]
 8009836:	d953      	bls.n	80098e0 <_dtoa_r+0x300>
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fc9f 	bl	800a17c <_Balloc>
 800983e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009840:	6030      	str	r0, [r6, #0]
 8009842:	f1b9 0f0e 	cmp.w	r9, #14
 8009846:	f8d3 b000 	ldr.w	fp, [r3]
 800984a:	f200 80e6 	bhi.w	8009a1a <_dtoa_r+0x43a>
 800984e:	2d00      	cmp	r5, #0
 8009850:	f000 80e3 	beq.w	8009a1a <_dtoa_r+0x43a>
 8009854:	ed9d 7b00 	vldr	d7, [sp]
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009860:	dd74      	ble.n	800994c <_dtoa_r+0x36c>
 8009862:	4a2a      	ldr	r2, [pc, #168]	; (800990c <_dtoa_r+0x32c>)
 8009864:	f00a 030f 	and.w	r3, sl, #15
 8009868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800986c:	ed93 7b00 	vldr	d7, [r3]
 8009870:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009874:	06f0      	lsls	r0, r6, #27
 8009876:	ed8d 7b08 	vstr	d7, [sp, #32]
 800987a:	d565      	bpl.n	8009948 <_dtoa_r+0x368>
 800987c:	4b24      	ldr	r3, [pc, #144]	; (8009910 <_dtoa_r+0x330>)
 800987e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009882:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009886:	f7f6 ffb1 	bl	80007ec <__aeabi_ddiv>
 800988a:	e9cd 0100 	strd	r0, r1, [sp]
 800988e:	f006 060f 	and.w	r6, r6, #15
 8009892:	2503      	movs	r5, #3
 8009894:	4f1e      	ldr	r7, [pc, #120]	; (8009910 <_dtoa_r+0x330>)
 8009896:	e04c      	b.n	8009932 <_dtoa_r+0x352>
 8009898:	2301      	movs	r3, #1
 800989a:	930a      	str	r3, [sp, #40]	; 0x28
 800989c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989e:	4453      	add	r3, sl
 80098a0:	f103 0901 	add.w	r9, r3, #1
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	464b      	mov	r3, r9
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	bfb8      	it	lt
 80098ac:	2301      	movlt	r3, #1
 80098ae:	e7ba      	b.n	8009826 <_dtoa_r+0x246>
 80098b0:	2300      	movs	r3, #0
 80098b2:	e7b2      	b.n	800981a <_dtoa_r+0x23a>
 80098b4:	2300      	movs	r3, #0
 80098b6:	e7f0      	b.n	800989a <_dtoa_r+0x2ba>
 80098b8:	2501      	movs	r5, #1
 80098ba:	2300      	movs	r3, #0
 80098bc:	9306      	str	r3, [sp, #24]
 80098be:	950a      	str	r5, [sp, #40]	; 0x28
 80098c0:	f04f 33ff 	mov.w	r3, #4294967295
 80098c4:	9302      	str	r3, [sp, #8]
 80098c6:	4699      	mov	r9, r3
 80098c8:	2200      	movs	r2, #0
 80098ca:	2312      	movs	r3, #18
 80098cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80098ce:	e7aa      	b.n	8009826 <_dtoa_r+0x246>
 80098d0:	2301      	movs	r3, #1
 80098d2:	930a      	str	r3, [sp, #40]	; 0x28
 80098d4:	e7f4      	b.n	80098c0 <_dtoa_r+0x2e0>
 80098d6:	2301      	movs	r3, #1
 80098d8:	9302      	str	r3, [sp, #8]
 80098da:	4699      	mov	r9, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	e7f5      	b.n	80098cc <_dtoa_r+0x2ec>
 80098e0:	3101      	adds	r1, #1
 80098e2:	6071      	str	r1, [r6, #4]
 80098e4:	0052      	lsls	r2, r2, #1
 80098e6:	e7a2      	b.n	800982e <_dtoa_r+0x24e>
 80098e8:	636f4361 	.word	0x636f4361
 80098ec:	3fd287a7 	.word	0x3fd287a7
 80098f0:	8b60c8b3 	.word	0x8b60c8b3
 80098f4:	3fc68a28 	.word	0x3fc68a28
 80098f8:	509f79fb 	.word	0x509f79fb
 80098fc:	3fd34413 	.word	0x3fd34413
 8009900:	7ff00000 	.word	0x7ff00000
 8009904:	0800aebd 	.word	0x0800aebd
 8009908:	3ff80000 	.word	0x3ff80000
 800990c:	0800aef8 	.word	0x0800aef8
 8009910:	0800aed0 	.word	0x0800aed0
 8009914:	0800aec7 	.word	0x0800aec7
 8009918:	07f1      	lsls	r1, r6, #31
 800991a:	d508      	bpl.n	800992e <_dtoa_r+0x34e>
 800991c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009924:	f7f6 fe38 	bl	8000598 <__aeabi_dmul>
 8009928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800992c:	3501      	adds	r5, #1
 800992e:	1076      	asrs	r6, r6, #1
 8009930:	3708      	adds	r7, #8
 8009932:	2e00      	cmp	r6, #0
 8009934:	d1f0      	bne.n	8009918 <_dtoa_r+0x338>
 8009936:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800993a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800993e:	f7f6 ff55 	bl	80007ec <__aeabi_ddiv>
 8009942:	e9cd 0100 	strd	r0, r1, [sp]
 8009946:	e01a      	b.n	800997e <_dtoa_r+0x39e>
 8009948:	2502      	movs	r5, #2
 800994a:	e7a3      	b.n	8009894 <_dtoa_r+0x2b4>
 800994c:	f000 80a0 	beq.w	8009a90 <_dtoa_r+0x4b0>
 8009950:	f1ca 0600 	rsb	r6, sl, #0
 8009954:	4b9f      	ldr	r3, [pc, #636]	; (8009bd4 <_dtoa_r+0x5f4>)
 8009956:	4fa0      	ldr	r7, [pc, #640]	; (8009bd8 <_dtoa_r+0x5f8>)
 8009958:	f006 020f 	and.w	r2, r6, #15
 800995c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009968:	f7f6 fe16 	bl	8000598 <__aeabi_dmul>
 800996c:	e9cd 0100 	strd	r0, r1, [sp]
 8009970:	1136      	asrs	r6, r6, #4
 8009972:	2300      	movs	r3, #0
 8009974:	2502      	movs	r5, #2
 8009976:	2e00      	cmp	r6, #0
 8009978:	d17f      	bne.n	8009a7a <_dtoa_r+0x49a>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e1      	bne.n	8009942 <_dtoa_r+0x362>
 800997e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 8087 	beq.w	8009a94 <_dtoa_r+0x4b4>
 8009986:	e9dd 6700 	ldrd	r6, r7, [sp]
 800998a:	2200      	movs	r2, #0
 800998c:	4b93      	ldr	r3, [pc, #588]	; (8009bdc <_dtoa_r+0x5fc>)
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f7 f873 	bl	8000a7c <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d07c      	beq.n	8009a94 <_dtoa_r+0x4b4>
 800999a:	f1b9 0f00 	cmp.w	r9, #0
 800999e:	d079      	beq.n	8009a94 <_dtoa_r+0x4b4>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd35      	ble.n	8009a12 <_dtoa_r+0x432>
 80099a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099aa:	9308      	str	r3, [sp, #32]
 80099ac:	4639      	mov	r1, r7
 80099ae:	2200      	movs	r2, #0
 80099b0:	4b8b      	ldr	r3, [pc, #556]	; (8009be0 <_dtoa_r+0x600>)
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7f6 fdf0 	bl	8000598 <__aeabi_dmul>
 80099b8:	e9cd 0100 	strd	r0, r1, [sp]
 80099bc:	9f02      	ldr	r7, [sp, #8]
 80099be:	3501      	adds	r5, #1
 80099c0:	4628      	mov	r0, r5
 80099c2:	f7f6 fd7f 	bl	80004c4 <__aeabi_i2d>
 80099c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ca:	f7f6 fde5 	bl	8000598 <__aeabi_dmul>
 80099ce:	2200      	movs	r2, #0
 80099d0:	4b84      	ldr	r3, [pc, #528]	; (8009be4 <_dtoa_r+0x604>)
 80099d2:	f7f6 fc2b 	bl	800022c <__adddf3>
 80099d6:	4605      	mov	r5, r0
 80099d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80099dc:	2f00      	cmp	r7, #0
 80099de:	d15d      	bne.n	8009a9c <_dtoa_r+0x4bc>
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b81      	ldr	r3, [pc, #516]	; (8009be8 <_dtoa_r+0x608>)
 80099e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e8:	f7f6 fc1e 	bl	8000228 <__aeabi_dsub>
 80099ec:	462a      	mov	r2, r5
 80099ee:	4633      	mov	r3, r6
 80099f0:	e9cd 0100 	strd	r0, r1, [sp]
 80099f4:	f7f7 f860 	bl	8000ab8 <__aeabi_dcmpgt>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 8288 	bne.w	8009f0e <_dtoa_r+0x92e>
 80099fe:	462a      	mov	r2, r5
 8009a00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a08:	f7f7 f838 	bl	8000a7c <__aeabi_dcmplt>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f040 827c 	bne.w	8009f0a <_dtoa_r+0x92a>
 8009a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a16:	e9cd 2300 	strd	r2, r3, [sp]
 8009a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f2c0 8150 	blt.w	8009cc2 <_dtoa_r+0x6e2>
 8009a22:	f1ba 0f0e 	cmp.w	sl, #14
 8009a26:	f300 814c 	bgt.w	8009cc2 <_dtoa_r+0x6e2>
 8009a2a:	4b6a      	ldr	r3, [pc, #424]	; (8009bd4 <_dtoa_r+0x5f4>)
 8009a2c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a30:	ed93 7b00 	vldr	d7, [r3]
 8009a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a3c:	f280 80d8 	bge.w	8009bf0 <_dtoa_r+0x610>
 8009a40:	f1b9 0f00 	cmp.w	r9, #0
 8009a44:	f300 80d4 	bgt.w	8009bf0 <_dtoa_r+0x610>
 8009a48:	f040 825e 	bne.w	8009f08 <_dtoa_r+0x928>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4b66      	ldr	r3, [pc, #408]	; (8009be8 <_dtoa_r+0x608>)
 8009a50:	ec51 0b17 	vmov	r0, r1, d7
 8009a54:	f7f6 fda0 	bl	8000598 <__aeabi_dmul>
 8009a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5c:	f7f7 f822 	bl	8000aa4 <__aeabi_dcmpge>
 8009a60:	464f      	mov	r7, r9
 8009a62:	464e      	mov	r6, r9
 8009a64:	2800      	cmp	r0, #0
 8009a66:	f040 8234 	bne.w	8009ed2 <_dtoa_r+0x8f2>
 8009a6a:	2331      	movs	r3, #49	; 0x31
 8009a6c:	f10b 0501 	add.w	r5, fp, #1
 8009a70:	f88b 3000 	strb.w	r3, [fp]
 8009a74:	f10a 0a01 	add.w	sl, sl, #1
 8009a78:	e22f      	b.n	8009eda <_dtoa_r+0x8fa>
 8009a7a:	07f2      	lsls	r2, r6, #31
 8009a7c:	d505      	bpl.n	8009a8a <_dtoa_r+0x4aa>
 8009a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a82:	f7f6 fd89 	bl	8000598 <__aeabi_dmul>
 8009a86:	3501      	adds	r5, #1
 8009a88:	2301      	movs	r3, #1
 8009a8a:	1076      	asrs	r6, r6, #1
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	e772      	b.n	8009976 <_dtoa_r+0x396>
 8009a90:	2502      	movs	r5, #2
 8009a92:	e774      	b.n	800997e <_dtoa_r+0x39e>
 8009a94:	f8cd a020 	str.w	sl, [sp, #32]
 8009a98:	464f      	mov	r7, r9
 8009a9a:	e791      	b.n	80099c0 <_dtoa_r+0x3e0>
 8009a9c:	4b4d      	ldr	r3, [pc, #308]	; (8009bd4 <_dtoa_r+0x5f4>)
 8009a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009aa2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d047      	beq.n	8009b3c <_dtoa_r+0x55c>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	494e      	ldr	r1, [pc, #312]	; (8009bec <_dtoa_r+0x60c>)
 8009ab4:	f7f6 fe9a 	bl	80007ec <__aeabi_ddiv>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4633      	mov	r3, r6
 8009abc:	f7f6 fbb4 	bl	8000228 <__aeabi_dsub>
 8009ac0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009ac4:	465d      	mov	r5, fp
 8009ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aca:	f7f7 f815 	bl	8000af8 <__aeabi_d2iz>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	f7f6 fcf8 	bl	80004c4 <__aeabi_i2d>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009adc:	f7f6 fba4 	bl	8000228 <__aeabi_dsub>
 8009ae0:	3630      	adds	r6, #48	; 0x30
 8009ae2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009aea:	e9cd 0100 	strd	r0, r1, [sp]
 8009aee:	f7f6 ffc5 	bl	8000a7c <__aeabi_dcmplt>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d163      	bne.n	8009bbe <_dtoa_r+0x5de>
 8009af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afa:	2000      	movs	r0, #0
 8009afc:	4937      	ldr	r1, [pc, #220]	; (8009bdc <_dtoa_r+0x5fc>)
 8009afe:	f7f6 fb93 	bl	8000228 <__aeabi_dsub>
 8009b02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b06:	f7f6 ffb9 	bl	8000a7c <__aeabi_dcmplt>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f040 80b7 	bne.w	8009c7e <_dtoa_r+0x69e>
 8009b10:	eba5 030b 	sub.w	r3, r5, fp
 8009b14:	429f      	cmp	r7, r3
 8009b16:	f77f af7c 	ble.w	8009a12 <_dtoa_r+0x432>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	4b30      	ldr	r3, [pc, #192]	; (8009be0 <_dtoa_r+0x600>)
 8009b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b22:	f7f6 fd39 	bl	8000598 <__aeabi_dmul>
 8009b26:	2200      	movs	r2, #0
 8009b28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b2c:	4b2c      	ldr	r3, [pc, #176]	; (8009be0 <_dtoa_r+0x600>)
 8009b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b32:	f7f6 fd31 	bl	8000598 <__aeabi_dmul>
 8009b36:	e9cd 0100 	strd	r0, r1, [sp]
 8009b3a:	e7c4      	b.n	8009ac6 <_dtoa_r+0x4e6>
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	4633      	mov	r3, r6
 8009b40:	f7f6 fd2a 	bl	8000598 <__aeabi_dmul>
 8009b44:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b48:	eb0b 0507 	add.w	r5, fp, r7
 8009b4c:	465e      	mov	r6, fp
 8009b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b52:	f7f6 ffd1 	bl	8000af8 <__aeabi_d2iz>
 8009b56:	4607      	mov	r7, r0
 8009b58:	f7f6 fcb4 	bl	80004c4 <__aeabi_i2d>
 8009b5c:	3730      	adds	r7, #48	; 0x30
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b66:	f7f6 fb5f 	bl	8000228 <__aeabi_dsub>
 8009b6a:	f806 7b01 	strb.w	r7, [r6], #1
 8009b6e:	42ae      	cmp	r6, r5
 8009b70:	e9cd 0100 	strd	r0, r1, [sp]
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	d126      	bne.n	8009bc8 <_dtoa_r+0x5e8>
 8009b7a:	4b1c      	ldr	r3, [pc, #112]	; (8009bec <_dtoa_r+0x60c>)
 8009b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b80:	f7f6 fb54 	bl	800022c <__adddf3>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b8c:	f7f6 ff94 	bl	8000ab8 <__aeabi_dcmpgt>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d174      	bne.n	8009c7e <_dtoa_r+0x69e>
 8009b94:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b98:	2000      	movs	r0, #0
 8009b9a:	4914      	ldr	r1, [pc, #80]	; (8009bec <_dtoa_r+0x60c>)
 8009b9c:	f7f6 fb44 	bl	8000228 <__aeabi_dsub>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ba8:	f7f6 ff68 	bl	8000a7c <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f43f af30 	beq.w	8009a12 <_dtoa_r+0x432>
 8009bb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bb6:	2b30      	cmp	r3, #48	; 0x30
 8009bb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009bbc:	d002      	beq.n	8009bc4 <_dtoa_r+0x5e4>
 8009bbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009bc2:	e04a      	b.n	8009c5a <_dtoa_r+0x67a>
 8009bc4:	4615      	mov	r5, r2
 8009bc6:	e7f4      	b.n	8009bb2 <_dtoa_r+0x5d2>
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <_dtoa_r+0x600>)
 8009bca:	f7f6 fce5 	bl	8000598 <__aeabi_dmul>
 8009bce:	e9cd 0100 	strd	r0, r1, [sp]
 8009bd2:	e7bc      	b.n	8009b4e <_dtoa_r+0x56e>
 8009bd4:	0800aef8 	.word	0x0800aef8
 8009bd8:	0800aed0 	.word	0x0800aed0
 8009bdc:	3ff00000 	.word	0x3ff00000
 8009be0:	40240000 	.word	0x40240000
 8009be4:	401c0000 	.word	0x401c0000
 8009be8:	40140000 	.word	0x40140000
 8009bec:	3fe00000 	.word	0x3fe00000
 8009bf0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bf4:	465d      	mov	r5, fp
 8009bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 fdf5 	bl	80007ec <__aeabi_ddiv>
 8009c02:	f7f6 ff79 	bl	8000af8 <__aeabi_d2iz>
 8009c06:	4680      	mov	r8, r0
 8009c08:	f7f6 fc5c 	bl	80004c4 <__aeabi_i2d>
 8009c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c10:	f7f6 fcc2 	bl	8000598 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009c20:	f7f6 fb02 	bl	8000228 <__aeabi_dsub>
 8009c24:	f805 6b01 	strb.w	r6, [r5], #1
 8009c28:	eba5 060b 	sub.w	r6, r5, fp
 8009c2c:	45b1      	cmp	r9, r6
 8009c2e:	4602      	mov	r2, r0
 8009c30:	460b      	mov	r3, r1
 8009c32:	d139      	bne.n	8009ca8 <_dtoa_r+0x6c8>
 8009c34:	f7f6 fafa 	bl	800022c <__adddf3>
 8009c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	f7f6 ff3a 	bl	8000ab8 <__aeabi_dcmpgt>
 8009c44:	b9c8      	cbnz	r0, 8009c7a <_dtoa_r+0x69a>
 8009c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 ff0b 	bl	8000a68 <__aeabi_dcmpeq>
 8009c52:	b110      	cbz	r0, 8009c5a <_dtoa_r+0x67a>
 8009c54:	f018 0f01 	tst.w	r8, #1
 8009c58:	d10f      	bne.n	8009c7a <_dtoa_r+0x69a>
 8009c5a:	9904      	ldr	r1, [sp, #16]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f000 fac1 	bl	800a1e4 <_Bfree>
 8009c62:	2300      	movs	r3, #0
 8009c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c66:	702b      	strb	r3, [r5, #0]
 8009c68:	f10a 0301 	add.w	r3, sl, #1
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 8241 	beq.w	800a0f8 <_dtoa_r+0xb18>
 8009c76:	601d      	str	r5, [r3, #0]
 8009c78:	e23e      	b.n	800a0f8 <_dtoa_r+0xb18>
 8009c7a:	f8cd a020 	str.w	sl, [sp, #32]
 8009c7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c82:	2a39      	cmp	r2, #57	; 0x39
 8009c84:	f105 33ff 	add.w	r3, r5, #4294967295
 8009c88:	d108      	bne.n	8009c9c <_dtoa_r+0x6bc>
 8009c8a:	459b      	cmp	fp, r3
 8009c8c:	d10a      	bne.n	8009ca4 <_dtoa_r+0x6c4>
 8009c8e:	9b08      	ldr	r3, [sp, #32]
 8009c90:	3301      	adds	r3, #1
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	2330      	movs	r3, #48	; 0x30
 8009c96:	f88b 3000 	strb.w	r3, [fp]
 8009c9a:	465b      	mov	r3, fp
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	e78c      	b.n	8009bbe <_dtoa_r+0x5de>
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	e7ea      	b.n	8009c7e <_dtoa_r+0x69e>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4b9b      	ldr	r3, [pc, #620]	; (8009f18 <_dtoa_r+0x938>)
 8009cac:	f7f6 fc74 	bl	8000598 <__aeabi_dmul>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	f7f6 fed6 	bl	8000a68 <__aeabi_dcmpeq>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d09a      	beq.n	8009bf6 <_dtoa_r+0x616>
 8009cc0:	e7cb      	b.n	8009c5a <_dtoa_r+0x67a>
 8009cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	f000 808b 	beq.w	8009de0 <_dtoa_r+0x800>
 8009cca:	9a06      	ldr	r2, [sp, #24]
 8009ccc:	2a01      	cmp	r2, #1
 8009cce:	dc6e      	bgt.n	8009dae <_dtoa_r+0x7ce>
 8009cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	d067      	beq.n	8009da6 <_dtoa_r+0x7c6>
 8009cd6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cda:	9f07      	ldr	r7, [sp, #28]
 8009cdc:	9d05      	ldr	r5, [sp, #20]
 8009cde:	9a05      	ldr	r2, [sp, #20]
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	441a      	add	r2, r3
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	9205      	str	r2, [sp, #20]
 8009ce8:	4498      	add	r8, r3
 8009cea:	f000 fb1b 	bl	800a324 <__i2b>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	dd0c      	ble.n	8009d0e <_dtoa_r+0x72e>
 8009cf4:	f1b8 0f00 	cmp.w	r8, #0
 8009cf8:	dd09      	ble.n	8009d0e <_dtoa_r+0x72e>
 8009cfa:	4545      	cmp	r5, r8
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	462b      	mov	r3, r5
 8009d00:	bfa8      	it	ge
 8009d02:	4643      	movge	r3, r8
 8009d04:	1ad2      	subs	r2, r2, r3
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	1aed      	subs	r5, r5, r3
 8009d0a:	eba8 0803 	sub.w	r8, r8, r3
 8009d0e:	9b07      	ldr	r3, [sp, #28]
 8009d10:	b1eb      	cbz	r3, 8009d4e <_dtoa_r+0x76e>
 8009d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d067      	beq.n	8009de8 <_dtoa_r+0x808>
 8009d18:	b18f      	cbz	r7, 8009d3e <_dtoa_r+0x75e>
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	463a      	mov	r2, r7
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 fba0 	bl	800a464 <__pow5mult>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	4601      	mov	r1, r0
 8009d28:	4606      	mov	r6, r0
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fb03 	bl	800a336 <__multiply>
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	9008      	str	r0, [sp, #32]
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fa55 	bl	800a1e4 <_Bfree>
 8009d3a:	9b08      	ldr	r3, [sp, #32]
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	1bda      	subs	r2, r3, r7
 8009d42:	d004      	beq.n	8009d4e <_dtoa_r+0x76e>
 8009d44:	9904      	ldr	r1, [sp, #16]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f000 fb8c 	bl	800a464 <__pow5mult>
 8009d4c:	9004      	str	r0, [sp, #16]
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fae7 	bl	800a324 <__i2b>
 8009d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d58:	4607      	mov	r7, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 81d0 	beq.w	800a100 <_dtoa_r+0xb20>
 8009d60:	461a      	mov	r2, r3
 8009d62:	4601      	mov	r1, r0
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 fb7d 	bl	800a464 <__pow5mult>
 8009d6a:	9b06      	ldr	r3, [sp, #24]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	4607      	mov	r7, r0
 8009d70:	dc40      	bgt.n	8009df4 <_dtoa_r+0x814>
 8009d72:	9b00      	ldr	r3, [sp, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d139      	bne.n	8009dec <_dtoa_r+0x80c>
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d136      	bne.n	8009df0 <_dtoa_r+0x810>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d88:	0d1b      	lsrs	r3, r3, #20
 8009d8a:	051b      	lsls	r3, r3, #20
 8009d8c:	b12b      	cbz	r3, 8009d9a <_dtoa_r+0x7ba>
 8009d8e:	9b05      	ldr	r3, [sp, #20]
 8009d90:	3301      	adds	r3, #1
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	f108 0801 	add.w	r8, r8, #1
 8009d98:	2301      	movs	r3, #1
 8009d9a:	9307      	str	r3, [sp, #28]
 8009d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d12a      	bne.n	8009df8 <_dtoa_r+0x818>
 8009da2:	2001      	movs	r0, #1
 8009da4:	e030      	b.n	8009e08 <_dtoa_r+0x828>
 8009da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dac:	e795      	b.n	8009cda <_dtoa_r+0x6fa>
 8009dae:	9b07      	ldr	r3, [sp, #28]
 8009db0:	f109 37ff 	add.w	r7, r9, #4294967295
 8009db4:	42bb      	cmp	r3, r7
 8009db6:	bfbf      	itttt	lt
 8009db8:	9b07      	ldrlt	r3, [sp, #28]
 8009dba:	9707      	strlt	r7, [sp, #28]
 8009dbc:	1afa      	sublt	r2, r7, r3
 8009dbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009dc0:	bfbb      	ittet	lt
 8009dc2:	189b      	addlt	r3, r3, r2
 8009dc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009dc6:	1bdf      	subge	r7, r3, r7
 8009dc8:	2700      	movlt	r7, #0
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	bfb5      	itete	lt
 8009dd0:	9b05      	ldrlt	r3, [sp, #20]
 8009dd2:	9d05      	ldrge	r5, [sp, #20]
 8009dd4:	eba3 0509 	sublt.w	r5, r3, r9
 8009dd8:	464b      	movge	r3, r9
 8009dda:	bfb8      	it	lt
 8009ddc:	2300      	movlt	r3, #0
 8009dde:	e77e      	b.n	8009cde <_dtoa_r+0x6fe>
 8009de0:	9f07      	ldr	r7, [sp, #28]
 8009de2:	9d05      	ldr	r5, [sp, #20]
 8009de4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009de6:	e783      	b.n	8009cf0 <_dtoa_r+0x710>
 8009de8:	9a07      	ldr	r2, [sp, #28]
 8009dea:	e7ab      	b.n	8009d44 <_dtoa_r+0x764>
 8009dec:	2300      	movs	r3, #0
 8009dee:	e7d4      	b.n	8009d9a <_dtoa_r+0x7ba>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	e7d2      	b.n	8009d9a <_dtoa_r+0x7ba>
 8009df4:	2300      	movs	r3, #0
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009dfe:	6918      	ldr	r0, [r3, #16]
 8009e00:	f000 fa42 	bl	800a288 <__hi0bits>
 8009e04:	f1c0 0020 	rsb	r0, r0, #32
 8009e08:	4440      	add	r0, r8
 8009e0a:	f010 001f 	ands.w	r0, r0, #31
 8009e0e:	d047      	beq.n	8009ea0 <_dtoa_r+0x8c0>
 8009e10:	f1c0 0320 	rsb	r3, r0, #32
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	dd3b      	ble.n	8009e90 <_dtoa_r+0x8b0>
 8009e18:	9b05      	ldr	r3, [sp, #20]
 8009e1a:	f1c0 001c 	rsb	r0, r0, #28
 8009e1e:	4403      	add	r3, r0
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4405      	add	r5, r0
 8009e24:	4480      	add	r8, r0
 8009e26:	9b05      	ldr	r3, [sp, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dd05      	ble.n	8009e38 <_dtoa_r+0x858>
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	9904      	ldr	r1, [sp, #16]
 8009e30:	4620      	mov	r0, r4
 8009e32:	f000 fb65 	bl	800a500 <__lshift>
 8009e36:	9004      	str	r0, [sp, #16]
 8009e38:	f1b8 0f00 	cmp.w	r8, #0
 8009e3c:	dd05      	ble.n	8009e4a <_dtoa_r+0x86a>
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4642      	mov	r2, r8
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 fb5c 	bl	800a500 <__lshift>
 8009e48:	4607      	mov	r7, r0
 8009e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e4c:	b353      	cbz	r3, 8009ea4 <_dtoa_r+0x8c4>
 8009e4e:	4639      	mov	r1, r7
 8009e50:	9804      	ldr	r0, [sp, #16]
 8009e52:	f000 fba9 	bl	800a5a8 <__mcmp>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	da24      	bge.n	8009ea4 <_dtoa_r+0x8c4>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	220a      	movs	r2, #10
 8009e5e:	9904      	ldr	r1, [sp, #16]
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 f9d6 	bl	800a212 <__multadd>
 8009e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e68:	9004      	str	r0, [sp, #16]
 8009e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 814d 	beq.w	800a10e <_dtoa_r+0xb2e>
 8009e74:	2300      	movs	r3, #0
 8009e76:	4631      	mov	r1, r6
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f9c9 	bl	800a212 <__multadd>
 8009e80:	9b02      	ldr	r3, [sp, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	4606      	mov	r6, r0
 8009e86:	dc4f      	bgt.n	8009f28 <_dtoa_r+0x948>
 8009e88:	9b06      	ldr	r3, [sp, #24]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	dd4c      	ble.n	8009f28 <_dtoa_r+0x948>
 8009e8e:	e011      	b.n	8009eb4 <_dtoa_r+0x8d4>
 8009e90:	d0c9      	beq.n	8009e26 <_dtoa_r+0x846>
 8009e92:	9a05      	ldr	r2, [sp, #20]
 8009e94:	331c      	adds	r3, #28
 8009e96:	441a      	add	r2, r3
 8009e98:	9205      	str	r2, [sp, #20]
 8009e9a:	441d      	add	r5, r3
 8009e9c:	4498      	add	r8, r3
 8009e9e:	e7c2      	b.n	8009e26 <_dtoa_r+0x846>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	e7f6      	b.n	8009e92 <_dtoa_r+0x8b2>
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	dc38      	bgt.n	8009f1c <_dtoa_r+0x93c>
 8009eaa:	9b06      	ldr	r3, [sp, #24]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	dd35      	ble.n	8009f1c <_dtoa_r+0x93c>
 8009eb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8009eb4:	9b02      	ldr	r3, [sp, #8]
 8009eb6:	b963      	cbnz	r3, 8009ed2 <_dtoa_r+0x8f2>
 8009eb8:	4639      	mov	r1, r7
 8009eba:	2205      	movs	r2, #5
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 f9a8 	bl	800a212 <__multadd>
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	9804      	ldr	r0, [sp, #16]
 8009ec8:	f000 fb6e 	bl	800a5a8 <__mcmp>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f73f adcc 	bgt.w	8009a6a <_dtoa_r+0x48a>
 8009ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed4:	465d      	mov	r5, fp
 8009ed6:	ea6f 0a03 	mvn.w	sl, r3
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f97f 	bl	800a1e4 <_Bfree>
 8009ee6:	2e00      	cmp	r6, #0
 8009ee8:	f43f aeb7 	beq.w	8009c5a <_dtoa_r+0x67a>
 8009eec:	f1b9 0f00 	cmp.w	r9, #0
 8009ef0:	d005      	beq.n	8009efe <_dtoa_r+0x91e>
 8009ef2:	45b1      	cmp	r9, r6
 8009ef4:	d003      	beq.n	8009efe <_dtoa_r+0x91e>
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 f973 	bl	800a1e4 <_Bfree>
 8009efe:	4631      	mov	r1, r6
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 f96f 	bl	800a1e4 <_Bfree>
 8009f06:	e6a8      	b.n	8009c5a <_dtoa_r+0x67a>
 8009f08:	2700      	movs	r7, #0
 8009f0a:	463e      	mov	r6, r7
 8009f0c:	e7e1      	b.n	8009ed2 <_dtoa_r+0x8f2>
 8009f0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009f12:	463e      	mov	r6, r7
 8009f14:	e5a9      	b.n	8009a6a <_dtoa_r+0x48a>
 8009f16:	bf00      	nop
 8009f18:	40240000 	.word	0x40240000
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80fa 	beq.w	800a11c <_dtoa_r+0xb3c>
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	dd05      	ble.n	8009f38 <_dtoa_r+0x958>
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 fae5 	bl	800a500 <__lshift>
 8009f36:	4606      	mov	r6, r0
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d04c      	beq.n	8009fd8 <_dtoa_r+0x9f8>
 8009f3e:	6871      	ldr	r1, [r6, #4]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 f91b 	bl	800a17c <_Balloc>
 8009f46:	6932      	ldr	r2, [r6, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	f106 010c 	add.w	r1, r6, #12
 8009f52:	300c      	adds	r0, #12
 8009f54:	f7fe ff58 	bl	8008e08 <memcpy>
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 facf 	bl	800a500 <__lshift>
 8009f62:	9b00      	ldr	r3, [sp, #0]
 8009f64:	f8cd b014 	str.w	fp, [sp, #20]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	46b1      	mov	r9, r6
 8009f6e:	9307      	str	r3, [sp, #28]
 8009f70:	4606      	mov	r6, r0
 8009f72:	4639      	mov	r1, r7
 8009f74:	9804      	ldr	r0, [sp, #16]
 8009f76:	f7ff faa4 	bl	80094c2 <quorem>
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f82:	9804      	ldr	r0, [sp, #16]
 8009f84:	f000 fb10 	bl	800a5a8 <__mcmp>
 8009f88:	4632      	mov	r2, r6
 8009f8a:	9000      	str	r0, [sp, #0]
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fb24 	bl	800a5dc <__mdiff>
 8009f94:	68c3      	ldr	r3, [r0, #12]
 8009f96:	4602      	mov	r2, r0
 8009f98:	bb03      	cbnz	r3, 8009fdc <_dtoa_r+0x9fc>
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	9008      	str	r0, [sp, #32]
 8009f9e:	9804      	ldr	r0, [sp, #16]
 8009fa0:	f000 fb02 	bl	800a5a8 <__mcmp>
 8009fa4:	9a08      	ldr	r2, [sp, #32]
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4620      	mov	r0, r4
 8009fac:	9308      	str	r3, [sp, #32]
 8009fae:	f000 f919 	bl	800a1e4 <_Bfree>
 8009fb2:	9b08      	ldr	r3, [sp, #32]
 8009fb4:	b9a3      	cbnz	r3, 8009fe0 <_dtoa_r+0xa00>
 8009fb6:	9a06      	ldr	r2, [sp, #24]
 8009fb8:	b992      	cbnz	r2, 8009fe0 <_dtoa_r+0xa00>
 8009fba:	9a07      	ldr	r2, [sp, #28]
 8009fbc:	b982      	cbnz	r2, 8009fe0 <_dtoa_r+0xa00>
 8009fbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009fc2:	d029      	beq.n	800a018 <_dtoa_r+0xa38>
 8009fc4:	9b00      	ldr	r3, [sp, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dd01      	ble.n	8009fce <_dtoa_r+0x9ee>
 8009fca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009fce:	9b05      	ldr	r3, [sp, #20]
 8009fd0:	1c5d      	adds	r5, r3, #1
 8009fd2:	f883 8000 	strb.w	r8, [r3]
 8009fd6:	e782      	b.n	8009ede <_dtoa_r+0x8fe>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	e7c2      	b.n	8009f62 <_dtoa_r+0x982>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e7e3      	b.n	8009fa8 <_dtoa_r+0x9c8>
 8009fe0:	9a00      	ldr	r2, [sp, #0]
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	db04      	blt.n	8009ff0 <_dtoa_r+0xa10>
 8009fe6:	d125      	bne.n	800a034 <_dtoa_r+0xa54>
 8009fe8:	9a06      	ldr	r2, [sp, #24]
 8009fea:	bb1a      	cbnz	r2, 800a034 <_dtoa_r+0xa54>
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	bb0a      	cbnz	r2, 800a034 <_dtoa_r+0xa54>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	ddec      	ble.n	8009fce <_dtoa_r+0x9ee>
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	9904      	ldr	r1, [sp, #16]
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fa81 	bl	800a500 <__lshift>
 8009ffe:	4639      	mov	r1, r7
 800a000:	9004      	str	r0, [sp, #16]
 800a002:	f000 fad1 	bl	800a5a8 <__mcmp>
 800a006:	2800      	cmp	r0, #0
 800a008:	dc03      	bgt.n	800a012 <_dtoa_r+0xa32>
 800a00a:	d1e0      	bne.n	8009fce <_dtoa_r+0x9ee>
 800a00c:	f018 0f01 	tst.w	r8, #1
 800a010:	d0dd      	beq.n	8009fce <_dtoa_r+0x9ee>
 800a012:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a016:	d1d8      	bne.n	8009fca <_dtoa_r+0x9ea>
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	9a05      	ldr	r2, [sp, #20]
 800a01c:	1c5d      	adds	r5, r3, #1
 800a01e:	2339      	movs	r3, #57	; 0x39
 800a020:	7013      	strb	r3, [r2, #0]
 800a022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a026:	2b39      	cmp	r3, #57	; 0x39
 800a028:	f105 32ff 	add.w	r2, r5, #4294967295
 800a02c:	d04f      	beq.n	800a0ce <_dtoa_r+0xaee>
 800a02e:	3301      	adds	r3, #1
 800a030:	7013      	strb	r3, [r2, #0]
 800a032:	e754      	b.n	8009ede <_dtoa_r+0x8fe>
 800a034:	9a05      	ldr	r2, [sp, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	f102 0501 	add.w	r5, r2, #1
 800a03c:	dd06      	ble.n	800a04c <_dtoa_r+0xa6c>
 800a03e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a042:	d0e9      	beq.n	800a018 <_dtoa_r+0xa38>
 800a044:	f108 0801 	add.w	r8, r8, #1
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	e7c2      	b.n	8009fd2 <_dtoa_r+0x9f2>
 800a04c:	9a02      	ldr	r2, [sp, #8]
 800a04e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a052:	eba5 030b 	sub.w	r3, r5, fp
 800a056:	4293      	cmp	r3, r2
 800a058:	d021      	beq.n	800a09e <_dtoa_r+0xabe>
 800a05a:	2300      	movs	r3, #0
 800a05c:	220a      	movs	r2, #10
 800a05e:	9904      	ldr	r1, [sp, #16]
 800a060:	4620      	mov	r0, r4
 800a062:	f000 f8d6 	bl	800a212 <__multadd>
 800a066:	45b1      	cmp	r9, r6
 800a068:	9004      	str	r0, [sp, #16]
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	f04f 020a 	mov.w	r2, #10
 800a072:	4649      	mov	r1, r9
 800a074:	4620      	mov	r0, r4
 800a076:	d105      	bne.n	800a084 <_dtoa_r+0xaa4>
 800a078:	f000 f8cb 	bl	800a212 <__multadd>
 800a07c:	4681      	mov	r9, r0
 800a07e:	4606      	mov	r6, r0
 800a080:	9505      	str	r5, [sp, #20]
 800a082:	e776      	b.n	8009f72 <_dtoa_r+0x992>
 800a084:	f000 f8c5 	bl	800a212 <__multadd>
 800a088:	4631      	mov	r1, r6
 800a08a:	4681      	mov	r9, r0
 800a08c:	2300      	movs	r3, #0
 800a08e:	220a      	movs	r2, #10
 800a090:	4620      	mov	r0, r4
 800a092:	f000 f8be 	bl	800a212 <__multadd>
 800a096:	4606      	mov	r6, r0
 800a098:	e7f2      	b.n	800a080 <_dtoa_r+0xaa0>
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	2201      	movs	r2, #1
 800a0a0:	9904      	ldr	r1, [sp, #16]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fa2c 	bl	800a500 <__lshift>
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	9004      	str	r0, [sp, #16]
 800a0ac:	f000 fa7c 	bl	800a5a8 <__mcmp>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dcb6      	bgt.n	800a022 <_dtoa_r+0xa42>
 800a0b4:	d102      	bne.n	800a0bc <_dtoa_r+0xadc>
 800a0b6:	f018 0f01 	tst.w	r8, #1
 800a0ba:	d1b2      	bne.n	800a022 <_dtoa_r+0xa42>
 800a0bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0c0:	2b30      	cmp	r3, #48	; 0x30
 800a0c2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a0c6:	f47f af0a 	bne.w	8009ede <_dtoa_r+0x8fe>
 800a0ca:	4615      	mov	r5, r2
 800a0cc:	e7f6      	b.n	800a0bc <_dtoa_r+0xadc>
 800a0ce:	4593      	cmp	fp, r2
 800a0d0:	d105      	bne.n	800a0de <_dtoa_r+0xafe>
 800a0d2:	2331      	movs	r3, #49	; 0x31
 800a0d4:	f10a 0a01 	add.w	sl, sl, #1
 800a0d8:	f88b 3000 	strb.w	r3, [fp]
 800a0dc:	e6ff      	b.n	8009ede <_dtoa_r+0x8fe>
 800a0de:	4615      	mov	r5, r2
 800a0e0:	e79f      	b.n	800a022 <_dtoa_r+0xa42>
 800a0e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a148 <_dtoa_r+0xb68>
 800a0e6:	e007      	b.n	800a0f8 <_dtoa_r+0xb18>
 800a0e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a14c <_dtoa_r+0xb6c>
 800a0ee:	b11b      	cbz	r3, 800a0f8 <_dtoa_r+0xb18>
 800a0f0:	f10b 0308 	add.w	r3, fp, #8
 800a0f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	4658      	mov	r0, fp
 800a0fa:	b017      	add	sp, #92	; 0x5c
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	2b01      	cmp	r3, #1
 800a104:	f77f ae35 	ble.w	8009d72 <_dtoa_r+0x792>
 800a108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	e649      	b.n	8009da2 <_dtoa_r+0x7c2>
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	dc03      	bgt.n	800a11c <_dtoa_r+0xb3c>
 800a114:	9b06      	ldr	r3, [sp, #24]
 800a116:	2b02      	cmp	r3, #2
 800a118:	f73f aecc 	bgt.w	8009eb4 <_dtoa_r+0x8d4>
 800a11c:	465d      	mov	r5, fp
 800a11e:	4639      	mov	r1, r7
 800a120:	9804      	ldr	r0, [sp, #16]
 800a122:	f7ff f9ce 	bl	80094c2 <quorem>
 800a126:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a12a:	f805 8b01 	strb.w	r8, [r5], #1
 800a12e:	9a02      	ldr	r2, [sp, #8]
 800a130:	eba5 030b 	sub.w	r3, r5, fp
 800a134:	429a      	cmp	r2, r3
 800a136:	ddb0      	ble.n	800a09a <_dtoa_r+0xaba>
 800a138:	2300      	movs	r3, #0
 800a13a:	220a      	movs	r2, #10
 800a13c:	9904      	ldr	r1, [sp, #16]
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 f867 	bl	800a212 <__multadd>
 800a144:	9004      	str	r0, [sp, #16]
 800a146:	e7ea      	b.n	800a11e <_dtoa_r+0xb3e>
 800a148:	0800aebc 	.word	0x0800aebc
 800a14c:	0800aebe 	.word	0x0800aebe

0800a150 <_localeconv_r>:
 800a150:	4b04      	ldr	r3, [pc, #16]	; (800a164 <_localeconv_r+0x14>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6a18      	ldr	r0, [r3, #32]
 800a156:	4b04      	ldr	r3, [pc, #16]	; (800a168 <_localeconv_r+0x18>)
 800a158:	2800      	cmp	r0, #0
 800a15a:	bf08      	it	eq
 800a15c:	4618      	moveq	r0, r3
 800a15e:	30f0      	adds	r0, #240	; 0xf0
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	2000001c 	.word	0x2000001c
 800a168:	20000080 	.word	0x20000080

0800a16c <malloc>:
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <malloc+0xc>)
 800a16e:	4601      	mov	r1, r0
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	f000 baed 	b.w	800a750 <_malloc_r>
 800a176:	bf00      	nop
 800a178:	2000001c 	.word	0x2000001c

0800a17c <_Balloc>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a180:	4604      	mov	r4, r0
 800a182:	460e      	mov	r6, r1
 800a184:	b93d      	cbnz	r5, 800a196 <_Balloc+0x1a>
 800a186:	2010      	movs	r0, #16
 800a188:	f7ff fff0 	bl	800a16c <malloc>
 800a18c:	6260      	str	r0, [r4, #36]	; 0x24
 800a18e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a192:	6005      	str	r5, [r0, #0]
 800a194:	60c5      	str	r5, [r0, #12]
 800a196:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a198:	68eb      	ldr	r3, [r5, #12]
 800a19a:	b183      	cbz	r3, 800a1be <_Balloc+0x42>
 800a19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a1a4:	b9b8      	cbnz	r0, 800a1d6 <_Balloc+0x5a>
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	fa01 f506 	lsl.w	r5, r1, r6
 800a1ac:	1d6a      	adds	r2, r5, #5
 800a1ae:	0092      	lsls	r2, r2, #2
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fabf 	bl	800a734 <_calloc_r>
 800a1b6:	b160      	cbz	r0, 800a1d2 <_Balloc+0x56>
 800a1b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a1bc:	e00e      	b.n	800a1dc <_Balloc+0x60>
 800a1be:	2221      	movs	r2, #33	; 0x21
 800a1c0:	2104      	movs	r1, #4
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fab6 	bl	800a734 <_calloc_r>
 800a1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ca:	60e8      	str	r0, [r5, #12]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e4      	bne.n	800a19c <_Balloc+0x20>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	bd70      	pop	{r4, r5, r6, pc}
 800a1d6:	6802      	ldr	r2, [r0, #0]
 800a1d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1e2:	e7f7      	b.n	800a1d4 <_Balloc+0x58>

0800a1e4 <_Bfree>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	b93c      	cbnz	r4, 800a1fe <_Bfree+0x1a>
 800a1ee:	2010      	movs	r0, #16
 800a1f0:	f7ff ffbc 	bl	800a16c <malloc>
 800a1f4:	6270      	str	r0, [r6, #36]	; 0x24
 800a1f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1fa:	6004      	str	r4, [r0, #0]
 800a1fc:	60c4      	str	r4, [r0, #12]
 800a1fe:	b13d      	cbz	r5, 800a210 <_Bfree+0x2c>
 800a200:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a202:	686a      	ldr	r2, [r5, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a20a:	6029      	str	r1, [r5, #0]
 800a20c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a210:	bd70      	pop	{r4, r5, r6, pc}

0800a212 <__multadd>:
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	690d      	ldr	r5, [r1, #16]
 800a218:	461f      	mov	r7, r3
 800a21a:	4606      	mov	r6, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	f101 0c14 	add.w	ip, r1, #20
 800a222:	2300      	movs	r3, #0
 800a224:	f8dc 0000 	ldr.w	r0, [ip]
 800a228:	b281      	uxth	r1, r0
 800a22a:	fb02 7101 	mla	r1, r2, r1, r7
 800a22e:	0c0f      	lsrs	r7, r1, #16
 800a230:	0c00      	lsrs	r0, r0, #16
 800a232:	fb02 7000 	mla	r0, r2, r0, r7
 800a236:	b289      	uxth	r1, r1
 800a238:	3301      	adds	r3, #1
 800a23a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a23e:	429d      	cmp	r5, r3
 800a240:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a244:	f84c 1b04 	str.w	r1, [ip], #4
 800a248:	dcec      	bgt.n	800a224 <__multadd+0x12>
 800a24a:	b1d7      	cbz	r7, 800a282 <__multadd+0x70>
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	42ab      	cmp	r3, r5
 800a250:	dc12      	bgt.n	800a278 <__multadd+0x66>
 800a252:	6861      	ldr	r1, [r4, #4]
 800a254:	4630      	mov	r0, r6
 800a256:	3101      	adds	r1, #1
 800a258:	f7ff ff90 	bl	800a17c <_Balloc>
 800a25c:	6922      	ldr	r2, [r4, #16]
 800a25e:	3202      	adds	r2, #2
 800a260:	f104 010c 	add.w	r1, r4, #12
 800a264:	4680      	mov	r8, r0
 800a266:	0092      	lsls	r2, r2, #2
 800a268:	300c      	adds	r0, #12
 800a26a:	f7fe fdcd 	bl	8008e08 <memcpy>
 800a26e:	4621      	mov	r1, r4
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff ffb7 	bl	800a1e4 <_Bfree>
 800a276:	4644      	mov	r4, r8
 800a278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a27c:	3501      	adds	r5, #1
 800a27e:	615f      	str	r7, [r3, #20]
 800a280:	6125      	str	r5, [r4, #16]
 800a282:	4620      	mov	r0, r4
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a288 <__hi0bits>:
 800a288:	0c02      	lsrs	r2, r0, #16
 800a28a:	0412      	lsls	r2, r2, #16
 800a28c:	4603      	mov	r3, r0
 800a28e:	b9b2      	cbnz	r2, 800a2be <__hi0bits+0x36>
 800a290:	0403      	lsls	r3, r0, #16
 800a292:	2010      	movs	r0, #16
 800a294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a298:	bf04      	itt	eq
 800a29a:	021b      	lsleq	r3, r3, #8
 800a29c:	3008      	addeq	r0, #8
 800a29e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2a2:	bf04      	itt	eq
 800a2a4:	011b      	lsleq	r3, r3, #4
 800a2a6:	3004      	addeq	r0, #4
 800a2a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2ac:	bf04      	itt	eq
 800a2ae:	009b      	lsleq	r3, r3, #2
 800a2b0:	3002      	addeq	r0, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	db06      	blt.n	800a2c4 <__hi0bits+0x3c>
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	d503      	bpl.n	800a2c2 <__hi0bits+0x3a>
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	4770      	bx	lr
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7e8      	b.n	800a294 <__hi0bits+0xc>
 800a2c2:	2020      	movs	r0, #32
 800a2c4:	4770      	bx	lr

0800a2c6 <__lo0bits>:
 800a2c6:	6803      	ldr	r3, [r0, #0]
 800a2c8:	f013 0207 	ands.w	r2, r3, #7
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	d00b      	beq.n	800a2e8 <__lo0bits+0x22>
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	d423      	bmi.n	800a31c <__lo0bits+0x56>
 800a2d4:	0798      	lsls	r0, r3, #30
 800a2d6:	bf49      	itett	mi
 800a2d8:	085b      	lsrmi	r3, r3, #1
 800a2da:	089b      	lsrpl	r3, r3, #2
 800a2dc:	2001      	movmi	r0, #1
 800a2de:	600b      	strmi	r3, [r1, #0]
 800a2e0:	bf5c      	itt	pl
 800a2e2:	600b      	strpl	r3, [r1, #0]
 800a2e4:	2002      	movpl	r0, #2
 800a2e6:	4770      	bx	lr
 800a2e8:	b298      	uxth	r0, r3
 800a2ea:	b9a8      	cbnz	r0, 800a318 <__lo0bits+0x52>
 800a2ec:	0c1b      	lsrs	r3, r3, #16
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2f4:	bf04      	itt	eq
 800a2f6:	0a1b      	lsreq	r3, r3, #8
 800a2f8:	3008      	addeq	r0, #8
 800a2fa:	071a      	lsls	r2, r3, #28
 800a2fc:	bf04      	itt	eq
 800a2fe:	091b      	lsreq	r3, r3, #4
 800a300:	3004      	addeq	r0, #4
 800a302:	079a      	lsls	r2, r3, #30
 800a304:	bf04      	itt	eq
 800a306:	089b      	lsreq	r3, r3, #2
 800a308:	3002      	addeq	r0, #2
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d402      	bmi.n	800a314 <__lo0bits+0x4e>
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	d006      	beq.n	800a320 <__lo0bits+0x5a>
 800a312:	3001      	adds	r0, #1
 800a314:	600b      	str	r3, [r1, #0]
 800a316:	4770      	bx	lr
 800a318:	4610      	mov	r0, r2
 800a31a:	e7e9      	b.n	800a2f0 <__lo0bits+0x2a>
 800a31c:	2000      	movs	r0, #0
 800a31e:	4770      	bx	lr
 800a320:	2020      	movs	r0, #32
 800a322:	4770      	bx	lr

0800a324 <__i2b>:
 800a324:	b510      	push	{r4, lr}
 800a326:	460c      	mov	r4, r1
 800a328:	2101      	movs	r1, #1
 800a32a:	f7ff ff27 	bl	800a17c <_Balloc>
 800a32e:	2201      	movs	r2, #1
 800a330:	6144      	str	r4, [r0, #20]
 800a332:	6102      	str	r2, [r0, #16]
 800a334:	bd10      	pop	{r4, pc}

0800a336 <__multiply>:
 800a336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	4614      	mov	r4, r2
 800a33c:	690a      	ldr	r2, [r1, #16]
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	429a      	cmp	r2, r3
 800a342:	bfb8      	it	lt
 800a344:	460b      	movlt	r3, r1
 800a346:	4688      	mov	r8, r1
 800a348:	bfbc      	itt	lt
 800a34a:	46a0      	movlt	r8, r4
 800a34c:	461c      	movlt	r4, r3
 800a34e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a352:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a356:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a35a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a35e:	eb07 0609 	add.w	r6, r7, r9
 800a362:	42b3      	cmp	r3, r6
 800a364:	bfb8      	it	lt
 800a366:	3101      	addlt	r1, #1
 800a368:	f7ff ff08 	bl	800a17c <_Balloc>
 800a36c:	f100 0514 	add.w	r5, r0, #20
 800a370:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a374:	462b      	mov	r3, r5
 800a376:	2200      	movs	r2, #0
 800a378:	4573      	cmp	r3, lr
 800a37a:	d316      	bcc.n	800a3aa <__multiply+0x74>
 800a37c:	f104 0214 	add.w	r2, r4, #20
 800a380:	f108 0114 	add.w	r1, r8, #20
 800a384:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a388:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	9b00      	ldr	r3, [sp, #0]
 800a390:	9201      	str	r2, [sp, #4]
 800a392:	4293      	cmp	r3, r2
 800a394:	d80c      	bhi.n	800a3b0 <__multiply+0x7a>
 800a396:	2e00      	cmp	r6, #0
 800a398:	dd03      	ble.n	800a3a2 <__multiply+0x6c>
 800a39a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d05d      	beq.n	800a45e <__multiply+0x128>
 800a3a2:	6106      	str	r6, [r0, #16]
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	f843 2b04 	str.w	r2, [r3], #4
 800a3ae:	e7e3      	b.n	800a378 <__multiply+0x42>
 800a3b0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a3b4:	f1bb 0f00 	cmp.w	fp, #0
 800a3b8:	d023      	beq.n	800a402 <__multiply+0xcc>
 800a3ba:	4689      	mov	r9, r1
 800a3bc:	46ac      	mov	ip, r5
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3c6:	f8dc a000 	ldr.w	sl, [ip]
 800a3ca:	b2a3      	uxth	r3, r4
 800a3cc:	fa1f fa8a 	uxth.w	sl, sl
 800a3d0:	fb0b a303 	mla	r3, fp, r3, sl
 800a3d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a3d8:	f8dc 4000 	ldr.w	r4, [ip]
 800a3dc:	4443      	add	r3, r8
 800a3de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3e2:	fb0b 840a 	mla	r4, fp, sl, r8
 800a3e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a3ea:	46e2      	mov	sl, ip
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a3f2:	454f      	cmp	r7, r9
 800a3f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3f8:	f84a 3b04 	str.w	r3, [sl], #4
 800a3fc:	d82b      	bhi.n	800a456 <__multiply+0x120>
 800a3fe:	f8cc 8004 	str.w	r8, [ip, #4]
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a408:	3204      	adds	r2, #4
 800a40a:	f1ba 0f00 	cmp.w	sl, #0
 800a40e:	d020      	beq.n	800a452 <__multiply+0x11c>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	4689      	mov	r9, r1
 800a414:	46a8      	mov	r8, r5
 800a416:	f04f 0b00 	mov.w	fp, #0
 800a41a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a41e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a422:	fb0a 440c 	mla	r4, sl, ip, r4
 800a426:	445c      	add	r4, fp
 800a428:	46c4      	mov	ip, r8
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a430:	f84c 3b04 	str.w	r3, [ip], #4
 800a434:	f859 3b04 	ldr.w	r3, [r9], #4
 800a438:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	fb0a b303 	mla	r3, sl, r3, fp
 800a442:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a446:	454f      	cmp	r7, r9
 800a448:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a44c:	d805      	bhi.n	800a45a <__multiply+0x124>
 800a44e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a452:	3504      	adds	r5, #4
 800a454:	e79b      	b.n	800a38e <__multiply+0x58>
 800a456:	46d4      	mov	ip, sl
 800a458:	e7b3      	b.n	800a3c2 <__multiply+0x8c>
 800a45a:	46e0      	mov	r8, ip
 800a45c:	e7dd      	b.n	800a41a <__multiply+0xe4>
 800a45e:	3e01      	subs	r6, #1
 800a460:	e799      	b.n	800a396 <__multiply+0x60>
	...

0800a464 <__pow5mult>:
 800a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a468:	4615      	mov	r5, r2
 800a46a:	f012 0203 	ands.w	r2, r2, #3
 800a46e:	4606      	mov	r6, r0
 800a470:	460f      	mov	r7, r1
 800a472:	d007      	beq.n	800a484 <__pow5mult+0x20>
 800a474:	3a01      	subs	r2, #1
 800a476:	4c21      	ldr	r4, [pc, #132]	; (800a4fc <__pow5mult+0x98>)
 800a478:	2300      	movs	r3, #0
 800a47a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a47e:	f7ff fec8 	bl	800a212 <__multadd>
 800a482:	4607      	mov	r7, r0
 800a484:	10ad      	asrs	r5, r5, #2
 800a486:	d035      	beq.n	800a4f4 <__pow5mult+0x90>
 800a488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a48a:	b93c      	cbnz	r4, 800a49c <__pow5mult+0x38>
 800a48c:	2010      	movs	r0, #16
 800a48e:	f7ff fe6d 	bl	800a16c <malloc>
 800a492:	6270      	str	r0, [r6, #36]	; 0x24
 800a494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a498:	6004      	str	r4, [r0, #0]
 800a49a:	60c4      	str	r4, [r0, #12]
 800a49c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a4:	b94c      	cbnz	r4, 800a4ba <__pow5mult+0x56>
 800a4a6:	f240 2171 	movw	r1, #625	; 0x271
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff3a 	bl	800a324 <__i2b>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	07eb      	lsls	r3, r5, #31
 800a4c0:	d50a      	bpl.n	800a4d8 <__pow5mult+0x74>
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff35 	bl	800a336 <__multiply>
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4681      	mov	r9, r0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f7ff fe87 	bl	800a1e4 <_Bfree>
 800a4d6:	464f      	mov	r7, r9
 800a4d8:	106d      	asrs	r5, r5, #1
 800a4da:	d00b      	beq.n	800a4f4 <__pow5mult+0x90>
 800a4dc:	6820      	ldr	r0, [r4, #0]
 800a4de:	b938      	cbnz	r0, 800a4f0 <__pow5mult+0x8c>
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ff26 	bl	800a336 <__multiply>
 800a4ea:	6020      	str	r0, [r4, #0]
 800a4ec:	f8c0 8000 	str.w	r8, [r0]
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	e7e4      	b.n	800a4be <__pow5mult+0x5a>
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800afc0 	.word	0x0800afc0

0800a500 <__lshift>:
 800a500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a504:	460c      	mov	r4, r1
 800a506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6849      	ldr	r1, [r1, #4]
 800a50e:	eb0a 0903 	add.w	r9, sl, r3
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4607      	mov	r7, r0
 800a516:	4616      	mov	r6, r2
 800a518:	f109 0501 	add.w	r5, r9, #1
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	db32      	blt.n	800a586 <__lshift+0x86>
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff fe2b 	bl	800a17c <_Balloc>
 800a526:	2300      	movs	r3, #0
 800a528:	4680      	mov	r8, r0
 800a52a:	f100 0114 	add.w	r1, r0, #20
 800a52e:	461a      	mov	r2, r3
 800a530:	4553      	cmp	r3, sl
 800a532:	db2b      	blt.n	800a58c <__lshift+0x8c>
 800a534:	6920      	ldr	r0, [r4, #16]
 800a536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a53a:	f104 0314 	add.w	r3, r4, #20
 800a53e:	f016 021f 	ands.w	r2, r6, #31
 800a542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a54a:	d025      	beq.n	800a598 <__lshift+0x98>
 800a54c:	f1c2 0e20 	rsb	lr, r2, #32
 800a550:	2000      	movs	r0, #0
 800a552:	681e      	ldr	r6, [r3, #0]
 800a554:	468a      	mov	sl, r1
 800a556:	4096      	lsls	r6, r2
 800a558:	4330      	orrs	r0, r6
 800a55a:	f84a 0b04 	str.w	r0, [sl], #4
 800a55e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a562:	459c      	cmp	ip, r3
 800a564:	fa20 f00e 	lsr.w	r0, r0, lr
 800a568:	d814      	bhi.n	800a594 <__lshift+0x94>
 800a56a:	6048      	str	r0, [r1, #4]
 800a56c:	b108      	cbz	r0, 800a572 <__lshift+0x72>
 800a56e:	f109 0502 	add.w	r5, r9, #2
 800a572:	3d01      	subs	r5, #1
 800a574:	4638      	mov	r0, r7
 800a576:	f8c8 5010 	str.w	r5, [r8, #16]
 800a57a:	4621      	mov	r1, r4
 800a57c:	f7ff fe32 	bl	800a1e4 <_Bfree>
 800a580:	4640      	mov	r0, r8
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	3101      	adds	r1, #1
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	e7c7      	b.n	800a51c <__lshift+0x1c>
 800a58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a590:	3301      	adds	r3, #1
 800a592:	e7cd      	b.n	800a530 <__lshift+0x30>
 800a594:	4651      	mov	r1, sl
 800a596:	e7dc      	b.n	800a552 <__lshift+0x52>
 800a598:	3904      	subs	r1, #4
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5a2:	459c      	cmp	ip, r3
 800a5a4:	d8f9      	bhi.n	800a59a <__lshift+0x9a>
 800a5a6:	e7e4      	b.n	800a572 <__lshift+0x72>

0800a5a8 <__mcmp>:
 800a5a8:	6903      	ldr	r3, [r0, #16]
 800a5aa:	690a      	ldr	r2, [r1, #16]
 800a5ac:	1a9b      	subs	r3, r3, r2
 800a5ae:	b530      	push	{r4, r5, lr}
 800a5b0:	d10c      	bne.n	800a5cc <__mcmp+0x24>
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	3014      	adds	r0, #20
 800a5b6:	3114      	adds	r1, #20
 800a5b8:	1884      	adds	r4, r0, r2
 800a5ba:	4411      	add	r1, r2
 800a5bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5c4:	4295      	cmp	r5, r2
 800a5c6:	d003      	beq.n	800a5d0 <__mcmp+0x28>
 800a5c8:	d305      	bcc.n	800a5d6 <__mcmp+0x2e>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	d3f3      	bcc.n	800a5bc <__mcmp+0x14>
 800a5d4:	e7fa      	b.n	800a5cc <__mcmp+0x24>
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	e7f7      	b.n	800a5cc <__mcmp+0x24>

0800a5dc <__mdiff>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	4607      	mov	r7, r0
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	f7ff ffdd 	bl	800a5a8 <__mcmp>
 800a5ee:	1e06      	subs	r6, r0, #0
 800a5f0:	d108      	bne.n	800a604 <__mdiff+0x28>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff fdc1 	bl	800a17c <_Balloc>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a604:	bfa4      	itt	ge
 800a606:	4623      	movge	r3, r4
 800a608:	462c      	movge	r4, r5
 800a60a:	4638      	mov	r0, r7
 800a60c:	6861      	ldr	r1, [r4, #4]
 800a60e:	bfa6      	itte	ge
 800a610:	461d      	movge	r5, r3
 800a612:	2600      	movge	r6, #0
 800a614:	2601      	movlt	r6, #1
 800a616:	f7ff fdb1 	bl	800a17c <_Balloc>
 800a61a:	692b      	ldr	r3, [r5, #16]
 800a61c:	60c6      	str	r6, [r0, #12]
 800a61e:	6926      	ldr	r6, [r4, #16]
 800a620:	f105 0914 	add.w	r9, r5, #20
 800a624:	f104 0214 	add.w	r2, r4, #20
 800a628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a62c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a630:	f100 0514 	add.w	r5, r0, #20
 800a634:	f04f 0e00 	mov.w	lr, #0
 800a638:	f852 ab04 	ldr.w	sl, [r2], #4
 800a63c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a640:	fa1e f18a 	uxtah	r1, lr, sl
 800a644:	b2a3      	uxth	r3, r4
 800a646:	1ac9      	subs	r1, r1, r3
 800a648:	0c23      	lsrs	r3, r4, #16
 800a64a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a64e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a652:	b289      	uxth	r1, r1
 800a654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a658:	45c8      	cmp	r8, r9
 800a65a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a65e:	4694      	mov	ip, r2
 800a660:	f845 3b04 	str.w	r3, [r5], #4
 800a664:	d8e8      	bhi.n	800a638 <__mdiff+0x5c>
 800a666:	45bc      	cmp	ip, r7
 800a668:	d304      	bcc.n	800a674 <__mdiff+0x98>
 800a66a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a66e:	b183      	cbz	r3, 800a692 <__mdiff+0xb6>
 800a670:	6106      	str	r6, [r0, #16]
 800a672:	e7c5      	b.n	800a600 <__mdiff+0x24>
 800a674:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a678:	fa1e f381 	uxtah	r3, lr, r1
 800a67c:	141a      	asrs	r2, r3, #16
 800a67e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a682:	b29b      	uxth	r3, r3
 800a684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a68c:	f845 3b04 	str.w	r3, [r5], #4
 800a690:	e7e9      	b.n	800a666 <__mdiff+0x8a>
 800a692:	3e01      	subs	r6, #1
 800a694:	e7e9      	b.n	800a66a <__mdiff+0x8e>

0800a696 <__d2b>:
 800a696:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a69a:	460e      	mov	r6, r1
 800a69c:	2101      	movs	r1, #1
 800a69e:	ec59 8b10 	vmov	r8, r9, d0
 800a6a2:	4615      	mov	r5, r2
 800a6a4:	f7ff fd6a 	bl	800a17c <_Balloc>
 800a6a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6b2:	bb34      	cbnz	r4, 800a702 <__d2b+0x6c>
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	f1b8 0300 	subs.w	r3, r8, #0
 800a6ba:	d027      	beq.n	800a70c <__d2b+0x76>
 800a6bc:	a802      	add	r0, sp, #8
 800a6be:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a6c2:	f7ff fe00 	bl	800a2c6 <__lo0bits>
 800a6c6:	9900      	ldr	r1, [sp, #0]
 800a6c8:	b1f0      	cbz	r0, 800a708 <__d2b+0x72>
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	f1c0 0320 	rsb	r3, r0, #32
 800a6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	40c2      	lsrs	r2, r0
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	9201      	str	r2, [sp, #4]
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	61bb      	str	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bf14      	ite	ne
 800a6e4:	2102      	movne	r1, #2
 800a6e6:	2101      	moveq	r1, #1
 800a6e8:	6139      	str	r1, [r7, #16]
 800a6ea:	b1c4      	cbz	r4, 800a71e <__d2b+0x88>
 800a6ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a6f0:	4404      	add	r4, r0
 800a6f2:	6034      	str	r4, [r6, #0]
 800a6f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6f8:	6028      	str	r0, [r5, #0]
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a706:	e7d5      	b.n	800a6b4 <__d2b+0x1e>
 800a708:	6179      	str	r1, [r7, #20]
 800a70a:	e7e7      	b.n	800a6dc <__d2b+0x46>
 800a70c:	a801      	add	r0, sp, #4
 800a70e:	f7ff fdda 	bl	800a2c6 <__lo0bits>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	2101      	movs	r1, #1
 800a718:	6139      	str	r1, [r7, #16]
 800a71a:	3020      	adds	r0, #32
 800a71c:	e7e5      	b.n	800a6ea <__d2b+0x54>
 800a71e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a726:	6030      	str	r0, [r6, #0]
 800a728:	6918      	ldr	r0, [r3, #16]
 800a72a:	f7ff fdad 	bl	800a288 <__hi0bits>
 800a72e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a732:	e7e1      	b.n	800a6f8 <__d2b+0x62>

0800a734 <_calloc_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	fb02 f401 	mul.w	r4, r2, r1
 800a73a:	4621      	mov	r1, r4
 800a73c:	f000 f808 	bl	800a750 <_malloc_r>
 800a740:	4605      	mov	r5, r0
 800a742:	b118      	cbz	r0, 800a74c <_calloc_r+0x18>
 800a744:	4622      	mov	r2, r4
 800a746:	2100      	movs	r1, #0
 800a748:	f7fe fb69 	bl	8008e1e <memset>
 800a74c:	4628      	mov	r0, r5
 800a74e:	bd38      	pop	{r3, r4, r5, pc}

0800a750 <_malloc_r>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	1ccd      	adds	r5, r1, #3
 800a754:	f025 0503 	bic.w	r5, r5, #3
 800a758:	3508      	adds	r5, #8
 800a75a:	2d0c      	cmp	r5, #12
 800a75c:	bf38      	it	cc
 800a75e:	250c      	movcc	r5, #12
 800a760:	2d00      	cmp	r5, #0
 800a762:	4606      	mov	r6, r0
 800a764:	db01      	blt.n	800a76a <_malloc_r+0x1a>
 800a766:	42a9      	cmp	r1, r5
 800a768:	d903      	bls.n	800a772 <_malloc_r+0x22>
 800a76a:	230c      	movs	r3, #12
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	2000      	movs	r0, #0
 800a770:	bd70      	pop	{r4, r5, r6, pc}
 800a772:	f000 f869 	bl	800a848 <__malloc_lock>
 800a776:	4a21      	ldr	r2, [pc, #132]	; (800a7fc <_malloc_r+0xac>)
 800a778:	6814      	ldr	r4, [r2, #0]
 800a77a:	4621      	mov	r1, r4
 800a77c:	b991      	cbnz	r1, 800a7a4 <_malloc_r+0x54>
 800a77e:	4c20      	ldr	r4, [pc, #128]	; (800a800 <_malloc_r+0xb0>)
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	b91b      	cbnz	r3, 800a78c <_malloc_r+0x3c>
 800a784:	4630      	mov	r0, r6
 800a786:	f000 f83d 	bl	800a804 <_sbrk_r>
 800a78a:	6020      	str	r0, [r4, #0]
 800a78c:	4629      	mov	r1, r5
 800a78e:	4630      	mov	r0, r6
 800a790:	f000 f838 	bl	800a804 <_sbrk_r>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d124      	bne.n	800a7e2 <_malloc_r+0x92>
 800a798:	230c      	movs	r3, #12
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f854 	bl	800a84a <__malloc_unlock>
 800a7a2:	e7e4      	b.n	800a76e <_malloc_r+0x1e>
 800a7a4:	680b      	ldr	r3, [r1, #0]
 800a7a6:	1b5b      	subs	r3, r3, r5
 800a7a8:	d418      	bmi.n	800a7dc <_malloc_r+0x8c>
 800a7aa:	2b0b      	cmp	r3, #11
 800a7ac:	d90f      	bls.n	800a7ce <_malloc_r+0x7e>
 800a7ae:	600b      	str	r3, [r1, #0]
 800a7b0:	50cd      	str	r5, [r1, r3]
 800a7b2:	18cc      	adds	r4, r1, r3
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 f848 	bl	800a84a <__malloc_unlock>
 800a7ba:	f104 000b 	add.w	r0, r4, #11
 800a7be:	1d23      	adds	r3, r4, #4
 800a7c0:	f020 0007 	bic.w	r0, r0, #7
 800a7c4:	1ac3      	subs	r3, r0, r3
 800a7c6:	d0d3      	beq.n	800a770 <_malloc_r+0x20>
 800a7c8:	425a      	negs	r2, r3
 800a7ca:	50e2      	str	r2, [r4, r3]
 800a7cc:	e7d0      	b.n	800a770 <_malloc_r+0x20>
 800a7ce:	428c      	cmp	r4, r1
 800a7d0:	684b      	ldr	r3, [r1, #4]
 800a7d2:	bf16      	itet	ne
 800a7d4:	6063      	strne	r3, [r4, #4]
 800a7d6:	6013      	streq	r3, [r2, #0]
 800a7d8:	460c      	movne	r4, r1
 800a7da:	e7eb      	b.n	800a7b4 <_malloc_r+0x64>
 800a7dc:	460c      	mov	r4, r1
 800a7de:	6849      	ldr	r1, [r1, #4]
 800a7e0:	e7cc      	b.n	800a77c <_malloc_r+0x2c>
 800a7e2:	1cc4      	adds	r4, r0, #3
 800a7e4:	f024 0403 	bic.w	r4, r4, #3
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d005      	beq.n	800a7f8 <_malloc_r+0xa8>
 800a7ec:	1a21      	subs	r1, r4, r0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 f808 	bl	800a804 <_sbrk_r>
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	d0cf      	beq.n	800a798 <_malloc_r+0x48>
 800a7f8:	6025      	str	r5, [r4, #0]
 800a7fa:	e7db      	b.n	800a7b4 <_malloc_r+0x64>
 800a7fc:	200042bc 	.word	0x200042bc
 800a800:	200042c0 	.word	0x200042c0

0800a804 <_sbrk_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4c06      	ldr	r4, [pc, #24]	; (800a820 <_sbrk_r+0x1c>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4605      	mov	r5, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	6023      	str	r3, [r4, #0]
 800a810:	f7f6 fe7c 	bl	800150c <_sbrk>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_sbrk_r+0x1a>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_sbrk_r+0x1a>
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	2000436c 	.word	0x2000436c

0800a824 <__ascii_mbtowc>:
 800a824:	b082      	sub	sp, #8
 800a826:	b901      	cbnz	r1, 800a82a <__ascii_mbtowc+0x6>
 800a828:	a901      	add	r1, sp, #4
 800a82a:	b142      	cbz	r2, 800a83e <__ascii_mbtowc+0x1a>
 800a82c:	b14b      	cbz	r3, 800a842 <__ascii_mbtowc+0x1e>
 800a82e:	7813      	ldrb	r3, [r2, #0]
 800a830:	600b      	str	r3, [r1, #0]
 800a832:	7812      	ldrb	r2, [r2, #0]
 800a834:	1c10      	adds	r0, r2, #0
 800a836:	bf18      	it	ne
 800a838:	2001      	movne	r0, #1
 800a83a:	b002      	add	sp, #8
 800a83c:	4770      	bx	lr
 800a83e:	4610      	mov	r0, r2
 800a840:	e7fb      	b.n	800a83a <__ascii_mbtowc+0x16>
 800a842:	f06f 0001 	mvn.w	r0, #1
 800a846:	e7f8      	b.n	800a83a <__ascii_mbtowc+0x16>

0800a848 <__malloc_lock>:
 800a848:	4770      	bx	lr

0800a84a <__malloc_unlock>:
 800a84a:	4770      	bx	lr

0800a84c <__ascii_wctomb>:
 800a84c:	b149      	cbz	r1, 800a862 <__ascii_wctomb+0x16>
 800a84e:	2aff      	cmp	r2, #255	; 0xff
 800a850:	bf85      	ittet	hi
 800a852:	238a      	movhi	r3, #138	; 0x8a
 800a854:	6003      	strhi	r3, [r0, #0]
 800a856:	700a      	strbls	r2, [r1, #0]
 800a858:	f04f 30ff 	movhi.w	r0, #4294967295
 800a85c:	bf98      	it	ls
 800a85e:	2001      	movls	r0, #1
 800a860:	4770      	bx	lr
 800a862:	4608      	mov	r0, r1
 800a864:	4770      	bx	lr
	...

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
