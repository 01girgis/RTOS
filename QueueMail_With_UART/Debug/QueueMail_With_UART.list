
QueueMail_With_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a32c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  0800a500  0800a500  0001a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad88  0800ad88  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad88  0800ad88  0001ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad90  0800ad90  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ad98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041c4  200001ec  0800af84  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043b0  0800af84  000243b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e08f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e24  00000000  00000000  0003e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001848  00000000  00000000  000420d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  00043918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026fc3  00000000  00000000  00044f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014352  00000000  00000000  0006bf53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0041  00000000  00000000  000802a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001602e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ffc  00000000  00000000  00160364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4e4 	.word	0x0800a4e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800a4e4 	.word	0x0800a4e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <vApplicationMallocFailedHook>:
/* Hook prototypes */
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000208 	.word	0x20000208
 8000f28:	2000025c 	.word	0x2000025c

08000f2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b092      	sub	sp, #72	; 0x48
 8000f30:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of pipe */
  osMessageQDef(pipe, 16, uint16_t);
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_FREERTOS_Init+0x74>)
 8000f34:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pipeHandle = osMessageCreate(osMessageQ(pipe), NULL);
 8000f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 f851 	bl	8005fec <osMessageCreate>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_FREERTOS_Init+0x78>)
 8000f4e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of thread_sensor */
  osThreadDef(thread_sensor, thread_sensor_func, osPriorityHigh, 0, 128);
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_FREERTOS_Init+0x7c>)
 8000f52:	f107 041c 	add.w	r4, r7, #28
 8000f56:	461d      	mov	r5, r3
 8000f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_sensorHandle = osThreadCreate(osThread(thread_sensor), NULL);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 ff3b 	bl	8005de6 <osThreadCreate>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_FREERTOS_Init+0x80>)
 8000f74:	601a      	str	r2, [r3, #0]

  /* definition and creation of thread_uart */
  osThreadDef(thread_uart, thread_uart_func, osPriorityNormal, 0, 128);
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_FREERTOS_Init+0x84>)
 8000f78:	463c      	mov	r4, r7
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thread_uartHandle = osThreadCreate(osThread(thread_uart), NULL);
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 ff2a 	bl	8005de6 <osThreadCreate>
 8000f92:	4602      	mov	r2, r0
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_FREERTOS_Init+0x88>)
 8000f96:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f98:	bf00      	nop
 8000f9a:	3748      	adds	r7, #72	; 0x48
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa0:	0800a500 	.word	0x0800a500
 8000fa4:	200042c4 	.word	0x200042c4
 8000fa8:	0800a520 	.word	0x0800a520
 8000fac:	200042cc 	.word	0x200042cc
 8000fb0:	0800a548 	.word	0x0800a548
 8000fb4:	200042c8 	.word	0x200042c8

08000fb8 <thread_sensor_func>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_thread_sensor_func */
void thread_sensor_func(void const * argument)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b097      	sub	sp, #92	; 0x5c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	int8_t com_rslt;

	/* Start BMP280 and change settings */
	//LCD_Printf("Connecting to BMP280...\n");
	bmp280_t bmp280;
	bmp280.i2c_handle = &hi2c1;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <thread_sensor_func+0xe4>)
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	bmp280.dev_addr = BMP280_I2C_ADDRESS1;
 8000fc4:	2376      	movs	r3, #118	; 0x76
 8000fc6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	com_rslt = BMP280_init(&bmp280);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fc28 	bl	8001824 <BMP280_init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	com_rslt += BMP280_set_power_mode(BMP280_NORMAL_MODE);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 fda0 	bl	8001b20 <BMP280_set_power_mode>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	com_rslt += BMP280_set_work_mode(BMP280_STANDARD_RESOLUTION_MODE);
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	f000 fe1d 	bl	8001c30 <BMP280_set_work_mode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ffe:	4413      	add	r3, r2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	com_rslt += BMP280_set_standby_durn(BMP280_STANDBY_TIME_1_MS);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fdcc 	bl	8001ba4 <BMP280_set_standby_durn>
 800100c:	4603      	mov	r3, r0
 800100e:	b2da      	uxtb	r2, r3
 8001010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001014:	4413      	add	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (com_rslt != SUCCESS) {
 800101c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <thread_sensor_func+0x78>


		    LCD_Printf("Check BMP280 connection!\nProgram terminated");
 8001024:	481e      	ldr	r0, [pc, #120]	; (80010a0 <thread_sensor_func+0xe8>)
 8001026:	f004 fdbd 	bl	8005ba4 <LCD_Printf>
	        exit(0);
 800102a:	2000      	movs	r0, #0
 800102c:	f007 f9a8 	bl	8008380 <exit>
	}

	LCD_Printf("Connection successful!\n");
 8001030:	481c      	ldr	r0, [pc, #112]	; (80010a4 <thread_sensor_func+0xec>)
 8001032:	f004 fdb7 	bl	8005ba4 <LCD_Printf>
  {
	  /* Read temperature and pressure */

	  /*pipe line start*/
	  	 var * flow;
	  	 flow = (var * )osMailAlloc(pipeHandle,osWaitForever);
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <thread_sensor_func+0xf0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 31ff 	mov.w	r1, #4294967295
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fffd 	bl	800603e <osMailAlloc>
 8001044:	6538      	str	r0, [r7, #80]	; 0x50
	  	 if (flow != NULL){
 8001046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <thread_sensor_func+0xd8>
	  		 /*read to send data */
	  		 flow->temp = BMP280_read_temperature_double(&d1);
 800104c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f949 	bl	80022e8 <BMP280_read_temperature_double>
 8001056:	4603      	mov	r3, r0
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa83 	bl	8000564 <__aeabi_i2d>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001064:	e9c2 3400 	strd	r3, r4, [r2]
	  		 flow->pres = BMP280_read_pressure_double(&d2);
 8001068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f965 	bl	800233c <BMP280_read_pressure_double>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa75 	bl	8000564 <__aeabi_i2d>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001080:	e9c2 3402 	strd	r3, r4, [r2, #8]
	  		 osMailPut(pipeHandle,flow);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <thread_sensor_func+0xf0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800108a:	4618      	mov	r0, r3
 800108c:	f004 ffec 	bl	8006068 <osMailPut>
	  	 }
    osDelay(5000);
 8001090:	f241 3088 	movw	r0, #5000	; 0x1388
 8001094:	f004 fef3 	bl	8005e7e <osDelay>
  {
 8001098:	e7cd      	b.n	8001036 <thread_sensor_func+0x7e>
 800109a:	bf00      	nop
 800109c:	200042d0 	.word	0x200042d0
 80010a0:	0800a564 	.word	0x0800a564
 80010a4:	0800a590 	.word	0x0800a590
 80010a8:	200042c4 	.word	0x200042c4

080010ac <thread_uart_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_uart_func */
void thread_uart_func(void const * argument)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80010b2:	af02      	add	r7, sp, #8
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	6018      	str	r0, [r3, #0]
	for(;;)
  {
	  /* pipe end */
      var * flow;
      osEvent  ev;
      ev = osMailGet(pipeHandle,osWaitForever);
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <thread_uart_func+0x7c>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 f80d 	bl	80060e4 <osMailGet>
      //data verify
      //uint8_t text[] = " UART IS ON \n";
      //HAL_UART_Transmit(&huart2, text, sizeof(text), HAL_MAX_DELAY);
      if (ev.status == osEventMail){
 80010ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	d126      	bne.n	8001120 <thread_uart_func+0x74>
    	  //uart_verify
    	  //getting
    	  flow = (var *) ev.value.p;
 80010d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80010d6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    	  char  buf[512];
    	  double get_d1 =  flow->temp;
 80010da:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80010de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010e2:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
    	  char rx = snprintf(buf, 100 ,"the temprature  is %0.4f" ,get_d1);
 80010e6:	f107 0008 	add.w	r0, r7, #8
 80010ea:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 80010ee:	e9cd 3400 	strd	r3, r4, [sp]
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <thread_uart_func+0x80>)
 80010f4:	2164      	movs	r1, #100	; 0x64
 80010f6:	f007 fdeb 	bl	8008cd0 <sniprintf>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
    	  HAL_UART_Transmit(&huart2,  rx , sizeof(rx), HAL_MAX_DELAY);
 8001100:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	2201      	movs	r2, #1
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <thread_uart_func+0x84>)
 800110e:	f003 fc02 	bl	8004916 <HAL_UART_Transmit>
    	  osMailFree(pipeHandle, flow);
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <thread_uart_func+0x7c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f856 	bl	80061cc <osMailFree>
      }
    osDelay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f004 feac 	bl	8005e7e <osDelay>
  {
 8001126:	e7c7      	b.n	80010b8 <thread_uart_func+0xc>
 8001128:	200042c4 	.word	0x200042c4
 800112c:	0800a5a8 	.word	0x0800a5a8
 8001130:	20004364 	.word	0x20004364

08001134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011c0:	f001 fbbe 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_GPIO_Init+0xd8>)
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_GPIO_Init+0xdc>)
 80011da:	f001 fa1f 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011de:	2320      	movs	r3, #32
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011f6:	f001 fa11 	bl	800261c <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	10210000 	.word	0x10210000
 8001210:	40020800 	.word	0x40020800

08001214 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f001 fb8f 	bl	8002974 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f8e8 	bl	8001430 <Error_Handler>
  }

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200042d0 	.word	0x200042d0
 8001268:	40005400 	.word	0x40005400
 800126c:	00061a80 	.word	0x00061a80

08001270 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_I2C_MspInit+0x84>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12c      	bne.n	80012ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b4:	2312      	movs	r3, #18
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c0:	2304      	movs	r3, #4
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <HAL_I2C_MspInit+0x8c>)
 80012cc:	f001 f9a6 	bl	800261c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 80012da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_I2C_MspInit+0x88>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40005400 	.word	0x40005400
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001304:	f001 f844 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001308:	f000 f80e 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130c:	f7ff ff12 	bl	8001134 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001310:	f7ff ff80 	bl	8001214 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001314:	f000 f99a 	bl	800164c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001318:	f004 f88c 	bl	8005434 <LCD_Init>
  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800131c:	f7ff fe06 	bl	8000f2c <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 8001320:	f004 fd5a 	bl	8005dd8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  while (1)
 8001324:	e7fe      	b.n	8001324 <main+0x24>
	...

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	; 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	2234      	movs	r2, #52	; 0x34
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f007 f865 	bl	8008406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <SystemClock_Config+0xdc>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <SystemClock_Config+0xdc>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	; 0x40
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <SystemClock_Config+0xdc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <SystemClock_Config+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a25      	ldr	r2, [pc, #148]	; (8001408 <SystemClock_Config+0xe0>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <SystemClock_Config+0xe0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001388:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800138c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001398:	2304      	movs	r3, #4
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800139c:	23b4      	movs	r3, #180	; 0xb4
 800139e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fdcb 	bl	8003f4c <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013bc:	f000 f838 	bl	8001430 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013c0:	f002 fa88 	bl	80038d4 <HAL_PWREx_EnableOverDrive>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013ca:	f000 f831 	bl	8001430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2105      	movs	r1, #5
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fac1 	bl	8003974 <HAL_RCC_ClockConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013f8:	f000 f81a 	bl	8001430 <Error_Handler>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3750      	adds	r7, #80	; 0x50
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f000 ffd9 	bl	80023d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40001400 	.word	0x40001400

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x54>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_MspInit+0x54>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x54>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_MspInit+0x54>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_MspInit+0x54>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_MspInit+0x54>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	f06f 0001 	mvn.w	r0, #1
 8001486:	f001 f89f 	bl	80025c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	2037      	movs	r0, #55	; 0x37
 80014ae:	f001 f88b 	bl	80025c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 80014b2:	2037      	movs	r0, #55	; 0x37
 80014b4:	f001 f8a4 	bl	8002600 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_InitTick+0xa4>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_InitTick+0xa4>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_InitTick+0xa4>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fb62 	bl	8003ba8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014e4:	f002 fb38 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	4a13      	ldr	r2, [pc, #76]	; (8001540 <HAL_InitTick+0xa8>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	3b01      	subs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_InitTick+0xac>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_InitTick+0xb0>)
 8001500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_InitTick+0xac>)
 8001504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001508:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_InitTick+0xac>)
 800150c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_InitTick+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_InitTick+0xac>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_InitTick+0xac>)
 800151e:	f002 ff6f 	bl	8004400 <HAL_TIM_Base_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d104      	bne.n	8001532 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <HAL_InitTick+0xac>)
 800152a:	f002 ff9e 	bl	800446a <HAL_TIM_Base_Start_IT>
 800152e:	4603      	mov	r3, r0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3730      	adds	r7, #48	; 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	431bde83 	.word	0x431bde83
 8001544:	20004324 	.word	0x20004324
 8001548:	40001400 	.word	0x40001400

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM7_IRQHandler+0x10>)
 8001586:	f002 ff94 	bl	80044b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20004324 	.word	0x20004324

08001594 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800159e:	f006 fee9 	bl	8008374 <__errno>
 80015a2:	4602      	mov	r2, r0
 80015a4:	2316      	movs	r3, #22
 80015a6:	6013      	str	r3, [r2, #0]
	return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015c6:	e7fe      	b.n	80015c6 <_exit+0x12>

080015c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x50>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x16>
		heap_end = &end;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <_sbrk+0x50>)
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <_sbrk+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <_sbrk+0x50>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <_sbrk+0x50>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4413      	add	r3, r2
 80015ec:	466a      	mov	r2, sp
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d907      	bls.n	8001602 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015f2:	f006 febf 	bl	8008374 <__errno>
 80015f6:	4602      	mov	r2, r0
 80015f8:	230c      	movs	r3, #12
 80015fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e006      	b.n	8001610 <_sbrk+0x48>
	}

	heap_end += incr;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <_sbrk+0x50>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a03      	ldr	r2, [pc, #12]	; (8001618 <_sbrk+0x50>)
 800160c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000045c 	.word	0x2000045c
 800161c:	200043b0 	.word	0x200043b0

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <SystemInit+0x28>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SystemInit+0x28>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x28>)
 8001636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163a:	609a      	str	r2, [r3, #8]
#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART2_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART2_UART_Init+0x4c>)
 8001684:	f003 f8fa 	bl	800487c <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f7ff fecf 	bl	8001430 <Error_Handler>
  }

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20004364 	.word	0x20004364
 800169c:	40004400 	.word	0x40004400

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016fa:	230c      	movs	r3, #12
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170a:	2307      	movs	r3, #7
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <HAL_UART_MspInit+0x8c>)
 8001716:	f000 ff81 	bl	800261c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40004400 	.word	0x40004400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001734:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001746:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
  ldr  r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800174e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800175a:	f7ff ff61 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f006 fe23 	bl	80083a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff fdcd 	bl	8001300 <main>
  bx  lr    
 8001766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001768:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800176c:	0800ad98 	.word	0x0800ad98
  ldr  r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001774:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001778:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800177c:	200043b0 	.word	0x200043b0

08001780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC_IRQHandler>
	...

08001784 <BMP280_I2C_Write>:
 *
 */
static inline s8 BMP280_I2C_Write (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b087      	sub	sp, #28
 8001788:	af04      	add	r7, sp, #16
 800178a:	603a      	str	r2, [r7, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <BMP280_I2C_Write+0x4c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a18      	ldr	r0, [r3, #32]
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	b299      	uxth	r1, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	b29c      	uxth	r4, r3
 80017ac:	797b      	ldrb	r3, [r7, #5]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2264      	movs	r2, #100	; 0x64
 80017b2:	9202      	str	r2, [sp, #8]
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	4622      	mov	r2, r4
 80017be:	f001 fa11 	bl	8002be4 <HAL_I2C_Mem_Write>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b25b      	sxtb	r3, r3
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200043a4 	.word	0x200043a4

080017d4 <BMP280_I2C_Read>:
 *
 */
static inline s8 BMP280_I2C_Read (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af04      	add	r7, sp, #16
 80017da:	603a      	str	r2, [r7, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <BMP280_I2C_Read+0x4c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a18      	ldr	r0, [r3, #32]
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	b299      	uxth	r1, r3
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	b29c      	uxth	r4, r3
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2264      	movs	r2, #100	; 0x64
 8001802:	9202      	str	r2, [sp, #8]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	4622      	mov	r2, r4
 800180e:	f001 fae3 	bl	8002dd8 <HAL_I2C_Mem_Read>
 8001812:	4603      	mov	r3, r0
 8001814:	b25b      	sxtb	r3, r3
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	200043a4 	.word	0x200043a4

08001824 <BMP280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_init(bmp280_t *bmp280)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800182c:	23ff      	movs	r3, #255	; 0xff
 800182e:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001830:	2300      	movs	r3, #0
 8001832:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 8001834:	2305      	movs	r3, #5
 8001836:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 8001838:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <BMP280_init+0xc4>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
#ifdef HAL_I2C_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_I2C_Write;
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <BMP280_init+0xc4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	; (80018ec <BMP280_init+0xc8>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
	p_bmp280->bus_read = BMP280_I2C_Read;
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <BMP280_init+0xc4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <BMP280_init+0xcc>)
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif HAL_SPI_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_SPI_Write;
	p_bmp280->bus_read = BMP280_SPI_Read;
#endif
	if (p_bmp280->dev_addr == 0) {
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <BMP280_init+0xc4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	7f5b      	ldrb	r3, [r3, #29]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <BMP280_init+0x3c>
		p_bmp280->dev_addr = BMP280_I2C_ADDRESS1;
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <BMP280_init+0xc4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2276      	movs	r2, #118	; 0x76
 800185e:	775a      	strb	r2, [r3, #29]
	}
	p_bmp280->delay_msec = HAL_Delay;
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <BMP280_init+0xc4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <BMP280_init+0xd0>)
 8001866:	631a      	str	r2, [r3, #48]	; 0x30

	while (v_chip_id_read_count > 0) {
 8001868:	e01d      	b.n	80018a6 <BMP280_init+0x82>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <BMP280_init+0xc4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <BMP280_init+0xc4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	7f58      	ldrb	r0, [r3, #29]
 8001876:	f107 020d 	add.w	r2, r7, #13
 800187a:	2301      	movs	r3, #1
 800187c:	21d0      	movs	r1, #208	; 0xd0
 800187e:	47a0      	blx	r4
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	2b56      	cmp	r3, #86	; 0x56
 8001888:	d010      	beq.n	80018ac <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 800188a:	7b7b      	ldrb	r3, [r7, #13]
 800188c:	2b57      	cmp	r3, #87	; 0x57
 800188e:	d00d      	beq.n	80018ac <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	2b58      	cmp	r3, #88	; 0x58
 8001894:	d00a      	beq.n	80018ac <BMP280_init+0x88>
			break;
		v_chip_id_read_count--;
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	3b01      	subs	r3, #1
 800189a:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <BMP280_init+0xc4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2001      	movs	r0, #1
 80018a4:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1de      	bne.n	800186a <BMP280_init+0x46>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <BMP280_init+0xc4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	7b7a      	ldrb	r2, [r7, #13]
 80018b2:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <BMP280_init+0x9c>
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e000      	b.n	80018c2 <BMP280_init+0x9e>
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 80018c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <BMP280_init+0xb8>
		/* readout bmp280 calibration parameter structure */
		com_rslt += BMP280_get_calib_param();
 80018cc:	f000 f87c 	bl	80019c8 <BMP280_get_calib_param>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	4413      	add	r3, r2
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 80018dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	200043a4 	.word	0x200043a4
 80018ec:	08001785 	.word	0x08001785
 80018f0:	080017d5 	.word	0x080017d5
 80018f4:	08002415 	.word	0x08002415

080018f8 <BMP280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8001904:	2300      	movs	r3, #0
 8001906:	733b      	strb	r3, [r7, #12]
 8001908:	2300      	movs	r3, #0
 800190a:	737b      	strb	r3, [r7, #13]
 800190c:	2300      	movs	r3, #0
 800190e:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <BMP280_read_uncomp_temperature+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <BMP280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8001918:	2381      	movs	r3, #129	; 0x81
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e018      	b.n	8001950 <BMP280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <BMP280_read_uncomp_temperature+0x64>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <BMP280_read_uncomp_temperature+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	7f58      	ldrb	r0, [r3, #29]
 800192a:	f107 020c 	add.w	r2, r7, #12
 800192e:	2303      	movs	r3, #3
 8001930:	21fa      	movs	r1, #250	; 0xfa
 8001932:	47a0      	blx	r4
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 8001938:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 800193a:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 800193c:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 800193e:	011b      	lsls	r3, r3, #4
				| (((u32)(
 8001940:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8001942:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8001944:	0912      	lsrs	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8001948:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	200043a4 	.word	0x200043a4

08001960 <BMP280_read_uncomp_pressure>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_pressure(
		s32 *v_uncomp_pressure_s32)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001968:	23ff      	movs	r3, #255	; 0xff
 800196a:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8[0] - Pressure MSB
	 a_data_u8[1] - Pressure LSB
	 a_data_u8[2] - Pressure LSB
	 */
	u8 a_data_u8[BMP280_PRESSURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 800196c:	2300      	movs	r3, #0
 800196e:	733b      	strb	r3, [r7, #12]
 8001970:	2300      	movs	r3, #0
 8001972:	737b      	strb	r3, [r7, #13]
 8001974:	2300      	movs	r3, #0
 8001976:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <BMP280_read_uncomp_pressure+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <BMP280_read_uncomp_pressure+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8001980:	2381      	movs	r3, #129	; 0x81
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e018      	b.n	80019b8 <BMP280_read_uncomp_pressure+0x58>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <BMP280_read_uncomp_pressure+0x64>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <BMP280_read_uncomp_pressure+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	7f58      	ldrb	r0, [r3, #29]
 8001992:	f107 020c 	add.w	r2, r7, #12
 8001996:	2303      	movs	r3, #3
 8001998:	21f7      	movs	r1, #247	; 0xf7
 800199a:	47a0      	blx	r4
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
				BMP280_PRESSURE_MSB_REG, a_data_u8,
				BMP280_PRESSURE_DATA_LENGTH);
		*v_uncomp_pressure_s32 = (s32)((((u32)(
				a_data_u8[BMP280_PRESSURE_MSB_DATA]))
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 80019a2:	031a      	lsls	r2, r3, #12
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 80019a6:	011b      	lsls	r3, r3, #4
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 80019a8:	4313      	orrs	r3, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 80019aa:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 80019ac:	0912      	lsrs	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 80019b0:	4313      	orrs	r3, r2
		*v_uncomp_pressure_s32 = (s32)((((u32)(
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 80019b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	200043a4 	.word	0x200043a4

080019c8 <BMP280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_get_calib_param(void)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80019ce:	23ff      	movs	r3, #255	; 0xff
 80019d0:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <BMP280_get_calib_param+0x154>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <BMP280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 80019ea:	2381      	movs	r3, #129	; 0x81
 80019ec:	77fb      	strb	r3, [r7, #31]
 80019ee:	e08f      	b.n	8001b10 <BMP280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <BMP280_get_calib_param+0x154>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80019f6:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <BMP280_get_calib_param+0x154>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7f58      	ldrb	r0, [r3, #29]
 80019fc:	1d3a      	adds	r2, r7, #4
 80019fe:	2318      	movs	r3, #24
 8001a00:	2188      	movs	r1, #136	; 0x88
 8001a02:	47a0      	blx	r4
 8001a04:	4603      	mov	r3, r0
 8001a06:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001a08:	797b      	ldrb	r3, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a0a:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	793b      	ldrb	r3, [r7, #4]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a22:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001a24:	b219      	sxth	r1, r3
					| a_data_u8[
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	b212      	sxth	r2, r2
 8001a32:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001a34:	7a7b      	ldrb	r3, [r7, #9]
 8001a36:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a38:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001a3a:	b219      	sxth	r1, r3
					| a_data_u8[
 8001a3c:	7a3b      	ldrb	r3, [r7, #8]
 8001a3e:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	b212      	sxth	r2, r2
 8001a48:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a4c:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	7abb      	ldrb	r3, [r7, #10]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001a60:	7b7b      	ldrb	r3, [r7, #13]
 8001a62:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a64:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001a66:	b219      	sxth	r1, r3
					| a_data_u8[
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	b212      	sxth	r2, r2
 8001a74:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a7a:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001a7c:	b219      	sxth	r1, r3
					| a_data_u8[
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b212      	sxth	r2, r2
 8001a8a:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001a8c:	7c7b      	ldrb	r3, [r7, #17]
 8001a8e:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001a90:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001a92:	b219      	sxth	r1, r3
					| a_data_u8[
 8001a94:	7c3b      	ldrb	r3, [r7, #16]
 8001a96:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	b212      	sxth	r2, r2
 8001aa0:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001aa6:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001aa8:	b219      	sxth	r1, r3
					| a_data_u8[
 8001aaa:	7cbb      	ldrb	r3, [r7, #18]
 8001aac:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	b212      	sxth	r2, r2
 8001ab6:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001ab8:	7d7b      	ldrb	r3, [r7, #21]
 8001aba:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001abc:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001abe:	b219      	sxth	r1, r3
					| a_data_u8[
 8001ac0:	7d3b      	ldrb	r3, [r7, #20]
 8001ac2:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	b212      	sxth	r2, r2
 8001acc:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001ad2:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001ad4:	b219      	sxth	r1, r3
					| a_data_u8[
 8001ad6:	7dbb      	ldrb	r3, [r7, #22]
 8001ad8:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	b212      	sxth	r2, r2
 8001ae2:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001ae4:	7e7b      	ldrb	r3, [r7, #25]
 8001ae6:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001ae8:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001aea:	b219      	sxth	r1, r3
					| a_data_u8[
 8001aec:	7e3b      	ldrb	r3, [r7, #24]
 8001aee:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	b212      	sxth	r2, r2
 8001af8:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001afa:	7efb      	ldrb	r3, [r7, #27]
 8001afc:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8001afe:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001b00:	b219      	sxth	r1, r3
					| a_data_u8[
 8001b02:	7ebb      	ldrb	r3, [r7, #26]
 8001b04:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <BMP280_get_calib_param+0x154>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	b212      	sxth	r2, r2
 8001b0e:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8001b10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3724      	adds	r7, #36	; 0x24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	200043a4 	.word	0x200043a4

08001b20 <BMP280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_power_mode(u8 v_power_mode_u8)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8 = BMP280_INIT_VALUE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <BMP280_set_power_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001b3a:	2381      	movs	r3, #129	; 0x81
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e029      	b.n	8001b94 <BMP280_set_power_mode+0x74>
	} else {
		if (v_power_mode_u8 <= BMP280_NORMAL_MODE) {
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d824      	bhi.n	8001b90 <BMP280_set_power_mode+0x70>
			/* write the power mode*/
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
					<< BMP280_SHIFT_BIT_POSITION_BY_05_BITS)
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	b2da      	uxtb	r2, r3
					+ (p_bmp280->oversamp_pressure
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
					<< BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	b2db      	uxtb	r3, r3
					+ (p_bmp280->oversamp_pressure
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2da      	uxtb	r2, r3
					+ v_power_mode_u8;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	4413      	add	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8001b68:	73bb      	strb	r3, [r7, #14]
			com_rslt = p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	7f58      	ldrb	r0, [r3, #29]
 8001b76:	f107 020e 	add.w	r2, r7, #14
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	21f4      	movs	r1, #244	; 0xf4
 8001b7e:	47a0      	blx	r4
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
					BMP280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
			/* Delay added concerning the low speed of power up system to
			facilitate the proper setting of power mode */
			p_bmp280->delay_msec(T_INIT_MAX);
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <BMP280_set_power_mode+0x80>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2014      	movs	r0, #20
 8001b8c:	4798      	blx	r3
 8001b8e:	e001      	b.n	8001b94 <BMP280_set_power_mode+0x74>
		} else {
			com_rslt = E_BMP280_OUT_OF_RANGE;
 8001b90:	23fe      	movs	r3, #254	; 0xfe
 8001b92:	73fb      	strb	r3, [r7, #15]
		}
	}
	return com_rslt;
 8001b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	200043a4 	.word	0x200043a4

08001ba4 <BMP280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_standby_durn(u8 v_standby_durn_u8)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001bae:	23ff      	movs	r3, #255	; 0xff
 8001bb0:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <BMP280_set_standby_durn+0x88>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <BMP280_set_standby_durn+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001bbe:	2381      	movs	r3, #129	; 0x81
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e02d      	b.n	8001c20 <BMP280_set_standby_durn+0x7c>
	} else {
		/* write the standby duration*/
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <BMP280_set_standby_durn+0x88>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <BMP280_set_standby_durn+0x88>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	7f58      	ldrb	r0, [r3, #29]
 8001bd0:	f107 020e 	add.w	r2, r7, #14
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	21f5      	movs	r1, #245	; 0xf5
 8001bd8:	47a0      	blx	r4
 8001bda:	4603      	mov	r3, r0
 8001bdc:	73fb      	strb	r3, [r7, #15]
				BMP280_CONFIG_REG_STANDBY_DURN__REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11c      	bne.n	8001c20 <BMP280_set_standby_durn+0x7c>
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	73bb      	strb	r3, [r7, #14]
					BMP280_CONFIG_REG_STANDBY_DURN,
					v_standby_durn_u8);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <BMP280_set_standby_durn+0x88>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <BMP280_set_standby_durn+0x88>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	7f58      	ldrb	r0, [r3, #29]
 8001c0a:	f107 020e 	add.w	r2, r7, #14
 8001c0e:	2301      	movs	r3, #1
 8001c10:	21f5      	movs	r1, #245	; 0xf5
 8001c12:	47a0      	blx	r4
 8001c14:	4603      	mov	r3, r0
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	73fb      	strb	r3, [r7, #15]
					BMP280_CONFIG_REG_STANDBY_DURN__REG,
					&v_data_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	}
	return com_rslt;
 8001c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	200043a4 	.word	0x200043a4

08001c30 <BMP280_set_work_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_work_mode(u8 v_work_mode_u8)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8001c3a:	23ff      	movs	r3, #255	; 0xff
 8001c3c:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <BMP280_set_work_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8001c4a:	2381      	movs	r3, #129	; 0x81
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e091      	b.n	8001d74 <BMP280_set_work_mode+0x144>
	} else {
	if (v_work_mode_u8 <= BMP280_ULTRA_HIGH_RESOLUTION_MODE) {
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	f200 808c 	bhi.w	8001d70 <BMP280_set_work_mode+0x140>
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	7f58      	ldrb	r0, [r3, #29]
 8001c64:	f107 020e 	add.w	r2, r7, #14
 8001c68:	2301      	movs	r3, #1
 8001c6a:	21f4      	movs	r1, #244	; 0xf4
 8001c6c:	47a0      	blx	r4
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
				p_bmp280->dev_addr,
				BMP280_CTRL_MEAS_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d17c      	bne.n	8001d74 <BMP280_set_work_mode+0x144>
			switch (v_work_mode_u8) {
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d844      	bhi.n	8001d0a <BMP280_set_work_mode+0xda>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <BMP280_set_work_mode+0x58>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001cb3 	.word	0x08001cb3
 8001c90:	08001cc9 	.word	0x08001cc9
 8001c94:	08001cdf 	.word	0x08001cdf
 8001c98:	08001cf5 	.word	0x08001cf5
			/* write work mode*/
			case BMP280_ULTRA_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRALOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001ca6:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_ULTRALOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001cb0:	e02b      	b.n	8001d0a <BMP280_set_work_mode+0xda>
			case BMP280_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					BMP280_LOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_LOWPOWER_OVERSAMP_PRESSURE;
				break;
 8001cc6:	e020      	b.n	8001d0a <BMP280_set_work_mode+0xda>
			case BMP280_STANDARD_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_STANDARDRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_STANDARDRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001cdc:	e015      	b.n	8001d0a <BMP280_set_work_mode+0xda>
			case BMP280_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001cde:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_HIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_HIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001cf2:	e00a      	b.n	8001d0a <BMP280_set_work_mode+0xda>
			case BMP280_ULTRA_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2205      	movs	r2, #5
 8001d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8001d08:	bf00      	nop
			}
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	b25a      	sxtb	r2, r3
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1c:	015b      	lsls	r3, r3, #5
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
				p_bmp280->oversamp_temperature);
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	f023 031c 	bic.w	r3, r3, #28
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	f003 031c 	and.w	r3, r3, #28
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
				p_bmp280->oversamp_pressure);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <BMP280_set_work_mode+0x150>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	7f58      	ldrb	r0, [r3, #29]
 8001d58:	f107 020e 	add.w	r2, r7, #14
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	21f4      	movs	r1, #244	; 0xf4
 8001d60:	47a0      	blx	r4
 8001d62:	4603      	mov	r3, r0
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e001      	b.n	8001d74 <BMP280_set_work_mode+0x144>
				p_bmp280->dev_addr, BMP280_CTRL_MEAS_REG,
				&v_data_u8, BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	} else {
		com_rslt = E_BMP280_OUT_OF_RANGE;
 8001d70:	23fe      	movs	r3, #254	; 0xfe
 8001d72:	73fb      	strb	r3, [r7, #15]
	}
	}
	return com_rslt;
 8001d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	200043a4 	.word	0x200043a4

08001d84 <BMP280_compensate_temperature_double>:
 *  @return
 *	Actual temperature in floating point
 *
 */
double BMP280_compensate_temperature_double(s32 v_uncomp_temperature_s32)
{
 8001d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d88:	b088      	sub	sp, #32
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f04f 0400 	mov.w	r4, #0
 8001d96:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f04f 0400 	mov.w	r4, #0
 8001da2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double temperature = BMP280_INIT_VALUE;
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f04f 0400 	mov.w	r4, #0
 8001dae:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* calculate x1*/
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbd6 	bl	8000564 <__aeabi_i2d>
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <BMP280_compensate_temperature_double+0x1ac>)
 8001dbe:	f7fe fd65 	bl	800088c <__aeabi_ddiv>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	4625      	mov	r5, r4
 8001dc8:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 1024.0) *
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbb7 	bl	8000544 <__aeabi_ui2d>
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <BMP280_compensate_temperature_double+0x1b4>)
 8001ddc:	f7fe fd56 	bl	800088c <__aeabi_ddiv>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fa6e 	bl	80002c8 <__aeabi_dsub>
 8001dec:	4603      	mov	r3, r0
 8001dee:	460c      	mov	r4, r1
 8001df0:	4625      	mov	r5, r4
 8001df2:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T2);
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fbb1 	bl	8000564 <__aeabi_i2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fc15 	bl	8000638 <__aeabi_dmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* calculate x2*/
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fba4 	bl	8000564 <__aeabi_i2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e24:	f7fe fd32 	bl	800088c <__aeabi_ddiv>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4625      	mov	r5, r4
 8001e2e:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001e30:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb84 	bl	8000544 <__aeabi_ui2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <BMP280_compensate_temperature_double+0x1b8>)
 8001e42:	f7fe fd23 	bl	800088c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe fa3b 	bl	80002c8 <__aeabi_dsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4625      	mov	r5, r4
 8001e58:	461c      	mov	r4, r3
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fb82 	bl	8000564 <__aeabi_i2d>
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e68:	f7fe fd10 	bl	800088c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4690      	mov	r8, r2
 8001e72:	4699      	mov	r9, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0)) *
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb62 	bl	8000544 <__aeabi_ui2d>
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <BMP280_compensate_temperature_double+0x1b8>)
 8001e86:	f7fe fd01 	bl	800088c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4649      	mov	r1, r9
 8001e92:	f7fe fa19 	bl	80002c8 <__aeabi_dsub>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f7fe fbcb 	bl	8000638 <__aeabi_dmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4625      	mov	r5, r4
 8001ea8:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T3);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb56 	bl	8000564 <__aeabi_i2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fbba 	bl	8000638 <__aeabi_dmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* calculate t_fine*/
	p_bmp280->calib_param.t_fine = (s32)(v_x1_u32r + v_x2_u32r);
 8001ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ed0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed4:	f7fe f9fa 	bl	80002cc <__adddf3>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	4619      	mov	r1, r3
 8001ede:	4622      	mov	r2, r4
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <BMP280_compensate_temperature_double+0x1b0>)
 8001ee2:	681c      	ldr	r4, [r3, #0]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	f7fe fe56 	bl	8000b98 <__aeabi_d2iz>
 8001eec:	4603      	mov	r3, r0
 8001eee:	61a3      	str	r3, [r4, #24]
	/* calculate true pressure*/
	temperature = (v_x1_u32r + v_x2_u32r) / 5120.0;
 8001ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ef8:	f7fe f9e8 	bl	80002cc <__adddf3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <BMP280_compensate_temperature_double+0x1bc>)
 8001f0a:	f7fe fcbf 	bl	800088c <__aeabi_ddiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return temperature;
 8001f16:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f1a:	ec44 3b17 	vmov	d7, r3, r4
}
 8001f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f22:	eef0 0a67 	vmov.f32	s1, s15
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f2e:	bf00      	nop
 8001f30:	40d00000 	.word	0x40d00000
 8001f34:	200043a4 	.word	0x200043a4
 8001f38:	40900000 	.word	0x40900000
 8001f3c:	40c00000 	.word	0x40c00000
 8001f40:	40b40000 	.word	0x40b40000
 8001f44:	00000000 	.word	0x00000000

08001f48 <BMP280_compensate_pressure_double>:
 *  @return
 *	Actual pressure in floating point
 *
 */
double BMP280_compensate_pressure_double(s32 v_uncomp_pressure_s32)
{
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	f04f 0400 	mov.w	r4, #0
 8001f58:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f04f 0400 	mov.w	r4, #0
 8001f64:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double pressure = BMP280_INIT_VALUE;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	f04f 0400 	mov.w	r4, #0
 8001f70:	e9c7 3402 	strd	r3, r4, [r7, #8]

	v_x1_u32r = ((double)p_bmp280->calib_param.t_fine/2.0) - 64000.0;
 8001f74:	4bca      	ldr	r3, [pc, #808]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faf2 	bl	8000564 <__aeabi_i2d>
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f88:	f7fe fc80 	bl	800088c <__aeabi_ddiv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4618      	mov	r0, r3
 8001f92:	4621      	mov	r1, r4
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4bc2      	ldr	r3, [pc, #776]	; (80022a4 <BMP280_compensate_pressure_double+0x35c>)
 8001f9a:	f7fe f995 	bl	80002c8 <__aeabi_dsub>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 8001fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fae:	f7fe fb43 	bl	8000638 <__aeabi_dmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4625      	mov	r5, r4
 8001fb8:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P6) / 32768.0;
 8001fba:	4bb9      	ldr	r3, [pc, #740]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe face 	bl	8000564 <__aeabi_i2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe fb32 	bl	8000638 <__aeabi_dmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4621      	mov	r1, r4
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4bb1      	ldr	r3, [pc, #708]	; (80022a8 <BMP280_compensate_pressure_double+0x360>)
 8001fe2:	f7fe fc53 	bl	800088c <__aeabi_ddiv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 8001fee:	4bac      	ldr	r3, [pc, #688]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fab4 	bl	8000564 <__aeabi_i2d>
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8001ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002000:	f7fe fb1a 	bl	8000638 <__aeabi_dmul>
 8002004:	4603      	mov	r3, r0
 8002006:	460c      	mov	r4, r1
 8002008:	4618      	mov	r0, r3
 800200a:	4621      	mov	r1, r4
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	f7fe f95c 	bl	80002cc <__adddf3>
 8002014:	4603      	mov	r3, r0
 8002016:	460c      	mov	r4, r1
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8002018:	461a      	mov	r2, r3
 800201a:	4623      	mov	r3, r4
 800201c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002020:	f7fe f954 	bl	80002cc <__adddf3>
 8002024:	4603      	mov	r3, r0
 8002026:	460c      	mov	r4, r1
 8002028:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = (v_x2_u32r / 4.0) +
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b9e      	ldr	r3, [pc, #632]	; (80022ac <BMP280_compensate_pressure_double+0x364>)
 8002032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002036:	f7fe fc29 	bl	800088c <__aeabi_ddiv>
 800203a:	4603      	mov	r3, r0
 800203c:	460c      	mov	r4, r1
 800203e:	4625      	mov	r5, r4
 8002040:	461c      	mov	r4, r3
	(((double)p_bmp280->calib_param.dig_P4) * 65536.0);
 8002042:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa8a 	bl	8000564 <__aeabi_i2d>
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <BMP280_compensate_pressure_double+0x368>)
 8002056:	f7fe faef 	bl	8000638 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
	v_x2_u32r = (v_x2_u32r / 4.0) +
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f7fe f933 	bl	80002cc <__adddf3>
 8002066:	4603      	mov	r3, r0
 8002068:	460c      	mov	r4, r1
 800206a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 800206e:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa74 	bl	8000564 <__aeabi_i2d>
 800207c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002080:	f7fe fada 	bl	8000638 <__aeabi_dmul>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	4618      	mov	r0, r3
 800208a:	4621      	mov	r1, r4
		v_x1_u32r * v_x1_u32r / 524288.0 +
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	f7fe fad2 	bl	8000638 <__aeabi_dmul>
 8002094:	4603      	mov	r3, r0
 8002096:	460c      	mov	r4, r1
 8002098:	4618      	mov	r0, r3
 800209a:	4621      	mov	r1, r4
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <BMP280_compensate_pressure_double+0x36c>)
 80020a2:	f7fe fbf3 	bl	800088c <__aeabi_ddiv>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	4625      	mov	r5, r4
 80020ac:	461c      	mov	r4, r3
		((double)p_bmp280->calib_param.dig_P2) * v_x1_u32r) / 524288.0;
 80020ae:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa54 	bl	8000564 <__aeabi_i2d>
 80020bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c0:	f7fe faba 	bl	8000638 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
		v_x1_u32r * v_x1_u32r / 524288.0 +
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f8fe 	bl	80002cc <__adddf3>
 80020d0:	4603      	mov	r3, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	4618      	mov	r0, r3
 80020d6:	4621      	mov	r1, r4
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b75      	ldr	r3, [pc, #468]	; (80022b4 <BMP280_compensate_pressure_double+0x36c>)
 80020de:	f7fe fbd5 	bl	800088c <__aeabi_ddiv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	460c      	mov	r4, r1
 80020e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <BMP280_compensate_pressure_double+0x360>)
 80020f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020f4:	f7fe fbca 	bl	800088c <__aeabi_ddiv>
 80020f8:	4603      	mov	r3, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	4618      	mov	r0, r3
 80020fe:	4621      	mov	r1, r4
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <BMP280_compensate_pressure_double+0x370>)
 8002106:	f7fe f8e1 	bl	80002cc <__adddf3>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	4625      	mov	r5, r4
 8002110:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P1);
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	88db      	ldrh	r3, [r3, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa13 	bl	8000544 <__aeabi_ui2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe fa87 	bl	8000638 <__aeabi_dmul>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	pressure = 1048576.0 - (double)v_uncomp_pressure_s32;
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fa16 	bl	8000564 <__aeabi_i2d>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	495d      	ldr	r1, [pc, #372]	; (80022bc <BMP280_compensate_pressure_double+0x374>)
 8002146:	f7fe f8bf 	bl	80002c8 <__aeabi_dsub>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Avoid exception caused by division by zero */
	if ((v_x1_u32r > 0) || (v_x1_u32r < 0))
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800215e:	f7fe fcfb 	bl	8000b58 <__aeabi_dcmpgt>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <BMP280_compensate_pressure_double+0x238>
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002174:	f7fe fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a7 	beq.w	80022ce <BMP280_compensate_pressure_double+0x386>
		pressure = (pressure - (v_x2_u32r / 4096.0)) *
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <BMP280_compensate_pressure_double+0x378>)
 8002186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218a:	f7fe fb7f 	bl	800088c <__aeabi_ddiv>
 800218e:	4603      	mov	r3, r0
 8002190:	460c      	mov	r4, r1
 8002192:	461a      	mov	r2, r3
 8002194:	4623      	mov	r3, r4
 8002196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219a:	f7fe f895 	bl	80002c8 <__aeabi_dsub>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	4618      	mov	r0, r3
 80021a4:	4621      	mov	r1, r4
 80021a6:	a33c      	add	r3, pc, #240	; (adr r3, 8002298 <BMP280_compensate_pressure_double+0x350>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fa44 	bl	8000638 <__aeabi_dmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	460c      	mov	r4, r1
 80021b4:	4618      	mov	r0, r3
 80021b6:	4621      	mov	r1, r4
 80021b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021bc:	f7fe fb66 	bl	800088c <__aeabi_ddiv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
					6250.0 / v_x1_u32r;
	else
	return BMP280_INVALID_DATA;
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9c7 	bl	8000564 <__aeabi_i2d>
 80021d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021da:	f7fe fa2d 	bl	8000638 <__aeabi_dmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	4618      	mov	r0, r3
 80021e4:	4621      	mov	r1, r4
	pressure * pressure / 2147483648.0;
 80021e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ea:	f7fe fa25 	bl	8000638 <__aeabi_dmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	460c      	mov	r4, r1
 80021f2:	4618      	mov	r0, r3
 80021f4:	4621      	mov	r1, r4
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <BMP280_compensate_pressure_double+0x37c>)
 80021fc:	f7fe fb46 	bl	800088c <__aeabi_ddiv>
 8002200:	4603      	mov	r3, r0
 8002202:	460c      	mov	r4, r1
 8002204:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = pressure * ((double)p_bmp280->calib_param.dig_P8) / 32768.0;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f9a7 	bl	8000564 <__aeabi_i2d>
 8002216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800221a:	f7fe fa0d 	bl	8000638 <__aeabi_dmul>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	4618      	mov	r0, r3
 8002224:	4621      	mov	r1, r4
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <BMP280_compensate_pressure_double+0x360>)
 800222c:	f7fe fb2e 	bl	800088c <__aeabi_ddiv>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 8002238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800223c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002240:	f7fe f844 	bl	80002cc <__adddf3>
 8002244:	4603      	mov	r3, r0
 8002246:	460c      	mov	r4, r1
 8002248:	4625      	mov	r5, r4
 800224a:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <BMP280_compensate_pressure_double+0x358>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f985 	bl	8000564 <__aeabi_i2d>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 800225e:	4620      	mov	r0, r4
 8002260:	4629      	mov	r1, r5
 8002262:	f7fe f833 	bl	80002cc <__adddf3>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	4618      	mov	r0, r3
 800226c:	4621      	mov	r1, r4
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <BMP280_compensate_pressure_double+0x380>)
 8002274:	f7fe fb0a 	bl	800088c <__aeabi_ddiv>
 8002278:	4603      	mov	r3, r0
 800227a:	460c      	mov	r4, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002284:	f7fe f822 	bl	80002cc <__adddf3>
 8002288:	4603      	mov	r3, r0
 800228a:	460c      	mov	r4, r1
 800228c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pressure;
 8002290:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002294:	e01a      	b.n	80022cc <BMP280_compensate_pressure_double+0x384>
 8002296:	bf00      	nop
 8002298:	00000000 	.word	0x00000000
 800229c:	40b86a00 	.word	0x40b86a00
 80022a0:	200043a4 	.word	0x200043a4
 80022a4:	40ef4000 	.word	0x40ef4000
 80022a8:	40e00000 	.word	0x40e00000
 80022ac:	40100000 	.word	0x40100000
 80022b0:	40f00000 	.word	0x40f00000
 80022b4:	41200000 	.word	0x41200000
 80022b8:	3ff00000 	.word	0x3ff00000
 80022bc:	41300000 	.word	0x41300000
 80022c0:	40b00000 	.word	0x40b00000
 80022c4:	41e00000 	.word	0x41e00000
 80022c8:	40300000 	.word	0x40300000
 80022cc:	e003      	b.n	80022d6 <BMP280_compensate_pressure_double+0x38e>
	return BMP280_INVALID_DATA;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	ec44 3b17 	vmov	d7, r3, r4
}
 80022da:	eeb0 0a47 	vmov.f32	s0, s14
 80022de:	eef0 0a67 	vmov.f32	s1, s15
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}

080022e8 <BMP280_read_temperature_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_temperature_double(double *v_temperature_d)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80022f0:	23ff      	movs	r3, #255	; 0xff
 80022f2:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_temperature_s32 = BMP280_INIT_VALUE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <BMP280_read_temperature_double+0x50>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <BMP280_read_temperature_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8002300:	2381      	movs	r3, #129	; 0x81
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e011      	b.n	800232a <BMP280_read_temperature_double+0x42>
	} else {
		/* read uncompensated temperature*/
		com_rslt = BMP280_read_uncomp_temperature(
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff faf4 	bl	80018f8 <BMP280_read_uncomp_temperature>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_temperature_s32);
		/* read true temperature as double*/
		*v_temperature_d = BMP280_compensate_temperature_double(
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fd34 	bl	8001d84 <BMP280_compensate_temperature_double>
 800231c:	eeb0 7a40 	vmov.f32	s14, s0
 8002320:	eef0 7a60 	vmov.f32	s15, s1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_temperature_s32);
	}
	return com_rslt;
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200043a4 	.word	0x200043a4

0800233c <BMP280_read_pressure_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_pressure_double(double *v_pressure_d)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8002344:	23ff      	movs	r3, #255	; 0xff
 8002346:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_pressure_s32 = BMP280_INIT_VALUE;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <BMP280_read_pressure_double+0x50>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <BMP280_read_pressure_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8002354:	2381      	movs	r3, #129	; 0x81
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e011      	b.n	800237e <BMP280_read_pressure_double+0x42>
	} else {
		/* read uncompensated pressure*/
		com_rslt = BMP280_read_uncomp_pressure(
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fafe 	bl	8001960 <BMP280_read_uncomp_pressure>
 8002364:	4603      	mov	r3, r0
 8002366:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_pressure_s32);
		/* read true pressure as double*/
		*v_pressure_d = BMP280_compensate_pressure_double(
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fdec 	bl	8001f48 <BMP280_compensate_pressure_double>
 8002370:	eeb0 7a40 	vmov.f32	s14, s0
 8002374:	eef0 7a60 	vmov.f32	s15, s1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_pressure_s32);
	}
	return com_rslt;
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200043a4 	.word	0x200043a4

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_Init+0x40>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_Init+0x40>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_Init+0x40>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 f8fa 	bl	80025b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff f86a 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff f83c 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x20>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x24>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_IncTick+0x24>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	200043a8 	.word	0x200043a8

080023fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_GetTick+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200043a8 	.word	0x200043a8

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff ffee 	bl	80023fc <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d005      	beq.n	800243a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_Delay+0x40>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800243a:	bf00      	nop
 800243c:	f7ff ffde 	bl	80023fc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	429a      	cmp	r2, r3
 800244a:	d8f7      	bhi.n	800243c <HAL_Delay+0x28>
  {
  }
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000008 	.word	0x20000008

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff4c 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025da:	f7ff ff61 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 80025de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f7ff ffb1 	bl	800254c <NVIC_EncodePriority>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff80 	bl	80024f8 <__NVIC_SetPriority>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff54 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e165      	b.n	8002904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8154 	bne.w	80028fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d00b      	beq.n	8002676 <HAL_GPIO_Init+0x5a>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266a:	2b11      	cmp	r3, #17
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b12      	cmp	r3, #18
 8002674:	d130      	bne.n	80026d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0201 	and.w	r2, r3, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0xfc>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ae 	beq.w	80028fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_GPIO_Init+0x2fc>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a5b      	ldr	r2, [pc, #364]	; (8002918 <HAL_GPIO_Init+0x2fc>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <HAL_GPIO_Init+0x2fc>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_GPIO_Init+0x300>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4e      	ldr	r2, [pc, #312]	; (8002920 <HAL_GPIO_Init+0x304>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d025      	beq.n	8002836 <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4d      	ldr	r2, [pc, #308]	; (8002924 <HAL_GPIO_Init+0x308>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4c      	ldr	r2, [pc, #304]	; (8002928 <HAL_GPIO_Init+0x30c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4b      	ldr	r2, [pc, #300]	; (800292c <HAL_GPIO_Init+0x310>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4a      	ldr	r2, [pc, #296]	; (8002930 <HAL_GPIO_Init+0x314>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x20a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a49      	ldr	r2, [pc, #292]	; (8002934 <HAL_GPIO_Init+0x318>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x206>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_GPIO_Init+0x31c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x202>
 800281a:	2306      	movs	r3, #6
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800281e:	2307      	movs	r3, #7
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x21c>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4934      	ldr	r1, [pc, #208]	; (800291c <HAL_GPIO_Init+0x300>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_GPIO_Init+0x320>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_GPIO_Init+0x320>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_GPIO_Init+0x320>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a4:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_GPIO_Init+0x320>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_GPIO_Init+0x320>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_GPIO_Init+0x320>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_GPIO_Init+0x320>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_GPIO_Init+0x320>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae96 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3724      	adds	r7, #36	; 0x24
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40021400 	.word	0x40021400
 8002938:	40021800 	.word	0x40021800
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e11f      	b.n	8002bc6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fc68 	bl	8001270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029d8:	f001 f8be 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80029dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_I2C_Init+0x25c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d807      	bhi.n	80029f8 <HAL_I2C_Init+0x84>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_I2C_Init+0x260>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e006      	b.n	8002a06 <HAL_I2C_Init+0x92>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a77      	ldr	r2, [pc, #476]	; (8002bd8 <HAL_I2C_Init+0x264>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	bf94      	ite	ls
 8002a00:	2301      	movls	r3, #1
 8002a02:	2300      	movhi	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0db      	b.n	8002bc6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a72      	ldr	r2, [pc, #456]	; (8002bdc <HAL_I2C_Init+0x268>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	0c9b      	lsrs	r3, r3, #18
 8002a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a64      	ldr	r2, [pc, #400]	; (8002bd0 <HAL_I2C_Init+0x25c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d802      	bhi.n	8002a48 <HAL_I2C_Init+0xd4>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	e009      	b.n	8002a5c <HAL_I2C_Init+0xe8>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	4a63      	ldr	r2, [pc, #396]	; (8002be0 <HAL_I2C_Init+0x26c>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4956      	ldr	r1, [pc, #344]	; (8002bd0 <HAL_I2C_Init+0x25c>)
 8002a78:	428b      	cmp	r3, r1
 8002a7a:	d80d      	bhi.n	8002a98 <HAL_I2C_Init+0x124>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e59      	subs	r1, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	bf38      	it	cc
 8002a94:	2304      	movcc	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1c4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x150>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x176>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x17e>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1c4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1a4>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1c4>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfe:	f7ff fbfd 	bl	80023fc <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f040 80d9 	bne.w	8002dc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2319      	movs	r3, #25
 8002c18:	2201      	movs	r2, #1
 8002c1a:	496d      	ldr	r1, [pc, #436]	; (8002dd0 <HAL_I2C_Mem_Write+0x1ec>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fc7b 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0cc      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x56>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0c5      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d007      	beq.n	8002c60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2221      	movs	r2, #33	; 0x21
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a4d      	ldr	r2, [pc, #308]	; (8002dd4 <HAL_I2C_Mem_Write+0x1f0>)
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca2:	88f8      	ldrh	r0, [r7, #6]
 8002ca4:	893a      	ldrh	r2, [r7, #8]
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fab6 	bl	8003224 <I2C_RequestMemoryWrite>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d052      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e081      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fcfc 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d107      	bne.n	8002cea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x180>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1aa      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fce8 	bl	8003746 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e016      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	00100002 	.word	0x00100002
 8002dd4:	ffff0000 	.word	0xffff0000

08002dd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7ff fb03 	bl	80023fc <HAL_GetTick>
 8002df6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	f040 8208 	bne.w	8003216 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	2319      	movs	r3, #25
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	497b      	ldr	r1, [pc, #492]	; (8002ffc <HAL_I2C_Mem_Read+0x224>)
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fb81 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e1fb      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Mem_Read+0x56>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e1f4      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d007      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2222      	movs	r2, #34	; 0x22
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a5b      	ldr	r2, [pc, #364]	; (8003000 <HAL_I2C_Mem_Read+0x228>)
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e96:	88f8      	ldrh	r0, [r7, #6]
 8002e98:	893a      	ldrh	r2, [r7, #8]
 8002e9a:	8979      	ldrh	r1, [r7, #10]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fa50 	bl	800334c <I2C_RequestMemoryRead>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1b0      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	623b      	str	r3, [r7, #32]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	623b      	str	r3, [r7, #32]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e184      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d11b      	bne.n	8002f26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e164      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d11b      	bne.n	8002f66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	e144      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f7c:	e138      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	f200 80f1 	bhi.w	800316a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d123      	bne.n	8002fd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fc17 	bl	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e139      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd6:	e10b      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d14e      	bne.n	800307e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_I2C_Mem_Read+0x22c>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa94 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e10e      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000
 8003004:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800307c:	e0b8      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2200      	movs	r2, #0
 8003086:	4966      	ldr	r1, [pc, #408]	; (8003220 <HAL_I2C_Mem_Read+0x448>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa45 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0bf      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2200      	movs	r2, #0
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_I2C_Mem_Read+0x448>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa17 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e091      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003168:	e042      	b.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb2a 	bl	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e04c      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d118      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f47f aec2 	bne.w	8002f7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003216:	2302      	movs	r3, #2
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010004 	.word	0x00010004

08003224 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	2200      	movs	r2, #0
 8003256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f95c 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e05f      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003280:	897b      	ldrh	r3, [r7, #10]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800328e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	492c      	ldr	r1, [pc, #176]	; (8003348 <I2C_RequestMemoryWrite+0x124>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f995 	bl	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e04c      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9ff 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e02b      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
 80032f8:	e021      	b.n	800333e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032fa:	893b      	ldrh	r3, [r7, #8]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b29b      	uxth	r3, r3
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	6a39      	ldr	r1, [r7, #32]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f9d9 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e005      	b.n	8003340 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003334:	893b      	ldrh	r3, [r7, #8]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	00010002 	.word	0x00010002

0800334c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2200      	movs	r2, #0
 800338e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8c0 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0a9      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	4951      	ldr	r1, [pc, #324]	; (8003514 <I2C_RequestMemoryRead+0x1c8>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8f9 	bl	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e096      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	6a39      	ldr	r1, [r7, #32]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f963 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b04      	cmp	r3, #4
 800340a:	d107      	bne.n	800341c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e075      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
 8003430:	e021      	b.n	8003476 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003432:	893b      	ldrh	r3, [r7, #8]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	b29b      	uxth	r3, r3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f93d 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b04      	cmp	r3, #4
 8003456:	d107      	bne.n	8003468 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04f      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f922 	bl	80036c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e034      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f82a 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e013      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	4906      	ldr	r1, [pc, #24]	; (8003514 <I2C_RequestMemoryRead+0x1c8>)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f863 	bl	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	00010002 	.word	0x00010002

08003518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003528:	e025      	b.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d021      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe ff63 	bl	80023fc <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d116      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e023      	b.n	80035be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10d      	bne.n	800359c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	e00c      	b.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0b6      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d4:	e051      	b.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d123      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f043 0204 	orr.w	r2, r3, #4
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e046      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d021      	beq.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fe fee1 	bl	80023fc <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e020      	b.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10c      	bne.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf14      	ite	ne
 8003696:	2301      	movne	r3, #1
 8003698:	2300      	moveq	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e00b      	b.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d18d      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d0:	e02d      	b.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f8ce 	bl	8003874 <I2C_IsAcknowledgeFailed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e02d      	b.n	800373e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d021      	beq.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fe87 	bl	80023fc <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d116      	bne.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e007      	b.n	800373e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d1ca      	bne.n	80036d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003752:	e02d      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f88d 	bl	8003874 <I2C_IsAcknowledgeFailed>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e02d      	b.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d021      	beq.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376c:	f7fe fe46 	bl	80023fc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e007      	b.n	80037c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d1ca      	bne.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d4:	e042      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d119      	bne.n	8003818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0210 	mvn.w	r2, #16
 80037ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e029      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fe fdf0 	bl	80023fc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d1b5      	bne.n	80037d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d11b      	bne.n	80038c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_PWREx_EnableOverDrive+0x90>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038fa:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_PWREx_EnableOverDrive+0x94>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe fd7c 	bl	80023fc <HAL_GetTick>
 8003904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003906:	e009      	b.n	800391c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003908:	f7fe fd78 	bl	80023fc <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003916:	d901      	bls.n	800391c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e01f      	b.n	800395c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800391c:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_PWREx_EnableOverDrive+0x98>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d1ee      	bne.n	8003908 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003930:	f7fe fd64 	bl	80023fc <HAL_GetTick>
 8003934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003936:	e009      	b.n	800394c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003938:	f7fe fd60 	bl	80023fc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003946:	d901      	bls.n	800394c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e007      	b.n	800395c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_PWREx_EnableOverDrive+0x98>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003958:	d1ee      	bne.n	8003938 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	420e0040 	.word	0x420e0040
 800396c:	40007000 	.word	0x40007000
 8003970:	420e0044 	.word	0x420e0044

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cc      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d90c      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e06f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e067      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4934      	ldr	r1, [pc, #208]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a64:	f7fe fcca 	bl	80023fc <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fe fcc6 	bl	80023fc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 020c 	and.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1eb      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d20c      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 f887 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003afe:	4601      	mov	r1, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	5cd3      	ldrb	r3, [r2, r3]
 8003b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fcbc 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0800a5cc 	.word	0x0800a5cc
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800a5dc 	.word	0x0800a5dc

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b84:	f7ff ffdc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0b5b      	lsrs	r3, r3, #13
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800a5dc 	.word	0x0800a5dc

08003ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_GetClockConfig+0x5c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_RCC_GetClockConfig+0x60>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c26:	4bc6      	ldr	r3, [pc, #792]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	f200 817e 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x324>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_RCC_GetSysClockFreq+0x30>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003f31 	.word	0x08003f31
 8003c44:	08003f31 	.word	0x08003f31
 8003c48:	08003f31 	.word	0x08003f31
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003f31 	.word	0x08003f31
 8003c54:	08003f31 	.word	0x08003f31
 8003c58:	08003f31 	.word	0x08003f31
 8003c5c:	08003c7d 	.word	0x08003c7d
 8003c60:	08003f31 	.word	0x08003f31
 8003c64:	08003f31 	.word	0x08003f31
 8003c68:	08003f31 	.word	0x08003f31
 8003c6c:	08003dd9 	.word	0x08003dd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4bb4      	ldr	r3, [pc, #720]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x338>)
 8003c72:	613b      	str	r3, [r7, #16]
       break;
 8003c74:	e15f      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4bb4      	ldr	r3, [pc, #720]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003c78:	613b      	str	r3, [r7, #16]
      break;
 8003c7a:	e15c      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4bb0      	ldr	r3, [pc, #704]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4bae      	ldr	r3, [pc, #696]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04a      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4bab      	ldr	r3, [pc, #684]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	ea03 0501 	and.w	r5, r3, r1
 8003ca8:	ea04 0602 	and.w	r6, r4, r2
 8003cac:	4629      	mov	r1, r5
 8003cae:	4632      	mov	r2, r6
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	0154      	lsls	r4, r2, #5
 8003cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cbe:	014b      	lsls	r3, r1, #5
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	1b49      	subs	r1, r1, r5
 8003cc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	0194      	lsls	r4, r2, #6
 8003cd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cd8:	018b      	lsls	r3, r1, #6
 8003cda:	1a5b      	subs	r3, r3, r1
 8003cdc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	00e2      	lsls	r2, r4, #3
 8003cea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cee:	00d9      	lsls	r1, r3, #3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	195b      	adds	r3, r3, r5
 8003cf6:	eb44 0406 	adc.w	r4, r4, r6
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	0262      	lsls	r2, r4, #9
 8003d04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d08:	0259      	lsls	r1, r3, #9
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4621      	mov	r1, r4
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	f7fc ff64 	bl	8000be8 <__aeabi_uldivmod>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e049      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	f04f 0400 	mov.w	r4, #0
 8003d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	ea03 0501 	and.w	r5, r3, r1
 8003d3e:	ea04 0602 	and.w	r6, r4, r2
 8003d42:	4629      	mov	r1, r5
 8003d44:	4632      	mov	r2, r6
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0154      	lsls	r4, r2, #5
 8003d50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d54:	014b      	lsls	r3, r1, #5
 8003d56:	4619      	mov	r1, r3
 8003d58:	4622      	mov	r2, r4
 8003d5a:	1b49      	subs	r1, r1, r5
 8003d5c:	eb62 0206 	sbc.w	r2, r2, r6
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f04f 0400 	mov.w	r4, #0
 8003d68:	0194      	lsls	r4, r2, #6
 8003d6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d6e:	018b      	lsls	r3, r1, #6
 8003d70:	1a5b      	subs	r3, r3, r1
 8003d72:	eb64 0402 	sbc.w	r4, r4, r2
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	00e2      	lsls	r2, r4, #3
 8003d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d84:	00d9      	lsls	r1, r3, #3
 8003d86:	460b      	mov	r3, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	195b      	adds	r3, r3, r5
 8003d8c:	eb44 0406 	adc.w	r4, r4, r6
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	02a2      	lsls	r2, r4, #10
 8003d9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d9e:	0299      	lsls	r1, r3, #10
 8003da0:	460b      	mov	r3, r1
 8003da2:	4614      	mov	r4, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	4621      	mov	r1, r4
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4623      	mov	r3, r4
 8003db2:	f7fc ff19 	bl	8000be8 <__aeabi_uldivmod>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
 8003dba:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dbc:	4b60      	ldr	r3, [pc, #384]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	613b      	str	r3, [r7, #16]
      break;
 8003dd6:	e0ae      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d04a      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	099b      	lsrs	r3, r3, #6
 8003df4:	f04f 0400 	mov.w	r4, #0
 8003df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea03 0501 	and.w	r5, r3, r1
 8003e04:	ea04 0602 	and.w	r6, r4, r2
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	0154      	lsls	r4, r2, #5
 8003e16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4622      	mov	r2, r4
 8003e20:	1b49      	subs	r1, r1, r5
 8003e22:	eb62 0206 	sbc.w	r2, r2, r6
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	f04f 0400 	mov.w	r4, #0
 8003e2e:	0194      	lsls	r4, r2, #6
 8003e30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e34:	018b      	lsls	r3, r1, #6
 8003e36:	1a5b      	subs	r3, r3, r1
 8003e38:	eb64 0402 	sbc.w	r4, r4, r2
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	00e2      	lsls	r2, r4, #3
 8003e46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4614      	mov	r4, r2
 8003e50:	195b      	adds	r3, r3, r5
 8003e52:	eb44 0406 	adc.w	r4, r4, r6
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	0262      	lsls	r2, r4, #9
 8003e60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e64:	0259      	lsls	r1, r3, #9
 8003e66:	460b      	mov	r3, r1
 8003e68:	4614      	mov	r4, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	f7fc feb6 	bl	8000be8 <__aeabi_uldivmod>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e049      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	f04f 0400 	mov.w	r4, #0
 8003e8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	ea03 0501 	and.w	r5, r3, r1
 8003e9a:	ea04 0602 	and.w	r6, r4, r2
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	0154      	lsls	r4, r2, #5
 8003eac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eb0:	014b      	lsls	r3, r1, #5
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	1b49      	subs	r1, r1, r5
 8003eb8:	eb62 0206 	sbc.w	r2, r2, r6
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f04f 0400 	mov.w	r4, #0
 8003ec4:	0194      	lsls	r4, r2, #6
 8003ec6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	1a5b      	subs	r3, r3, r1
 8003ece:	eb64 0402 	sbc.w	r4, r4, r2
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	00e2      	lsls	r2, r4, #3
 8003edc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ee0:	00d9      	lsls	r1, r3, #3
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	195b      	adds	r3, r3, r5
 8003ee8:	eb44 0406 	adc.w	r4, r4, r6
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	02a2      	lsls	r2, r4, #10
 8003ef6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003efa:	0299      	lsls	r1, r3, #10
 8003efc:	460b      	mov	r3, r1
 8003efe:	4614      	mov	r4, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	4621      	mov	r1, r4
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4623      	mov	r3, r4
 8003f0e:	f7fc fe6b 	bl	8000be8 <__aeabi_uldivmod>
 8003f12:	4603      	mov	r3, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0f1b      	lsrs	r3, r3, #28
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	613b      	str	r3, [r7, #16]
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x338>)
 8003f32:	613b      	str	r3, [r7, #16]
      break;
 8003f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f36:	693b      	ldr	r3, [r7, #16]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8083 	beq.w	800406c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f66:	4b95      	ldr	r3, [pc, #596]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d019      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f72:	4b92      	ldr	r3, [pc, #584]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f7e:	4b8f      	ldr	r3, [pc, #572]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8c:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	d112      	bne.n	8003fbe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f98:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa6:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d05b      	beq.n	800406a <HAL_RCC_OscConfig+0x11e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d157      	bne.n	800406a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e216      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x8a>
 8003fc8:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7b      	ldr	r2, [pc, #492]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e01d      	b.n	8004012 <HAL_RCC_OscConfig+0xc6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fde:	d10c      	bne.n	8003ffa <HAL_RCC_OscConfig+0xae>
 8003fe0:	4b76      	ldr	r3, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a75      	ldr	r2, [pc, #468]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a72      	ldr	r2, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e00b      	b.n	8004012 <HAL_RCC_OscConfig+0xc6>
 8003ffa:	4b70      	ldr	r3, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6f      	ldr	r2, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b6d      	ldr	r3, [pc, #436]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6c      	ldr	r2, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800400c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d013      	beq.n	8004042 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe f9ef 	bl	80023fc <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004022:	f7fe f9eb 	bl	80023fc <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b64      	cmp	r3, #100	; 0x64
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1db      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004034:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0xd6>
 8004040:	e014      	b.n	800406c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe f9db 	bl	80023fc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404a:	f7fe f9d7 	bl	80023fc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1c7      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405c:	4b57      	ldr	r3, [pc, #348]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0xfe>
 8004068:	e000      	b.n	800406c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d06f      	beq.n	8004158 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004084:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800408c:	2b08      	cmp	r3, #8
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004090:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409c:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	d11c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a8:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b4:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x180>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e18f      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4938      	ldr	r1, [pc, #224]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e0:	e03a      	b.n	8004158 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe f984 	bl	80023fc <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fe f980 	bl	80023fc <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e170      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004116:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4925      	ldr	r1, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
 800412a:	e015      	b.n	8004158 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe f963 	bl	80023fc <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe f95f 	bl	80023fc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e14f      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d037      	beq.n	80041d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fe f943 	bl	80023fc <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe f93f 	bl	80023fc <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e12f      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x22e>
 8004198:	e01c      	b.n	80041d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fe f92c 	bl	80023fc <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fe f928 	bl	80023fc <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d908      	bls.n	80041c8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e118      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	42470000 	.word	0x42470000
 80041c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b8a      	ldr	r3, [pc, #552]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e9      	bne.n	80041a8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8097 	beq.w	8004310 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b83      	ldr	r3, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fe f8e7 	bl	80023fc <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fe f8e3 	bl	80023fc <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0d3      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b6c      	ldr	r3, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x4ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x31a>
 8004258:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x354>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b05      	cmp	r3, #5
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x33c>
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a60      	ldr	r2, [pc, #384]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a5d      	ldr	r2, [pc, #372]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0x354>
 8004288:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a59      	ldr	r2, [pc, #356]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800429a:	f023 0304 	bic.w	r3, r3, #4
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fe f8a8 	bl	80023fc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fe f8a4 	bl	80023fc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e092      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <HAL_RCC_OscConfig+0x364>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe f892 	bl	80023fc <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fe f88e 	bl	80023fc <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e07c      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d068      	beq.n	80043ea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d060      	beq.n	80043e6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d145      	bne.n	80043b8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b33      	ldr	r3, [pc, #204]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe f863 	bl	80023fc <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fe f85f 	bl	80023fc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e04f      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434c:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	019b      	lsls	r3, r3, #6
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	3b01      	subs	r3, #1
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	071b      	lsls	r3, r3, #28
 8004384:	491b      	ldr	r1, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438a:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe f834 	bl	80023fc <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe f830 	bl	80023fc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e020      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x44c>
 80043b6:	e018      	b.n	80043ea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_OscConfig+0x4b0>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe f81d 	bl	80023fc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fe f819 	bl	80023fc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e009      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_OscConfig+0x4a8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x47a>
 80043e4:	e001      	b.n	80043ea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42470060 	.word	0x42470060

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e01d      	b.n	800444e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f815 	bl	8004456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f968 	bl	8004714 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b085      	sub	sp, #20
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b06      	cmp	r3, #6
 8004492:	d007      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d122      	bne.n	800450e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d11b      	bne.n	800450e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0202 	mvn.w	r2, #2
 80044de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f8ee 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80044fa:	e005      	b.n	8004508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8e0 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8f1 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d122      	bne.n	8004562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0204 	mvn.w	r2, #4
 8004532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8c4 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 800454e:	e005      	b.n	800455c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8b6 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f8c7 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0208 	mvn.w	r2, #8
 8004586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2204      	movs	r2, #4
 800458c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f89a 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f88c 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f89d 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d122      	bne.n	800460a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d11b      	bne.n	800460a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0210 	mvn.w	r2, #16
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2208      	movs	r2, #8
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f870 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80045f6:	e005      	b.n	8004604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f862 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f873 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0201 	mvn.w	r2, #1
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc feeb 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b80      	cmp	r3, #128	; 0x80
 8004642:	d10e      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f903 	bl	8004868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f838 	bl	80046fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b20      	cmp	r3, #32
 800469a:	d10e      	bne.n	80046ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0220 	mvn.w	r2, #32
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8cd 	bl	8004854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a40      	ldr	r2, [pc, #256]	; (8004828 <TIM_Base_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d00f      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <TIM_Base_SetConfig+0x118>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00b      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <TIM_Base_SetConfig+0x11c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <TIM_Base_SetConfig+0x120>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <TIM_Base_SetConfig+0x114>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004774:	d027      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <TIM_Base_SetConfig+0x118>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d023      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <TIM_Base_SetConfig+0x11c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01f      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <TIM_Base_SetConfig+0x120>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a29      	ldr	r2, [pc, #164]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d017      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <TIM_Base_SetConfig+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <TIM_Base_SetConfig+0x12c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a26      	ldr	r2, [pc, #152]	; (8004844 <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <TIM_Base_SetConfig+0x134>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <TIM_Base_SetConfig+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <TIM_Base_SetConfig+0x13c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <TIM_Base_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d103      	bne.n	8004814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	615a      	str	r2, [r3, #20]
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400
 8004844:	40014800 	.word	0x40014800
 8004848:	40001800 	.word	0x40001800
 800484c:	40001c00 	.word	0x40001c00
 8004850:	40002000 	.word	0x40002000

08004854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e03f      	b.n	800490e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc fefc 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f90b 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b088      	sub	sp, #32
 800491a:	af02      	add	r7, sp, #8
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	f040 8083 	bne.w	8004a3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_UART_Transmit+0x2e>
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e07b      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_UART_Transmit+0x40>
 8004952:	2302      	movs	r3, #2
 8004954:	e074      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800496c:	f7fd fd46 	bl	80023fc <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004986:	e042      	b.n	8004a0e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499e:	d122      	bne.n	80049e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f84c 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e042      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3302      	adds	r3, #2
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e017      	b.n	8004a0e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	e013      	b.n	8004a0e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f829 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e01f      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	60ba      	str	r2, [r7, #8]
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1b7      	bne.n	8004988 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2140      	movs	r1, #64	; 0x40
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f810 	bl	8004a48 <UART_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e006      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a58:	e02c      	b.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d028      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a68:	f7fd fcc8 	bl	80023fc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d21d      	bcs.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e00f      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d0c3      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b1e:	f023 030c 	bic.w	r3, r3, #12
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	f040 818b 	bne.w	8004e64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4ac1      	ldr	r2, [pc, #772]	; (8004e58 <UART_SetConfig+0x37c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d005      	beq.n	8004b64 <UART_SetConfig+0x88>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4abf      	ldr	r2, [pc, #764]	; (8004e5c <UART_SetConfig+0x380>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	f040 80bd 	bne.w	8004cde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b64:	f7ff f80c 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8004b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	461d      	mov	r5, r3
 8004b6e:	f04f 0600 	mov.w	r6, #0
 8004b72:	46a8      	mov	r8, r5
 8004b74:	46b1      	mov	r9, r6
 8004b76:	eb18 0308 	adds.w	r3, r8, r8
 8004b7a:	eb49 0409 	adc.w	r4, r9, r9
 8004b7e:	4698      	mov	r8, r3
 8004b80:	46a1      	mov	r9, r4
 8004b82:	eb18 0805 	adds.w	r8, r8, r5
 8004b86:	eb49 0906 	adc.w	r9, r9, r6
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b9e:	4688      	mov	r8, r1
 8004ba0:	4691      	mov	r9, r2
 8004ba2:	eb18 0005 	adds.w	r0, r8, r5
 8004ba6:	eb49 0106 	adc.w	r1, r9, r6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	461d      	mov	r5, r3
 8004bb0:	f04f 0600 	mov.w	r6, #0
 8004bb4:	196b      	adds	r3, r5, r5
 8004bb6:	eb46 0406 	adc.w	r4, r6, r6
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	f7fc f813 	bl	8000be8 <__aeabi_uldivmod>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <UART_SetConfig+0x384>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	f04f 0600 	mov.w	r6, #0
 8004bdc:	46a9      	mov	r9, r5
 8004bde:	46b2      	mov	sl, r6
 8004be0:	eb19 0309 	adds.w	r3, r9, r9
 8004be4:	eb4a 040a 	adc.w	r4, sl, sl
 8004be8:	4699      	mov	r9, r3
 8004bea:	46a2      	mov	sl, r4
 8004bec:	eb19 0905 	adds.w	r9, r9, r5
 8004bf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c08:	4689      	mov	r9, r1
 8004c0a:	4692      	mov	sl, r2
 8004c0c:	eb19 0005 	adds.w	r0, r9, r5
 8004c10:	eb4a 0106 	adc.w	r1, sl, r6
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	461d      	mov	r5, r3
 8004c1a:	f04f 0600 	mov.w	r6, #0
 8004c1e:	196b      	adds	r3, r5, r5
 8004c20:	eb46 0406 	adc.w	r4, r6, r6
 8004c24:	461a      	mov	r2, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	f7fb ffde 	bl	8000be8 <__aeabi_uldivmod>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <UART_SetConfig+0x384>)
 8004c34:	fba3 1302 	umull	r1, r3, r3, r2
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	2164      	movs	r1, #100	; 0x64
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	3332      	adds	r3, #50	; 0x32
 8004c46:	4a86      	ldr	r2, [pc, #536]	; (8004e60 <UART_SetConfig+0x384>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c54:	4498      	add	r8, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	461d      	mov	r5, r3
 8004c5a:	f04f 0600 	mov.w	r6, #0
 8004c5e:	46a9      	mov	r9, r5
 8004c60:	46b2      	mov	sl, r6
 8004c62:	eb19 0309 	adds.w	r3, r9, r9
 8004c66:	eb4a 040a 	adc.w	r4, sl, sl
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	46a2      	mov	sl, r4
 8004c6e:	eb19 0905 	adds.w	r9, r9, r5
 8004c72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c8a:	4689      	mov	r9, r1
 8004c8c:	4692      	mov	sl, r2
 8004c8e:	eb19 0005 	adds.w	r0, r9, r5
 8004c92:	eb4a 0106 	adc.w	r1, sl, r6
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	f04f 0600 	mov.w	r6, #0
 8004ca0:	196b      	adds	r3, r5, r5
 8004ca2:	eb46 0406 	adc.w	r4, r6, r6
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4623      	mov	r3, r4
 8004caa:	f7fb ff9d 	bl	8000be8 <__aeabi_uldivmod>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <UART_SetConfig+0x384>)
 8004cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2164      	movs	r1, #100	; 0x64
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	3332      	adds	r3, #50	; 0x32
 8004cc8:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <UART_SetConfig+0x384>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	f003 0207 	and.w	r2, r3, #7
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4442      	add	r2, r8
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	e26f      	b.n	80051be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7fe ff3b 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8004ce2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	f04f 0600 	mov.w	r6, #0
 8004cec:	46a8      	mov	r8, r5
 8004cee:	46b1      	mov	r9, r6
 8004cf0:	eb18 0308 	adds.w	r3, r8, r8
 8004cf4:	eb49 0409 	adc.w	r4, r9, r9
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	46a1      	mov	r9, r4
 8004cfc:	eb18 0805 	adds.w	r8, r8, r5
 8004d00:	eb49 0906 	adc.w	r9, r9, r6
 8004d04:	f04f 0100 	mov.w	r1, #0
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d18:	4688      	mov	r8, r1
 8004d1a:	4691      	mov	r9, r2
 8004d1c:	eb18 0005 	adds.w	r0, r8, r5
 8004d20:	eb49 0106 	adc.w	r1, r9, r6
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	461d      	mov	r5, r3
 8004d2a:	f04f 0600 	mov.w	r6, #0
 8004d2e:	196b      	adds	r3, r5, r5
 8004d30:	eb46 0406 	adc.w	r4, r6, r6
 8004d34:	461a      	mov	r2, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	f7fb ff56 	bl	8000be8 <__aeabi_uldivmod>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <UART_SetConfig+0x384>)
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	461d      	mov	r5, r3
 8004d52:	f04f 0600 	mov.w	r6, #0
 8004d56:	46a9      	mov	r9, r5
 8004d58:	46b2      	mov	sl, r6
 8004d5a:	eb19 0309 	adds.w	r3, r9, r9
 8004d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d62:	4699      	mov	r9, r3
 8004d64:	46a2      	mov	sl, r4
 8004d66:	eb19 0905 	adds.w	r9, r9, r5
 8004d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d82:	4689      	mov	r9, r1
 8004d84:	4692      	mov	sl, r2
 8004d86:	eb19 0005 	adds.w	r0, r9, r5
 8004d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	461d      	mov	r5, r3
 8004d94:	f04f 0600 	mov.w	r6, #0
 8004d98:	196b      	adds	r3, r5, r5
 8004d9a:	eb46 0406 	adc.w	r4, r6, r6
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	f7fb ff21 	bl	8000be8 <__aeabi_uldivmod>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <UART_SetConfig+0x384>)
 8004dae:	fba3 1302 	umull	r1, r3, r3, r2
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	2164      	movs	r1, #100	; 0x64
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	3332      	adds	r3, #50	; 0x32
 8004dc0:	4a27      	ldr	r2, [pc, #156]	; (8004e60 <UART_SetConfig+0x384>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dce:	4498      	add	r8, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	f04f 0600 	mov.w	r6, #0
 8004dd8:	46a9      	mov	r9, r5
 8004dda:	46b2      	mov	sl, r6
 8004ddc:	eb19 0309 	adds.w	r3, r9, r9
 8004de0:	eb4a 040a 	adc.w	r4, sl, sl
 8004de4:	4699      	mov	r9, r3
 8004de6:	46a2      	mov	sl, r4
 8004de8:	eb19 0905 	adds.w	r9, r9, r5
 8004dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e04:	4689      	mov	r9, r1
 8004e06:	4692      	mov	sl, r2
 8004e08:	eb19 0005 	adds.w	r0, r9, r5
 8004e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	461d      	mov	r5, r3
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	196b      	adds	r3, r5, r5
 8004e1c:	eb46 0406 	adc.w	r4, r6, r6
 8004e20:	461a      	mov	r2, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	f7fb fee0 	bl	8000be8 <__aeabi_uldivmod>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <UART_SetConfig+0x384>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <UART_SetConfig+0x384>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4442      	add	r2, r8
 8004e54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e56:	e1b2      	b.n	80051be <UART_SetConfig+0x6e2>
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40011400 	.word	0x40011400
 8004e60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4ad7      	ldr	r2, [pc, #860]	; (80051c8 <UART_SetConfig+0x6ec>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d005      	beq.n	8004e7a <UART_SetConfig+0x39e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4ad6      	ldr	r2, [pc, #856]	; (80051cc <UART_SetConfig+0x6f0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	f040 80d1 	bne.w	800501c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e7a:	f7fe fe81 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8004e7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	469a      	mov	sl, r3
 8004e84:	f04f 0b00 	mov.w	fp, #0
 8004e88:	46d0      	mov	r8, sl
 8004e8a:	46d9      	mov	r9, fp
 8004e8c:	eb18 0308 	adds.w	r3, r8, r8
 8004e90:	eb49 0409 	adc.w	r4, r9, r9
 8004e94:	4698      	mov	r8, r3
 8004e96:	46a1      	mov	r9, r4
 8004e98:	eb18 080a 	adds.w	r8, r8, sl
 8004e9c:	eb49 090b 	adc.w	r9, r9, fp
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004eac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004eb4:	4688      	mov	r8, r1
 8004eb6:	4691      	mov	r9, r2
 8004eb8:	eb1a 0508 	adds.w	r5, sl, r8
 8004ebc:	eb4b 0609 	adc.w	r6, fp, r9
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	f04f 0400 	mov.w	r4, #0
 8004ed2:	0094      	lsls	r4, r2, #2
 8004ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ed8:	008b      	lsls	r3, r1, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	4623      	mov	r3, r4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	f7fb fe81 	bl	8000be8 <__aeabi_uldivmod>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	460c      	mov	r4, r1
 8004eea:	461a      	mov	r2, r3
 8004eec:	4bb8      	ldr	r3, [pc, #736]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	469b      	mov	fp, r3
 8004efc:	f04f 0c00 	mov.w	ip, #0
 8004f00:	46d9      	mov	r9, fp
 8004f02:	46e2      	mov	sl, ip
 8004f04:	eb19 0309 	adds.w	r3, r9, r9
 8004f08:	eb4a 040a 	adc.w	r4, sl, sl
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	46a2      	mov	sl, r4
 8004f10:	eb19 090b 	adds.w	r9, r9, fp
 8004f14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	4692      	mov	sl, r2
 8004f30:	eb1b 0509 	adds.w	r5, fp, r9
 8004f34:	eb4c 060a 	adc.w	r6, ip, sl
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	0094      	lsls	r4, r2, #2
 8004f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	4623      	mov	r3, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	4631      	mov	r1, r6
 8004f5a:	f7fb fe45 	bl	8000be8 <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b9a      	ldr	r3, [pc, #616]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004f66:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2164      	movs	r1, #100	; 0x64
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a95      	ldr	r2, [pc, #596]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f84:	4498      	add	r8, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	469b      	mov	fp, r3
 8004f8a:	f04f 0c00 	mov.w	ip, #0
 8004f8e:	46d9      	mov	r9, fp
 8004f90:	46e2      	mov	sl, ip
 8004f92:	eb19 0309 	adds.w	r3, r9, r9
 8004f96:	eb4a 040a 	adc.w	r4, sl, sl
 8004f9a:	4699      	mov	r9, r3
 8004f9c:	46a2      	mov	sl, r4
 8004f9e:	eb19 090b 	adds.w	r9, r9, fp
 8004fa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fba:	4689      	mov	r9, r1
 8004fbc:	4692      	mov	sl, r2
 8004fbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004fc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 0400 	mov.w	r4, #0
 8004fd8:	0094      	lsls	r4, r2, #2
 8004fda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	f7fb fdfe 	bl	8000be8 <__aeabi_uldivmod>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b77      	ldr	r3, [pc, #476]	; (80051d0 <UART_SetConfig+0x6f4>)
 8004ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff8:	095b      	lsrs	r3, r3, #5
 8004ffa:	2164      	movs	r1, #100	; 0x64
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	3332      	adds	r3, #50	; 0x32
 8005006:	4a72      	ldr	r2, [pc, #456]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4442      	add	r2, r8
 8005018:	609a      	str	r2, [r3, #8]
 800501a:	e0d0      	b.n	80051be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fd9c 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8005020:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	469a      	mov	sl, r3
 8005026:	f04f 0b00 	mov.w	fp, #0
 800502a:	46d0      	mov	r8, sl
 800502c:	46d9      	mov	r9, fp
 800502e:	eb18 0308 	adds.w	r3, r8, r8
 8005032:	eb49 0409 	adc.w	r4, r9, r9
 8005036:	4698      	mov	r8, r3
 8005038:	46a1      	mov	r9, r4
 800503a:	eb18 080a 	adds.w	r8, r8, sl
 800503e:	eb49 090b 	adc.w	r9, r9, fp
 8005042:	f04f 0100 	mov.w	r1, #0
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800504e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005052:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005056:	4688      	mov	r8, r1
 8005058:	4691      	mov	r9, r2
 800505a:	eb1a 0508 	adds.w	r5, sl, r8
 800505e:	eb4b 0609 	adc.w	r6, fp, r9
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4619      	mov	r1, r3
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	0094      	lsls	r4, r2, #2
 8005076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	4628      	mov	r0, r5
 8005082:	4631      	mov	r1, r6
 8005084:	f7fb fdb0 	bl	8000be8 <__aeabi_uldivmod>
 8005088:	4603      	mov	r3, r0
 800508a:	460c      	mov	r4, r1
 800508c:	461a      	mov	r2, r3
 800508e:	4b50      	ldr	r3, [pc, #320]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005090:	fba3 2302 	umull	r2, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	469b      	mov	fp, r3
 800509e:	f04f 0c00 	mov.w	ip, #0
 80050a2:	46d9      	mov	r9, fp
 80050a4:	46e2      	mov	sl, ip
 80050a6:	eb19 0309 	adds.w	r3, r9, r9
 80050aa:	eb4a 040a 	adc.w	r4, sl, sl
 80050ae:	4699      	mov	r9, r3
 80050b0:	46a2      	mov	sl, r4
 80050b2:	eb19 090b 	adds.w	r9, r9, fp
 80050b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ce:	4689      	mov	r9, r1
 80050d0:	4692      	mov	sl, r2
 80050d2:	eb1b 0509 	adds.w	r5, fp, r9
 80050d6:	eb4c 060a 	adc.w	r6, ip, sl
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	0094      	lsls	r4, r2, #2
 80050ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f2:	008b      	lsls	r3, r1, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	4631      	mov	r1, r6
 80050fc:	f7fb fd74 	bl	8000be8 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <UART_SetConfig+0x6f4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005126:	4498      	add	r8, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	469b      	mov	fp, r3
 800512c:	f04f 0c00 	mov.w	ip, #0
 8005130:	46d9      	mov	r9, fp
 8005132:	46e2      	mov	sl, ip
 8005134:	eb19 0309 	adds.w	r3, r9, r9
 8005138:	eb4a 040a 	adc.w	r4, sl, sl
 800513c:	4699      	mov	r9, r3
 800513e:	46a2      	mov	sl, r4
 8005140:	eb19 090b 	adds.w	r9, r9, fp
 8005144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800515c:	4689      	mov	r9, r1
 800515e:	4692      	mov	sl, r2
 8005160:	eb1b 0509 	adds.w	r5, fp, r9
 8005164:	eb4c 060a 	adc.w	r6, ip, sl
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4619      	mov	r1, r3
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	f04f 0400 	mov.w	r4, #0
 800517a:	0094      	lsls	r4, r2, #2
 800517c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005180:	008b      	lsls	r3, r1, #2
 8005182:	461a      	mov	r2, r3
 8005184:	4623      	mov	r3, r4
 8005186:	4628      	mov	r0, r5
 8005188:	4631      	mov	r1, r6
 800518a:	f7fb fd2d 	bl	8000be8 <__aeabi_uldivmod>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	461a      	mov	r2, r3
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <UART_SetConfig+0x6f4>)
 8005196:	fba3 1302 	umull	r1, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2164      	movs	r1, #100	; 0x64
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	3332      	adds	r3, #50	; 0x32
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <UART_SetConfig+0x6f4>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4442      	add	r2, r8
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	e7ff      	b.n	80051be <UART_SetConfig+0x6e2>
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	40011000 	.word	0x40011000
 80051cc:	40011400 	.word	0x40011400
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <delay>:
 *
 * \param t		Number of "nop" cycles
 *
 * \return void
 */		
inline void delay(uint32_t t) {
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	for (; t; t--) __asm("nop");
 80051dc:	e003      	b.n	80051e6 <delay+0x12>
 80051de:	bf00      	nop
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f8      	bne.n	80051de <delay+0xa>
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <GPIO_Init>:
 *
 * \param
 *
 * \return void
 */
void GPIO_Init(uint32_t mode) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d003      	beq.n	800520e <GPIO_Init+0x16>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 8081 	bne.w	8005310 <GPIO_Init+0x118>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	4b41      	ldr	r3, [pc, #260]	; (8005318 <GPIO_Init+0x120>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <GPIO_Init+0x120>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <GPIO_Init+0x120>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]
	__GPIOB_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b3a      	ldr	r3, [pc, #232]	; (8005318 <GPIO_Init+0x120>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a39      	ldr	r2, [pc, #228]	; (8005318 <GPIO_Init+0x120>)
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <GPIO_Init+0x120>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
	__GPIOC_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	4b33      	ldr	r3, [pc, #204]	; (8005318 <GPIO_Init+0x120>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a32      	ldr	r2, [pc, #200]	; (8005318 <GPIO_Init+0x120>)
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <GPIO_Init+0x120>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8005262:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005266:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005270:	2300      	movs	r3, #0
 8005272:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	4619      	mov	r1, r3
 800527a:	4828      	ldr	r0, [pc, #160]	; (800531c <GPIO_Init+0x124>)
 800527c:	f7fd f9ce 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8005280:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8005284:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	4619      	mov	r1, r3
 8005298:	4821      	ldr	r0, [pc, #132]	; (8005320 <GPIO_Init+0x128>)
 800529a:	f7fd f9bf 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = mode;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80052aa:	2300      	movs	r3, #0
 80052ac:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	4619      	mov	r1, r3
 80052b4:	481b      	ldr	r0, [pc, #108]	; (8005324 <GPIO_Init+0x12c>)
 80052b6:	f7fd f9b1 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 80052ba:	2313      	movs	r3, #19
 80052bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052be:	2301      	movs	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ca:	f107 0314 	add.w	r3, r7, #20
 80052ce:	4619      	mov	r1, r3
 80052d0:	4812      	ldr	r0, [pc, #72]	; (800531c <GPIO_Init+0x124>)
 80052d2:	f7fd f9a3 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052d6:	2301      	movs	r3, #1
 80052d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052da:	2301      	movs	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80052e2:	2300      	movs	r3, #0
 80052e4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e6:	f107 0314 	add.w	r3, r7, #20
 80052ea:	4619      	mov	r1, r3
 80052ec:	480c      	ldr	r0, [pc, #48]	; (8005320 <GPIO_Init+0x128>)
 80052ee:	f7fd f995 	bl	800261c <HAL_GPIO_Init>

	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80052f2:	2302      	movs	r3, #2
 80052f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80052fe:	2300      	movs	r3, #0
 8005300:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005302:	f107 0314 	add.w	r3, r7, #20
 8005306:	4619      	mov	r1, r3
 8005308:	4806      	ldr	r0, [pc, #24]	; (8005324 <GPIO_Init+0x12c>)
 800530a:	f7fd f987 	bl	800261c <HAL_GPIO_Init>
 800530e:	e000      	b.n	8005312 <GPIO_Init+0x11a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8005310:	bf00      	nop
}
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40023800 	.word	0x40023800
 800531c:	40020000 	.word	0x40020000
 8005320:	40020400 	.word	0x40020400
 8005324:	40020800 	.word	0x40020800

08005328 <LCD_Write8>:
 *
 * \param data	8-Bit Data
 *
 * \return void
 */
inline void LCD_Write8(uint8_t data) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <LCD_Write8+0xa4>)
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800533a:	4013      	ands	r3, r2
 800533c:	79fa      	ldrb	r2, [r7, #7]
 800533e:	0252      	lsls	r2, r2, #9
 8005340:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005344:	431a      	orrs	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534e:	431a      	orrs	r2, r3
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	491c      	ldr	r1, [pc, #112]	; (80053cc <LCD_Write8+0xa4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <LCD_Write8+0xa8>)
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	f64f 33c7 	movw	r3, #64455	; 0xfbc7
 8005366:	4013      	ands	r3, r2
 8005368:	79fa      	ldrb	r2, [r7, #7]
 800536a:	f002 0208 	and.w	r2, r2, #8
 800536e:	431a      	orrs	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	431a      	orrs	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	105b      	asrs	r3, r3, #1
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	4910      	ldr	r1, [pc, #64]	; (80053d0 <LCD_Write8+0xa8>)
 800538e:	4313      	orrs	r3, r2
 8005390:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <LCD_Write8+0xac>)
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800539a:	4013      	ands	r3, r2
 800539c:	79fa      	ldrb	r2, [r7, #7]
 800539e:	0192      	lsls	r2, r2, #6
 80053a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053a4:	490b      	ldr	r1, [pc, #44]	; (80053d4 <LCD_Write8+0xac>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	614b      	str	r3, [r1, #20]

	LCD_WR_STROBE();
 80053aa:	4b08      	ldr	r3, [pc, #32]	; (80053cc <LCD_Write8+0xa4>)
 80053ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053b0:	619a      	str	r2, [r3, #24]
 80053b2:	2002      	movs	r0, #2
 80053b4:	f7ff ff0e 	bl	80051d4 <delay>
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <LCD_Write8+0xa4>)
 80053ba:	2202      	movs	r2, #2
 80053bc:	619a      	str	r2, [r3, #24]
 80053be:	2002      	movs	r0, #2
 80053c0:	f7ff ff08 	bl	80051d4 <delay>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40020000 	.word	0x40020000
 80053d0:	40020400 	.word	0x40020400
 80053d4:	40020800 	.word	0x40020800

080053d8 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	460a      	mov	r2, r1
 80053e2:	80fb      	strh	r3, [r7, #6]
 80053e4:	4613      	mov	r3, r2
 80053e6:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <LCD_Write16Register16+0x58>)
 80053ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053ee:	619a      	str	r2, [r3, #24]
	LCD_Write8(a >> 8);
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff95 	bl	8005328 <LCD_Write8>
	LCD_Write8(a);
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff90 	bl	8005328 <LCD_Write8>
	LCD_CD_DATA();
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <LCD_Write16Register16+0x58>)
 800540a:	2210      	movs	r2, #16
 800540c:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 800540e:	88bb      	ldrh	r3, [r7, #4]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	b29b      	uxth	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff86 	bl	8005328 <LCD_Write8>
	LCD_Write8(d);
 800541c:	88bb      	ldrh	r3, [r7, #4]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff81 	bl	8005328 <LCD_Write8>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40020000 	.word	0x40020000

08005434 <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <LCD_Init+0xf4>)
 800543c:	22f0      	movs	r2, #240	; 0xf0
 800543e:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8005440:	4b3a      	ldr	r3, [pc, #232]	; (800552c <LCD_Init+0xf8>)
 8005442:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005446:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8005448:	4b39      	ldr	r3, [pc, #228]	; (8005530 <LCD_Init+0xfc>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <LCD_Init+0x100>)
 8005450:	2200      	movs	r2, #0
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	4b37      	ldr	r3, [pc, #220]	; (8005534 <LCD_Init+0x100>)
 8005456:	f9b3 2000 	ldrsh.w	r2, [r3]
 800545a:	4b37      	ldr	r3, [pc, #220]	; (8005538 <LCD_Init+0x104>)
 800545c:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <LCD_Init+0x108>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8005464:	4b36      	ldr	r3, [pc, #216]	; (8005540 <LCD_Init+0x10c>)
 8005466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <LCD_Init+0x10c>)
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <LCD_Init+0x110>)
 8005472:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8005474:	4b34      	ldr	r3, [pc, #208]	; (8005548 <LCD_Init+0x114>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]

	GPIO_Init(GPIO_MODE_OUTPUT_PP);
 800547a:	2001      	movs	r0, #1
 800547c:	f7ff febc 	bl	80051f8 <GPIO_Init>

	LCD_Reset();
 8005480:	f000 f96c 	bl	800575c <LCD_Reset>
	HAL_Delay(50);
 8005484:	2032      	movs	r0, #50	; 0x32
 8005486:	f7fc ffc5 	bl	8002414 <HAL_Delay>

	LCD_CS_ACTIVE();
 800548a:	4b30      	ldr	r3, [pc, #192]	; (800554c <LCD_Init+0x118>)
 800548c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005490:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined (ILI9328)
	uint8_t i = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	71fb      	strb	r3, [r7, #7]
	uint16_t a, d;
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 8005496:	e01d      	b.n	80054d4 <LCD_Init+0xa0>
		a = ILI932x_regValues[i++];
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	71fa      	strb	r2, [r7, #7]
 800549e:	461a      	mov	r2, r3
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <LCD_Init+0x11c>)
 80054a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80054a6:	80bb      	strh	r3, [r7, #4]
		d = ILI932x_regValues[i++];
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	71fa      	strb	r2, [r7, #7]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <LCD_Init+0x11c>)
 80054b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80054b6:	807b      	strh	r3, [r7, #2]
		if (a == TFTLCD_DELAY) {
 80054b8:	88bb      	ldrh	r3, [r7, #4]
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	d104      	bne.n	80054c8 <LCD_Init+0x94>
			HAL_Delay(d);
 80054be:	887b      	ldrh	r3, [r7, #2]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc ffa7 	bl	8002414 <HAL_Delay>
 80054c6:	e005      	b.n	80054d4 <LCD_Init+0xa0>
		} else {
			LCD_Write16Register16(a, d);
 80054c8:	887a      	ldrh	r2, [r7, #2]
 80054ca:	88bb      	ldrh	r3, [r7, #4]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff82 	bl	80053d8 <LCD_Write16Register16>
	while (i < sizeof(ILI932x_regValues) / sizeof(ILI932x_regValues[0])) {
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	2b65      	cmp	r3, #101	; 0x65
 80054d8:	d9de      	bls.n	8005498 <LCD_Init+0x64>
		}
	}
	LCD_SetRotation(m_rotation);
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <LCD_Init+0xfc>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fa18 	bl	8005914 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <LCD_Init+0xf4>)
 80054e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <LCD_Init+0xf8>)
 80054f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2100      	movs	r1, #0
 80054fe:	2000      	movs	r0, #0
 8005500:	f000 f976 	bl	80057f0 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <LCD_Init+0x118>)
 8005506:	2201      	movs	r2, #1
 8005508:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 800550a:	2000      	movs	r0, #0
 800550c:	f000 f8e4 	bl	80056d8 <LCD_FillScreen>
	LCD_SetTextSize(0);
 8005510:	2000      	movs	r0, #0
 8005512:	f000 fc05 	bl	8005d20 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8005516:	2100      	movs	r1, #0
 8005518:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800551c:	f000 fc1a 	bl	8005d54 <LCD_SetTextColor>
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000460 	.word	0x20000460
 800552c:	20000462 	.word	0x20000462
 8005530:	2000046d 	.word	0x2000046d
 8005534:	20000464 	.word	0x20000464
 8005538:	20000466 	.word	0x20000466
 800553c:	2000046c 	.word	0x2000046c
 8005540:	2000046a 	.word	0x2000046a
 8005544:	20000468 	.word	0x20000468
 8005548:	2000046e 	.word	0x2000046e
 800554c:	40020400 	.word	0x40020400
 8005550:	0800aa58 	.word	0x0800aa58

08005554 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
 800555e:	460b      	mov	r3, r1
 8005560:	80bb      	strh	r3, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8005566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	db51      	blt.n	8005612 <LCD_DrawPixel+0xbe>
 800556e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	db4d      	blt.n	8005612 <LCD_DrawPixel+0xbe>
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <LCD_DrawPixel+0xc8>)
 8005578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005580:	429a      	cmp	r2, r3
 8005582:	da46      	bge.n	8005612 <LCD_DrawPixel+0xbe>
 8005584:	4b26      	ldr	r3, [pc, #152]	; (8005620 <LCD_DrawPixel+0xcc>)
 8005586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800558a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800558e:	429a      	cmp	r2, r3
 8005590:	da3f      	bge.n	8005612 <LCD_DrawPixel+0xbe>

	LCD_CS_ACTIVE();
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <LCD_DrawPixel+0xd0>)
 8005594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005598:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	int16_t t;
	switch (m_rotation) {
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <LCD_DrawPixel+0xd4>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d00d      	beq.n	80055be <LCD_DrawPixel+0x6a>
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d017      	beq.n	80055d6 <LCD_DrawPixel+0x82>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d120      	bne.n	80055ec <LCD_DrawPixel+0x98>
	case 1:
		t = x;
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	81fb      	strh	r3, [r7, #14]
		x = TFTWIDTH - 1 - y;
 80055ae:	88bb      	ldrh	r3, [r7, #4]
 80055b0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	80fb      	strh	r3, [r7, #6]
		y = t;
 80055b8:	89fb      	ldrh	r3, [r7, #14]
 80055ba:	80bb      	strh	r3, [r7, #4]
		break;
 80055bc:	e016      	b.n	80055ec <LCD_DrawPixel+0x98>
	case 2:
		x = TFTWIDTH - 1 - x;
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - y;
 80055c8:	88bb      	ldrh	r3, [r7, #4]
 80055ca:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80055ce:	3301      	adds	r3, #1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	80bb      	strh	r3, [r7, #4]
		break;
 80055d4:	e00a      	b.n	80055ec <LCD_DrawPixel+0x98>
	case 3:
		t = x;
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	81fb      	strh	r3, [r7, #14]
		x = y;
 80055da:	88bb      	ldrh	r3, [r7, #4]
 80055dc:	80fb      	strh	r3, [r7, #6]
		y = TFTHEIGHT - 1 - t;
 80055de:	89fb      	ldrh	r3, [r7, #14]
 80055e0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	80bb      	strh	r3, [r7, #4]
		break;
 80055ea:	bf00      	nop
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	4619      	mov	r1, r3
 80055f0:	2020      	movs	r0, #32
 80055f2:	f7ff fef1 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80055f6:	88bb      	ldrh	r3, [r7, #4]
 80055f8:	4619      	mov	r1, r3
 80055fa:	2021      	movs	r0, #33	; 0x21
 80055fc:	f7ff feec 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 8005600:	887b      	ldrh	r3, [r7, #2]
 8005602:	4619      	mov	r1, r3
 8005604:	2022      	movs	r0, #34	; 0x22
 8005606:	f7ff fee7 	bl	80053d8 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <LCD_DrawPixel+0xd0>)
 800560c:	2201      	movs	r2, #1
 800560e:	619a      	str	r2, [r3, #24]
 8005610:	e000      	b.n	8005614 <LCD_DrawPixel+0xc0>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8005612:	bf00      	nop
}
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000460 	.word	0x20000460
 8005620:	20000462 	.word	0x20000462
 8005624:	40020400 	.word	0x40020400
 8005628:	2000046d 	.word	0x2000046d

0800562c <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	80fb      	strh	r3, [r7, #6]
#if defined(SSD1297)
	uint8_t red = LCD_Color565_to_R(color);
	uint8_t green = LCD_Color565_to_G(color);
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	73bb      	strb	r3, [r7, #14]
#endif

	LCD_CS_ACTIVE();
 8005644:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <LCD_Flood+0xa4>)
 8005646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800564a:	619a      	str	r2, [r3, #24]

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	4619      	mov	r1, r3
 8005650:	2022      	movs	r0, #34	; 0x22
 8005652:	f7ff fec1 	bl	80053d8 <LCD_Write16Register16>
#elif defined(HX8357D)
	LCD_Write16Register8(HX8357_RAMWR, color);
#elif defined(SSD1297)
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif
	len--;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	3b01      	subs	r3, #1
 800565a:	603b      	str	r3, [r7, #0]
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	429a      	cmp	r2, r3
 8005662:	d128      	bne.n	80056b6 <LCD_Flood+0x8a>
#endif
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (len--) {
 8005664:	e019      	b.n	800569a <LCD_Flood+0x6e>
#if defined(SSD1297)
			LCD_WR_STROBE();
#endif
			LCD_WR_STROBE();
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <LCD_Flood+0xa8>)
 8005668:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800566c:	619a      	str	r2, [r3, #24]
 800566e:	2002      	movs	r0, #2
 8005670:	f7ff fdb0 	bl	80051d4 <delay>
 8005674:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <LCD_Flood+0xa8>)
 8005676:	2202      	movs	r2, #2
 8005678:	619a      	str	r2, [r3, #24]
 800567a:	2002      	movs	r0, #2
 800567c:	f7ff fdaa 	bl	80051d4 <delay>
			LCD_WR_STROBE();
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <LCD_Flood+0xa8>)
 8005682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005686:	619a      	str	r2, [r3, #24]
 8005688:	2002      	movs	r0, #2
 800568a:	f7ff fda3 	bl	80051d4 <delay>
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <LCD_Flood+0xa8>)
 8005690:	2202      	movs	r2, #2
 8005692:	619a      	str	r2, [r3, #24]
 8005694:	2002      	movs	r0, #2
 8005696:	f7ff fd9d 	bl	80051d4 <delay>
		while (len--) {
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	603a      	str	r2, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e0      	bne.n	8005666 <LCD_Flood+0x3a>
 80056a4:	e00c      	b.n	80056c0 <LCD_Flood+0x94>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fe3d 	bl	8005328 <LCD_Write8>
			LCD_Write8(lo);
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fe39 	bl	8005328 <LCD_Write8>
		while (len--) {
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	603a      	str	r2, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f2      	bne.n	80056a6 <LCD_Flood+0x7a>
#endif
		}
	}

	LCD_CS_IDLE();
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <LCD_Flood+0xa4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	619a      	str	r2, [r3, #24]
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40020400 	.word	0x40020400
 80056d4:	40020000 	.word	0x40020000

080056d8 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	80fb      	strh	r3, [r7, #6]
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <LCD_FillScreen+0x7c>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d00d      	beq.n	8005706 <LCD_FillScreen+0x2e>
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d011      	beq.n	8005712 <LCD_FillScreen+0x3a>
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d004      	beq.n	80056fc <LCD_FillScreen+0x24>
	default:
		x = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	81fb      	strh	r3, [r7, #14]
		y = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	81bb      	strh	r3, [r7, #12]
		break;
 80056fa:	e010      	b.n	800571e <LCD_FillScreen+0x46>
	case 1:
		x = TFTWIDTH - 1;
 80056fc:	23ef      	movs	r3, #239	; 0xef
 80056fe:	81fb      	strh	r3, [r7, #14]
		y = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	81bb      	strh	r3, [r7, #12]
		break;
 8005704:	e00b      	b.n	800571e <LCD_FillScreen+0x46>
	case 2:
		x = TFTWIDTH - 1;
 8005706:	23ef      	movs	r3, #239	; 0xef
 8005708:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 800570a:	f240 133f 	movw	r3, #319	; 0x13f
 800570e:	81bb      	strh	r3, [r7, #12]
		break;
 8005710:	e005      	b.n	800571e <LCD_FillScreen+0x46>
	case 3:
		x = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	81fb      	strh	r3, [r7, #14]
		y = TFTHEIGHT - 1;
 8005716:	f240 133f 	movw	r3, #319	; 0x13f
 800571a:	81bb      	strh	r3, [r7, #12]
		break;
 800571c:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 800571e:	4b0e      	ldr	r3, [pc, #56]	; (8005758 <LCD_FillScreen+0x80>)
 8005720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005724:	619a      	str	r2, [r3, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 8005726:	89fb      	ldrh	r3, [r7, #14]
 8005728:	4619      	mov	r1, r3
 800572a:	2020      	movs	r0, #32
 800572c:	f7ff fe54 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8005730:	89bb      	ldrh	r3, [r7, #12]
 8005732:	4619      	mov	r1, r3
 8005734:	2021      	movs	r0, #33	; 0x21
 8005736:	f7ff fe4f 	bl	80053d8 <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <LCD_FillScreen+0x80>)
 800573c:	2201      	movs	r2, #1
 800573e:	619a      	str	r2, [r3, #24]
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff70 	bl	800562c <LCD_Flood>
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	2000046d 	.word	0x2000046d
 8005758:	40020400 	.word	0x40020400

0800575c <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
	LCD_CS_IDLE();
 8005762:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <LCD_Reset+0x88>)
 8005764:	2201      	movs	r2, #1
 8005766:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 8005768:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <LCD_Reset+0x8c>)
 800576a:	2210      	movs	r2, #16
 800576c:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <LCD_Reset+0x8c>)
 8005770:	2202      	movs	r2, #2
 8005772:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8005774:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <LCD_Reset+0x8c>)
 8005776:	2201      	movs	r2, #1
 8005778:	619a      	str	r2, [r3, #24]

	LCD_RST_ACTIVE();
 800577a:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <LCD_Reset+0x90>)
 800577c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005780:	619a      	str	r2, [r3, #24]
	HAL_Delay(2);
 8005782:	2002      	movs	r0, #2
 8005784:	f7fc fe46 	bl	8002414 <HAL_Delay>
	LCD_RST_IDLE();
 8005788:	4b18      	ldr	r3, [pc, #96]	; (80057ec <LCD_Reset+0x90>)
 800578a:	2202      	movs	r2, #2
 800578c:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 800578e:	2078      	movs	r0, #120	; 0x78
 8005790:	f7fc fe40 	bl	8002414 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 8005794:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <LCD_Reset+0x88>)
 8005796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800579a:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <LCD_Reset+0x8c>)
 800579e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057a2:	619a      	str	r2, [r3, #24]
	LCD_Write8(0x00);
 80057a4:	2000      	movs	r0, #0
 80057a6:	f7ff fdbf 	bl	8005328 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) LCD_WR_STROBE(); // Three extra 0x00s
 80057aa:	2300      	movs	r3, #0
 80057ac:	71fb      	strb	r3, [r7, #7]
 80057ae:	e00f      	b.n	80057d0 <LCD_Reset+0x74>
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <LCD_Reset+0x8c>)
 80057b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057b6:	619a      	str	r2, [r3, #24]
 80057b8:	2002      	movs	r0, #2
 80057ba:	f7ff fd0b 	bl	80051d4 <delay>
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <LCD_Reset+0x8c>)
 80057c0:	2202      	movs	r2, #2
 80057c2:	619a      	str	r2, [r3, #24]
 80057c4:	2002      	movs	r0, #2
 80057c6:	f7ff fd05 	bl	80051d4 <delay>
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	3301      	adds	r3, #1
 80057ce:	71fb      	strb	r3, [r7, #7]
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d9ec      	bls.n	80057b0 <LCD_Reset+0x54>
	LCD_CS_IDLE();
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <LCD_Reset+0x88>)
 80057d8:	2201      	movs	r2, #1
 80057da:	619a      	str	r2, [r3, #24]
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40020000 	.word	0x40020000
 80057ec:	40020800 	.word	0x40020800

080057f0 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4604      	mov	r4, r0
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	4623      	mov	r3, r4
 8005800:	80fb      	strh	r3, [r7, #6]
 8005802:	4603      	mov	r3, r0
 8005804:	80bb      	strh	r3, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	807b      	strh	r3, [r7, #2]
 800580a:	4613      	mov	r3, r2
 800580c:	803b      	strh	r3, [r7, #0]
	LCD_CS_ACTIVE();
 800580e:	4b3f      	ldr	r3, [pc, #252]	; (800590c <LCD_SetAddrWindow+0x11c>)
 8005810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005814:	619a      	str	r2, [r3, #24]
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8005816:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <LCD_SetAddrWindow+0x120>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d01c      	beq.n	8005858 <LCD_SetAddrWindow+0x68>
 800581e:	2b03      	cmp	r3, #3
 8005820:	d037      	beq.n	8005892 <LCD_SetAddrWindow+0xa2>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d004      	beq.n	8005830 <LCD_SetAddrWindow+0x40>
	default:
		x = x1;
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	617b      	str	r3, [r7, #20]
		y = y1;
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	613b      	str	r3, [r7, #16]
		break;
 800582e:	e046      	b.n	80058be <LCD_SetAddrWindow+0xce>
	case 1:
		t = y1;
 8005830:	88bb      	ldrh	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]
		y1 = x1;
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	80bb      	strh	r3, [r7, #4]
		x1 = TFTWIDTH - 1 - y2;
 8005838:	883b      	ldrh	r3, [r7, #0]
 800583a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800583e:	80fb      	strh	r3, [r7, #6]
		y2 = x2;
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	803b      	strh	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800584c:	807b      	strh	r3, [r7, #2]
		x = x2;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	617b      	str	r3, [r7, #20]
		y = y1;
 8005852:	88bb      	ldrh	r3, [r7, #4]
 8005854:	613b      	str	r3, [r7, #16]
		break;
 8005856:	e032      	b.n	80058be <LCD_SetAddrWindow+0xce>
	case 2:
		t = x1;
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	60fb      	str	r3, [r7, #12]
		x1 = TFTWIDTH - 1 - x2;
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8005862:	80fb      	strh	r3, [r7, #6]
		x2 = TFTWIDTH - 1 - t;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800586c:	807b      	strh	r3, [r7, #2]
		t = y1;
 800586e:	88bb      	ldrh	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - y2;
 8005872:	883b      	ldrh	r3, [r7, #0]
 8005874:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005878:	3301      	adds	r3, #1
 800587a:	80bb      	strh	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	b29b      	uxth	r3, r3
 8005880:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8005884:	3301      	adds	r3, #1
 8005886:	803b      	strh	r3, [r7, #0]
		x = x2;
 8005888:	887b      	ldrh	r3, [r7, #2]
 800588a:	617b      	str	r3, [r7, #20]
		y = y2;
 800588c:	883b      	ldrh	r3, [r7, #0]
 800588e:	613b      	str	r3, [r7, #16]
		break;
 8005890:	e015      	b.n	80058be <LCD_SetAddrWindow+0xce>
	case 3:
		t = x1;
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	60fb      	str	r3, [r7, #12]
		x1 = y1;
 8005896:	88bb      	ldrh	r3, [r7, #4]
 8005898:	80fb      	strh	r3, [r7, #6]
		y1 = TFTHEIGHT - 1 - x2;
 800589a:	887b      	ldrh	r3, [r7, #2]
 800589c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80058a0:	3301      	adds	r3, #1
 80058a2:	80bb      	strh	r3, [r7, #4]
		x2 = y2;
 80058a4:	883b      	ldrh	r3, [r7, #0]
 80058a6:	807b      	strh	r3, [r7, #2]
		y2 = TFTHEIGHT - 1 - t;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80058b0:	3301      	adds	r3, #1
 80058b2:	803b      	strh	r3, [r7, #0]
		x = x1;
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	617b      	str	r3, [r7, #20]
		y = y2;
 80058b8:	883b      	ldrh	r3, [r7, #0]
 80058ba:	613b      	str	r3, [r7, #16]
		break;
 80058bc:	bf00      	nop
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4619      	mov	r1, r3
 80058c2:	2050      	movs	r0, #80	; 0x50
 80058c4:	f7ff fd88 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	4619      	mov	r1, r3
 80058cc:	2051      	movs	r0, #81	; 0x51
 80058ce:	f7ff fd83 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 80058d2:	88bb      	ldrh	r3, [r7, #4]
 80058d4:	4619      	mov	r1, r3
 80058d6:	2052      	movs	r0, #82	; 0x52
 80058d8:	f7ff fd7e 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 80058dc:	883b      	ldrh	r3, [r7, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	2053      	movs	r0, #83	; 0x53
 80058e2:	f7ff fd79 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	2020      	movs	r0, #32
 80058ee:	f7ff fd73 	bl	80053d8 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	4619      	mov	r1, r3
 80058f8:	2021      	movs	r0, #33	; 0x21
 80058fa:	f7ff fd6d 	bl	80053d8 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 80058fe:	4b03      	ldr	r3, [pc, #12]	; (800590c <LCD_SetAddrWindow+0x11c>)
 8005900:	2201      	movs	r2, #1
 8005902:	619a      	str	r2, [r3, #24]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd90      	pop	{r4, r7, pc}
 800590c:	40020400 	.word	0x40020400
 8005910:	2000046d 	.word	0x2000046d

08005914 <LCD_SetRotation>:
 *
 * \param x	rotation
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	m_rotation = (x & 3);
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	b2da      	uxtb	r2, r3
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <LCD_SetRotation+0xb4>)
 8005928:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <LCD_SetRotation+0xb4>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d009      	beq.n	8005946 <LCD_SetRotation+0x32>
 8005932:	2b03      	cmp	r3, #3
 8005934:	d007      	beq.n	8005946 <LCD_SetRotation+0x32>
	default:
	case 0:
	case 2:
		m_width = TFTWIDTH;
 8005936:	4b25      	ldr	r3, [pc, #148]	; (80059cc <LCD_SetRotation+0xb8>)
 8005938:	22f0      	movs	r2, #240	; 0xf0
 800593a:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <LCD_SetRotation+0xbc>)
 800593e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005942:	801a      	strh	r2, [r3, #0]
		break;
 8005944:	e007      	b.n	8005956 <LCD_SetRotation+0x42>
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 8005946:	4b21      	ldr	r3, [pc, #132]	; (80059cc <LCD_SetRotation+0xb8>)
 8005948:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800594c:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <LCD_SetRotation+0xbc>)
 8005950:	22f0      	movs	r2, #240	; 0xf0
 8005952:	801a      	strh	r2, [r3, #0]
		break;
 8005954:	bf00      	nop
	}
	LCD_CS_ACTIVE();
 8005956:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <LCD_SetRotation+0xc0>)
 8005958:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800595c:	619a      	str	r2, [r3, #24]
#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154)
    uint16_t t;
    switch(m_rotation) {
 800595e:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <LCD_SetRotation+0xb4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d00b      	beq.n	800597e <LCD_SetRotation+0x6a>
 8005966:	2b03      	cmp	r3, #3
 8005968:	d00d      	beq.n	8005986 <LCD_SetRotation+0x72>
 800596a:	2b01      	cmp	r3, #1
 800596c:	d003      	beq.n	8005976 <LCD_SetRotation+0x62>
		default: t = 0x1030; break;
 800596e:	f241 0330 	movw	r3, #4144	; 0x1030
 8005972:	81fb      	strh	r3, [r7, #14]
 8005974:	e00b      	b.n	800598e <LCD_SetRotation+0x7a>
		case 1: t = 0x1028; break;
 8005976:	f241 0328 	movw	r3, #4136	; 0x1028
 800597a:	81fb      	strh	r3, [r7, #14]
 800597c:	e007      	b.n	800598e <LCD_SetRotation+0x7a>
		case 2: t = 0x1000; break;
 800597e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005982:	81fb      	strh	r3, [r7, #14]
 8005984:	e003      	b.n	800598e <LCD_SetRotation+0x7a>
		case 3: t = 0x1018; break;
 8005986:	f241 0318 	movw	r3, #4120	; 0x1018
 800598a:	81fb      	strh	r3, [r7, #14]
 800598c:	bf00      	nop
    }
    LCD_Write16Register16(ILI932X_ENTRY_MOD, t); // MADCTL
 800598e:	89fb      	ldrh	r3, [r7, #14]
 8005990:	4619      	mov	r1, r3
 8005992:	2003      	movs	r0, #3
 8005994:	f7ff fd20 	bl	80053d8 <LCD_Write16Register16>
    // For 932X, init default full-screen address window:
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <LCD_SetRotation+0xb8>)
 800599a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <LCD_SetRotation+0xbc>)
 80059a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2100      	movs	r1, #0
 80059b2:	2000      	movs	r0, #0
 80059b4:	f7ff ff1c 	bl	80057f0 <LCD_SetAddrWindow>
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <LCD_SetRotation+0xc0>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	619a      	str	r2, [r3, #24]
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000046d 	.word	0x2000046d
 80059cc:	20000460 	.word	0x20000460
 80059d0:	20000462 	.word	0x20000462
 80059d4:	40020400 	.word	0x40020400

080059d8 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b08b      	sub	sp, #44	; 0x2c
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	461a      	mov	r2, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	80fb      	strh	r3, [r7, #6]
 80059ea:	4603      	mov	r3, r0
 80059ec:	80bb      	strh	r3, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
 80059f2:	4613      	mov	r3, r2
 80059f4:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
	uint8_t *pchar;
	uint32_t line = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 80059fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a02:	4a65      	ldr	r2, [pc, #404]	; (8005b98 <LCD_DrawChar+0x1c0>)
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	82fb      	strh	r3, [r7, #22]
	width = fonts[fontindex]->Width;
 8005a0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005a10:	4a61      	ldr	r2, [pc, #388]	; (8005b98 <LCD_DrawChar+0x1c0>)
 8005a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a16:	889b      	ldrh	r3, [r3, #4]
 8005a18:	82bb      	strh	r3, [r7, #20]

	if ((x >= m_width) || // Clip right
 8005a1a:	4b60      	ldr	r3, [pc, #384]	; (8005b9c <LCD_DrawChar+0x1c4>)
 8005a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	f280 80b2 	bge.w	8005b8e <LCD_DrawChar+0x1b6>
		(y >= m_height) || // Clip bottom
 8005a2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ba0 <LCD_DrawChar+0x1c8>)
 8005a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8005a30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	f280 80aa 	bge.w	8005b8e <LCD_DrawChar+0x1b6>
		((x + width - 1) < 0) || // Clip left
 8005a3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a3e:	8abb      	ldrh	r3, [r7, #20]
 8005a40:	4413      	add	r3, r2
 8005a42:	3b01      	subs	r3, #1
		(y >= m_height) || // Clip bottom
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f2c0 80a2 	blt.w	8005b8e <LCD_DrawChar+0x1b6>
		((y + height - 1) < 0))   // Clip top
 8005a4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	4413      	add	r3, r2
 8005a52:	3b01      	subs	r3, #1
		((x + width - 1) < 0) || // Clip left
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f2c0 809a 	blt.w	8005b8e <LCD_DrawChar+0x1b6>
		return;

	bytes = (width + 7) / 8;
 8005a5a:	8abb      	ldrh	r3, [r7, #20]
 8005a5c:	3307      	adds	r3, #7
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da00      	bge.n	8005a64 <LCD_DrawChar+0x8c>
 8005a62:	3307      	adds	r3, #7
 8005a64:	10db      	asrs	r3, r3, #3
 8005a66:	827b      	strh	r3, [r7, #18]
	if (c < ' ') c = ' ';
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	2b1f      	cmp	r3, #31
 8005a6c:	d802      	bhi.n	8005a74 <LCD_DrawChar+0x9c>
 8005a6e:	2320      	movs	r3, #32
 8005a70:	70fb      	strb	r3, [r7, #3]
 8005a72:	e004      	b.n	8005a7e <LCD_DrawChar+0xa6>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b7e      	cmp	r3, #126	; 0x7e
 8005a78:	d901      	bls.n	8005a7e <LCD_DrawChar+0xa6>
 8005a7a:	2320      	movs	r3, #32
 8005a7c:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	3b20      	subs	r3, #32
 8005a82:	8afa      	ldrh	r2, [r7, #22]
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	8a7a      	ldrh	r2, [r7, #18]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	61bb      	str	r3, [r7, #24]
	offset = 8 * bytes - width;
 8005a90:	8a7b      	ldrh	r3, [r7, #18]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	8abb      	ldrh	r3, [r7, #20]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	747b      	strb	r3, [r7, #17]

	for (uint32_t i = 0; i < height; i++) {
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	e06e      	b.n	8005b84 <LCD_DrawChar+0x1ac>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8005aa6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005aaa:	4a3b      	ldr	r2, [pc, #236]	; (8005b98 <LCD_DrawChar+0x1c0>)
 8005aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	8abb      	ldrh	r3, [r7, #20]
 8005ab8:	3307      	adds	r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da00      	bge.n	8005ac0 <LCD_DrawChar+0xe8>
 8005abe:	3307      	adds	r3, #7
 8005ac0:	10db      	asrs	r3, r3, #3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	fb03 f301 	mul.w	r3, r3, r1
 8005aca:	4413      	add	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
		switch (bytes) {
 8005ace:	8a7b      	ldrh	r3, [r7, #18]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d002      	beq.n	8005ada <LCD_DrawChar+0x102>
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d004      	beq.n	8005ae2 <LCD_DrawChar+0x10a>
 8005ad8:	e00c      	b.n	8005af4 <LCD_DrawChar+0x11c>
		case 1:
			line = pchar[0];
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8005ae0:	e016      	b.n	8005b10 <LCD_DrawChar+0x138>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	3201      	adds	r2, #1
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8005af2:	e00d      	b.n	8005b10 <LCD_DrawChar+0x138>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	041a      	lsls	r2, r3, #16
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	4313      	orrs	r3, r2
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	3202      	adds	r2, #2
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8005b0e:	bf00      	nop
		}
		for (uint32_t j = 0; j < width; j++) {
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e029      	b.n	8005b6a <LCD_DrawChar+0x192>
			if (line & (1 << (width - j + offset - 1))) {
 8005b16:	8aba      	ldrh	r2, [r7, #20]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	7c7b      	ldrb	r3, [r7, #17]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3b01      	subs	r3, #1
 8005b22:	2201      	movs	r2, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <LCD_DrawChar+0x174>
				LCD_DrawPixel((x + j), y, color);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	4413      	add	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	b21b      	sxth	r3, r3
 8005b3e:	883a      	ldrh	r2, [r7, #0]
 8005b40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fd05 	bl	8005554 <LCD_DrawPixel>
 8005b4a:	e00b      	b.n	8005b64 <LCD_DrawChar+0x18c>
			} else {
				LCD_DrawPixel((x + j), y, bg);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	4413      	add	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005b5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fcf8 	bl	8005554 <LCD_DrawPixel>
		for (uint32_t j = 0; j < width; j++) {
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3301      	adds	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	8abb      	ldrh	r3, [r7, #20]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3d1      	bcc.n	8005b16 <LCD_DrawChar+0x13e>
			}
		}
		y++;
 8005b72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	3301      	adds	r3, #1
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	8afb      	ldrh	r3, [r7, #22]
 8005b86:	6a3a      	ldr	r2, [r7, #32]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d38c      	bcc.n	8005aa6 <LCD_DrawChar+0xce>
 8005b8c:	e000      	b.n	8005b90 <LCD_DrawChar+0x1b8>
		return;
 8005b8e:	bf00      	nop
	}
}
 8005b90:	372c      	adds	r7, #44	; 0x2c
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd90      	pop	{r4, r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000014 	.word	0x20000014
 8005b9c:	20000460 	.word	0x20000460
 8005ba0:	20000462 	.word	0x20000462

08005ba4 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8005ba4:	b40f      	push	{r0, r1, r2, r3}
 8005ba6:	b5b0      	push	{r4, r5, r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb0:	60bb      	str	r3, [r7, #8]
	vsprintf(buf, fmt, lst);
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	6a39      	ldr	r1, [r7, #32]
 8005bb6:	4850      	ldr	r0, [pc, #320]	; (8005cf8 <LCD_Printf+0x154>)
 8005bb8:	f003 f8d4 	bl	8008d64 <vsiprintf>
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8005bbc:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <LCD_Printf+0x158>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <LCD_Printf+0x15c>)
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	80fb      	strh	r3, [r7, #6]
	width = fonts[m_font]->Width;
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <LCD_Printf+0x158>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4b4b      	ldr	r3, [pc, #300]	; (8005d00 <LCD_Printf+0x15c>)
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	889b      	ldrh	r3, [r3, #4]
 8005bda:	80bb      	strh	r3, [r7, #4]

	p = buf;
 8005bdc:	4b46      	ldr	r3, [pc, #280]	; (8005cf8 <LCD_Printf+0x154>)
 8005bde:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8005be0:	e07d      	b.n	8005cde <LCD_Printf+0x13a>
		if (*p == '\n') {
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b0a      	cmp	r3, #10
 8005be8:	d10e      	bne.n	8005c08 <LCD_Printf+0x64>
			m_cursor_y += height;
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <LCD_Printf+0x160>)
 8005bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	b21a      	sxth	r2, r3
 8005bfc:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <LCD_Printf+0x160>)
 8005bfe:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8005c00:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <LCD_Printf+0x164>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	e067      	b.n	8005cd8 <LCD_Printf+0x134>
		} else if (*p == '\r') {
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b0d      	cmp	r3, #13
 8005c0e:	d103      	bne.n	8005c18 <LCD_Printf+0x74>
			m_cursor_x = 0;
 8005c10:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <LCD_Printf+0x164>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e05f      	b.n	8005cd8 <LCD_Printf+0x134>
		} else if (*p == '\t') {
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b09      	cmp	r3, #9
 8005c1e:	d10d      	bne.n	8005c3c <LCD_Printf+0x98>
			m_cursor_x += width * 4;
 8005c20:	88bb      	ldrh	r3, [r7, #4]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <LCD_Printf+0x164>)
 8005c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4413      	add	r3, r2
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b21a      	sxth	r2, r3
 8005c36:	4b34      	ldr	r3, [pc, #208]	; (8005d08 <LCD_Printf+0x164>)
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e04d      	b.n	8005cd8 <LCD_Printf+0x134>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <LCD_Printf+0x160>)
 8005c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c42:	461a      	mov	r2, r3
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <LCD_Printf+0x168>)
 8005c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	1acb      	subs	r3, r1, r3
 8005c52:	429a      	cmp	r2, r3
 8005c54:	db02      	blt.n	8005c5c <LCD_Printf+0xb8>
				m_cursor_y = 0;
 8005c56:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <LCD_Printf+0x160>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <LCD_Printf+0x164>)
 8005c5e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <LCD_Printf+0x160>)
 8005c64:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	781c      	ldrb	r4, [r3, #0]
 8005c6c:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <LCD_Printf+0x16c>)
 8005c6e:	881d      	ldrh	r5, [r3, #0]
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <LCD_Printf+0x170>)
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <LCD_Printf+0x158>)
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	4622      	mov	r2, r4
 8005c80:	f7ff feaa 	bl	80059d8 <LCD_DrawChar>
			m_cursor_x += width;
 8005c84:	88bb      	ldrh	r3, [r7, #4]
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <LCD_Printf+0x164>)
 8005c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	b21a      	sxth	r2, r3
 8005c96:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <LCD_Printf+0x164>)
 8005c98:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8005c9a:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <LCD_Printf+0x174>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01a      	beq.n	8005cd8 <LCD_Printf+0x134>
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <LCD_Printf+0x164>)
 8005ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b1c      	ldr	r3, [pc, #112]	; (8005d1c <LCD_Printf+0x178>)
 8005cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	88bb      	ldrh	r3, [r7, #4]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	1acb      	subs	r3, r1, r3
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	dd0d      	ble.n	8005cd8 <LCD_Printf+0x134>
				m_cursor_y += height;
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <LCD_Printf+0x160>)
 8005cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	b21a      	sxth	r2, r3
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <LCD_Printf+0x160>)
 8005cd0:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <LCD_Printf+0x164>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
	while (*p) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f47f af7d 	bne.w	8005be2 <LCD_Printf+0x3e>
	}
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005cf2:	b004      	add	sp, #16
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000470 	.word	0x20000470
 8005cfc:	2000046c 	.word	0x2000046c
 8005d00:	20000014 	.word	0x20000014
 8005d04:	20000466 	.word	0x20000466
 8005d08:	20000464 	.word	0x20000464
 8005d0c:	20000462 	.word	0x20000462
 8005d10:	20000468 	.word	0x20000468
 8005d14:	2000046a 	.word	0x2000046a
 8005d18:	2000046e 	.word	0x2000046e
 8005d1c:	20000460 	.word	0x20000460

08005d20 <LCD_SetTextSize>:
 *
 * \param s	Size
 *
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d305      	bcc.n	8005d3e <LCD_SetTextSize+0x1e>
		m_font = fontsNum - 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <LCD_SetTextSize+0x30>)
 8005d3a:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8005d3c:	e002      	b.n	8005d44 <LCD_SetTextSize+0x24>
		m_font = s;
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <LCD_SetTextSize+0x30>)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	7013      	strb	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	2000046c 	.word	0x2000046c

08005d54 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	80fb      	strh	r3, [r7, #6]
 8005d60:	4613      	mov	r3, r2
 8005d62:	80bb      	strh	r3, [r7, #4]
	m_textcolor = c;
 8005d64:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <LCD_SetTextColor+0x28>)
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	8013      	strh	r3, [r2, #0]
	m_textbgcolor = b;
 8005d6a:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <LCD_SetTextColor+0x2c>)
 8005d6c:	88bb      	ldrh	r3, [r7, #4]
 8005d6e:	8013      	strh	r3, [r2, #0]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000468 	.word	0x20000468
 8005d80:	2000046a 	.word	0x2000046a

08005d84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d96:	2b84      	cmp	r3, #132	; 0x84
 8005d98:	d005      	beq.n	8005da6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	3303      	adds	r3, #3
 8005da4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005da6:	68fb      	ldr	r3, [r7, #12]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dba:	f3ef 8305 	mrs	r3, IPSR
 8005dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8005dc0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ddc:	f001 f9a8 	bl	8007130 <vTaskStartScheduler>
  
  return osOK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de8:	b089      	sub	sp, #36	; 0x24
 8005dea:	af04      	add	r7, sp, #16
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d020      	beq.n	8005e3a <osThreadCreate+0x54>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01c      	beq.n	8005e3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685c      	ldr	r4, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681d      	ldr	r5, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691e      	ldr	r6, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff ffb6 	bl	8005d84 <makeFreeRtosPriority>
 8005e18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e22:	9202      	str	r2, [sp, #8]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	9100      	str	r1, [sp, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4632      	mov	r2, r6
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 ffc3 	bl	8006dba <xTaskCreateStatic>
 8005e34:	4603      	mov	r3, r0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e01c      	b.n	8005e74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685c      	ldr	r4, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e46:	b29e      	uxth	r6, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff ff98 	bl	8005d84 <makeFreeRtosPriority>
 8005e54:	4602      	mov	r2, r0
 8005e56:	f107 030c 	add.w	r3, r7, #12
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	9200      	str	r2, [sp, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	4632      	mov	r2, r6
 8005e62:	4629      	mov	r1, r5
 8005e64:	4620      	mov	r0, r4
 8005e66:	f001 f801 	bl	8006e6c <xTaskCreate>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <osDelay+0x16>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	e000      	b.n	8005e96 <osDelay+0x18>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 f916 	bl	80070c8 <vTaskDelay>
  
  return osOK;
 8005e9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b08a      	sub	sp, #40	; 0x28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8005eb6:	f7ff ff7d 	bl	8005db4 <inHandlerMode>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ec0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	617a      	str	r2, [r7, #20]
 8005ed6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ed8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	e001      	b.n	8005ee2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8005ede:	f001 ff55 	bl	8007d8c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e029      	b.n	8005f3c <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d301      	bcc.n	8005f00 <osPoolAlloc+0x5a>
      index = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d113      	bne.n	8005f36 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4413      	add	r3, r2
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	440b      	add	r3, r1
 8005f2c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	611a      	str	r2, [r3, #16]
      break;
 8005f34:	e007      	b.n	8005f46 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d3d0      	bcc.n	8005ee8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8005f46:	f7ff ff35 	bl	8005db4 <inHandlerMode>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	e001      	b.n	8005f60 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8005f5c:	f001 ff44 	bl	8007de8 <vPortExitCritical>
  }
  
  return p;
 8005f60:	6a3b      	ldr	r3, [r7, #32]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3728      	adds	r7, #40	; 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <osPoolFree+0x14>
    return osErrorParameter;
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	e030      	b.n	8005fe0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <osPoolFree+0x1e>
    return osErrorParameter;
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	e02b      	b.n	8005fe0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d201      	bcs.n	8005f96 <osPoolFree+0x2c>
    return osErrorParameter;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	e024      	b.n	8005fe0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005faa:	fb02 f201 	mul.w	r2, r2, r1
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <osPoolFree+0x4e>
    return osErrorParameter;
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	e013      	b.n	8005fe0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d301      	bcc.n	8005fd2 <osPoolFree+0x68>
    return osErrorParameter;
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	e006      	b.n	8005fe0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d012      	beq.n	8006024 <osMessageCreate+0x38>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68dc      	ldr	r4, [r3, #12]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	4623      	mov	r3, r4
 800601c:	f000 fa08 	bl	8006430 <xQueueGenericCreateStatic>
 8006020:	4603      	mov	r3, r0
 8006022:	e008      	b.n	8006036 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	4619      	mov	r1, r3
 8006030:	f000 fa70 	bl	8006514 <xQueueGenericCreate>
 8006034:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bd90      	pop	{r4, r7, pc}

0800603e <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <osMailAlloc+0x14>
    return NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	e006      	b.n	8006060 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff ff25 	bl	8005ea6 <osPoolAlloc>
 800605c:	60f8      	str	r0, [r7, #12]
  
  return p;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <osMailPut+0x14>
    return osErrorParameter;
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	e02c      	b.n	80060d6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8006080:	f7ff fe98 	bl	8005db4 <inHandlerMode>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6858      	ldr	r0, [r3, #4]
 800608e:	f107 020c 	add.w	r2, r7, #12
 8006092:	4639      	mov	r1, r7
 8006094:	2300      	movs	r3, #0
 8006096:	f000 fb93 	bl	80067c0 <xQueueGenericSendFromISR>
 800609a:	4603      	mov	r3, r0
 800609c:	2b01      	cmp	r3, #1
 800609e:	d001      	beq.n	80060a4 <osMailPut+0x3c>
      return osErrorOS;
 80060a0:	23ff      	movs	r3, #255	; 0xff
 80060a2:	e018      	b.n	80060d6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <osMailPut+0x6c>
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <osMailPut+0x78>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e00b      	b.n	80060d4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6858      	ldr	r0, [r3, #4]
 80060c0:	4639      	mov	r1, r7
 80060c2:	2300      	movs	r3, #0
 80060c4:	2200      	movs	r2, #0
 80060c6:	f000 fa81 	bl	80065cc <xQueueGenericSend>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d001      	beq.n	80060d4 <osMailPut+0x6c>
      return osErrorOS;
 80060d0:	23ff      	movs	r3, #255	; 0xff
 80060d2:	e000      	b.n	80060d6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b08b      	sub	sp, #44	; 0x2c
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80060fa:	2380      	movs	r3, #128	; 0x80
 80060fc:	617b      	str	r3, [r7, #20]
    return event;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	461c      	mov	r4, r3
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800610e:	e056      	b.n	80061be <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d103      	bne.n	8006128 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
 8006126:	e009      	b.n	800613c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d006      	beq.n	800613c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <osMailGet+0x58>
      ticks = 1;
 8006138:	2301      	movs	r3, #1
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800613c:	f7ff fe3a 	bl	8005db4 <inHandlerMode>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01d      	beq.n	8006182 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6858      	ldr	r0, [r3, #4]
 800614a:	f107 0220 	add.w	r2, r7, #32
 800614e:	f107 0314 	add.w	r3, r7, #20
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	f000 fca3 	bl	8006aa0 <xQueueReceiveFromISR>
 800615a:	4603      	mov	r3, r0
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8006160:	2320      	movs	r3, #32
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e001      	b.n	800616a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <osMailGet+0xca>
 8006170:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <osMailGet+0xe4>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	e015      	b.n	80061ae <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6858      	ldr	r0, [r3, #4]
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	3304      	adds	r3, #4
 800618c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618e:	4619      	mov	r1, r3
 8006190:	f000 fbaa 	bl	80068e8 <xQueueReceive>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d102      	bne.n	80061a0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800619a:	2320      	movs	r3, #32
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e006      	b.n	80061ae <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <osMailGet+0xc6>
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <osMailGet+0xc8>
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	461c      	mov	r4, r3
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd90      	pop	{r4, r7, pc}
 80061c6:	bf00      	nop
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <osMailFree+0x14>
    return osErrorParameter;
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	e006      	b.n	80061ee <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff febf 	bl	8005f6a <osPoolFree>
 80061ec:	4603      	mov	r3, r0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f103 0208 	add.w	r2, r3, #8
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f103 0208 	add.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f103 0208 	add.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e00c      	b.n	80062d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3308      	adds	r3, #8
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e002      	b.n	80062c6 <vListInsert+0x2e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d2f6      	bcs.n	80062c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	601a      	str	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6892      	ldr	r2, [r2, #8]
 8006320:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6852      	ldr	r2, [r2, #4]
 800632a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d103      	bne.n	800633e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <xQueueGenericReset+0x28>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	e7fe      	b.n	8006386 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006388:	f001 fd00 	bl	8007d8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	68f9      	ldr	r1, [r7, #12]
 8006396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	3b01      	subs	r3, #1
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	441a      	add	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	22ff      	movs	r2, #255	; 0xff
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d114      	bne.n	8006408 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01a      	beq.n	800641c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3310      	adds	r3, #16
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 f8e2 	bl	80075b4 <xTaskRemoveFromEventList>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <xQueueGenericReset+0xcc>)
 80063f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	e009      	b.n	800641c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3310      	adds	r3, #16
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fef2 	bl	80061f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3324      	adds	r3, #36	; 0x24
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff feed 	bl	80061f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800641c:	f001 fce4 	bl	8007de8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006420:	2301      	movs	r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af02      	add	r7, sp, #8
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <xQueueGenericCreateStatic+0x28>
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
 8006456:	e7fe      	b.n	8006456 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <xQueueGenericCreateStatic+0x42>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
 8006470:	e7fe      	b.n	8006470 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <xQueueGenericCreateStatic+0x4e>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <xQueueGenericCreateStatic+0x52>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueGenericCreateStatic+0x54>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <xQueueGenericCreateStatic+0x6c>
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	e7fe      	b.n	800649a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <xQueueGenericCreateStatic+0x78>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <xQueueGenericCreateStatic+0x7c>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e000      	b.n	80064ae <xQueueGenericCreateStatic+0x7e>
 80064ac:	2300      	movs	r3, #0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <xQueueGenericCreateStatic+0x96>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064c6:	2348      	movs	r3, #72	; 0x48
 80064c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b48      	cmp	r3, #72	; 0x48
 80064ce:	d009      	beq.n	80064e4 <xQueueGenericCreateStatic+0xb4>
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	e7fe      	b.n	80064e2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f842 	bl	800658e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800650c:	4618      	mov	r0, r3
 800650e:	3730      	adds	r7, #48	; 0x30
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d109      	bne.n	800653c <xQueueGenericCreate+0x28>
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e7fe      	b.n	800653a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	e004      	b.n	8006552 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3348      	adds	r3, #72	; 0x48
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fd32 	bl	8007fc0 <pvPortMalloc>
 800655c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3348      	adds	r3, #72	; 0x48
 8006568:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006572:	79fa      	ldrb	r2, [r7, #7]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f805 	bl	800658e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006584:	69bb      	ldr	r3, [r7, #24]
	}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	e002      	b.n	80065b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065bc:	2101      	movs	r1, #1
 80065be:	69b8      	ldr	r0, [r7, #24]
 80065c0:	f7ff fece 	bl	8006360 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08e      	sub	sp, #56	; 0x38
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065da:	2300      	movs	r3, #0
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <xQueueGenericSend+0x30>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <xQueueGenericSend+0x3e>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <xQueueGenericSend+0x42>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <xQueueGenericSend+0x44>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <xQueueGenericSend+0x5c>
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
 8006626:	e7fe      	b.n	8006626 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d103      	bne.n	8006636 <xQueueGenericSend+0x6a>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <xQueueGenericSend+0x6e>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <xQueueGenericSend+0x70>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <xQueueGenericSend+0x88>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	623b      	str	r3, [r7, #32]
 8006652:	e7fe      	b.n	8006652 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006654:	f001 f96a 	bl	800792c <xTaskGetSchedulerState>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <xQueueGenericSend+0x98>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <xQueueGenericSend+0x9c>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <xQueueGenericSend+0x9e>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <xQueueGenericSend+0xb6>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e7fe      	b.n	8006680 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006682:	f001 fb83 	bl	8007d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <xQueueGenericSend+0xcc>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d129      	bne.n	80066ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669e:	f000 fa7c 	bl	8006b9a <prvCopyDataToQueue>
 80066a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	3324      	adds	r3, #36	; 0x24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ff7f 	bl	80075b4 <xTaskRemoveFromEventList>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80066bc:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <xQueueGenericSend+0x1f0>)
 80066be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	e00a      	b.n	80066e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066d4:	4b39      	ldr	r3, [pc, #228]	; (80067bc <xQueueGenericSend+0x1f0>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066e4:	f001 fb80 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e063      	b.n	80067b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d103      	bne.n	80066fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066f2:	f001 fb79 	bl	8007de8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e05c      	b.n	80067b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d106      	bne.n	800670e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006700:	f107 0314 	add.w	r3, r7, #20
 8006704:	4618      	mov	r0, r3
 8006706:	f000 ffb7 	bl	8007678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800670a:	2301      	movs	r3, #1
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800670e:	f001 fb6b 	bl	8007de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006712:	f000 fd6b 	bl	80071ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006716:	f001 fb39 	bl	8007d8c <vPortEnterCritical>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006720:	b25b      	sxtb	r3, r3
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d103      	bne.n	8006730 <xQueueGenericSend+0x164>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006736:	b25b      	sxtb	r3, r3
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d103      	bne.n	8006746 <xQueueGenericSend+0x17a>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006746:	f001 fb4f 	bl	8007de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800674a:	1d3a      	adds	r2, r7, #4
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ffa6 	bl	80076a4 <xTaskCheckForTimeOut>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d124      	bne.n	80067a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800675e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006760:	f000 fb13 	bl	8006d8a <prvIsQueueFull>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	3310      	adds	r3, #16
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fefa 	bl	800756c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677a:	f000 fa9e 	bl	8006cba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800677e:	f000 fd43 	bl	8007208 <xTaskResumeAll>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	f47f af7c 	bne.w	8006682 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <xQueueGenericSend+0x1f0>)
 800678c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	e772      	b.n	8006682 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800679c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800679e:	f000 fa8c 	bl	8006cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a2:	f000 fd31 	bl	8007208 <xTaskResumeAll>
 80067a6:	e76c      	b.n	8006682 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067aa:	f000 fa86 	bl	8006cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ae:	f000 fd2b 	bl	8007208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067b2:	2300      	movs	r3, #0
		}
	}
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3738      	adds	r7, #56	; 0x38
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08e      	sub	sp, #56	; 0x38
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <xQueueGenericSendFromISR+0x2c>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e7fe      	b.n	80067ea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <xQueueGenericSendFromISR+0x3a>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <xQueueGenericSendFromISR+0x3e>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <xQueueGenericSendFromISR+0x40>
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <xQueueGenericSendFromISR+0x58>
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	e7fe      	b.n	8006816 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d103      	bne.n	8006826 <xQueueGenericSendFromISR+0x66>
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <xQueueGenericSendFromISR+0x6a>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <xQueueGenericSendFromISR+0x6c>
 800682a:	2300      	movs	r3, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <xQueueGenericSendFromISR+0x84>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006844:	f001 fb7e 	bl	8007f44 <vPortValidateInterruptPriority>
	__asm volatile
 8006848:	f3ef 8211 	mrs	r2, BASEPRI
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61ba      	str	r2, [r7, #24]
 800685e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006860:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <xQueueGenericSendFromISR+0xb6>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d12c      	bne.n	80068d0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800687c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006886:	f000 f988 	bl	8006b9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800688a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	d112      	bne.n	80068ba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d016      	beq.n	80068ca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	3324      	adds	r3, #36	; 0x24
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fe87 	bl	80075b4 <xTaskRemoveFromEventList>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00e      	beq.n	80068ca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e007      	b.n	80068ca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068be:	3301      	adds	r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	b25a      	sxtb	r2, r3
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068ca:	2301      	movs	r3, #1
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068ce:	e001      	b.n	80068d4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3738      	adds	r7, #56	; 0x38
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <xQueueReceive+0x2e>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	e7fe      	b.n	8006914 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <xQueueReceive+0x3c>
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueReceive+0x40>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueReceive+0x42>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <xQueueReceive+0x5a>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e7fe      	b.n	8006940 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006942:	f000 fff3 	bl	800792c <xTaskGetSchedulerState>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xQueueReceive+0x6a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueReceive+0x6e>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueReceive+0x70>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <xQueueReceive+0x88>
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e7fe      	b.n	800696e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006970:	f001 fa0c 	bl	8007d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01f      	beq.n	80069c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006984:	f000 f973 	bl	8006c6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00f      	beq.n	80069b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	3310      	adds	r3, #16
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fe09 	bl	80075b4 <xTaskRemoveFromEventList>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b3c      	ldr	r3, [pc, #240]	; (8006a9c <xQueueReceive+0x1b4>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069b8:	f001 fa16 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 80069bc:	2301      	movs	r3, #1
 80069be:	e069      	b.n	8006a94 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c6:	f001 fa0f 	bl	8007de8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e062      	b.n	8006a94 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d4:	f107 0310 	add.w	r3, r7, #16
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fe4d 	bl	8007678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e2:	f001 fa01 	bl	8007de8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e6:	f000 fc01 	bl	80071ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ea:	f001 f9cf 	bl	8007d8c <vPortEnterCritical>
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d103      	bne.n	8006a04 <xQueueReceive+0x11c>
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d103      	bne.n	8006a1a <xQueueReceive+0x132>
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a1a:	f001 f9e5 	bl	8007de8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1e:	1d3a      	adds	r2, r7, #4
 8006a20:	f107 0310 	add.w	r3, r7, #16
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fe3c 	bl	80076a4 <xTaskCheckForTimeOut>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d123      	bne.n	8006a7a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a34:	f000 f993 	bl	8006d5e <prvIsQueueEmpty>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d017      	beq.n	8006a6e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fd90 	bl	800756c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4e:	f000 f934 	bl	8006cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a52:	f000 fbd9 	bl	8007208 <xTaskResumeAll>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d189      	bne.n	8006970 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006a5c:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <xQueueReceive+0x1b4>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	e780      	b.n	8006970 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a70:	f000 f923 	bl	8006cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a74:	f000 fbc8 	bl	8007208 <xTaskResumeAll>
 8006a78:	e77a      	b.n	8006970 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7c:	f000 f91d 	bl	8006cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a80:	f000 fbc2 	bl	8007208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a86:	f000 f96a 	bl	8006d5e <prvIsQueueEmpty>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f43f af6f 	beq.w	8006970 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3730      	adds	r7, #48	; 0x30
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08e      	sub	sp, #56	; 0x38
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <xQueueReceiveFromISR+0x2a>
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	623b      	str	r3, [r7, #32]
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <xQueueReceiveFromISR+0x38>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <xQueueReceiveFromISR+0x3c>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <xQueueReceiveFromISR+0x3e>
 8006adc:	2300      	movs	r3, #0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <xQueueReceiveFromISR+0x56>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	e7fe      	b.n	8006af4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af6:	f001 fa25 	bl	8007f44 <vPortValidateInterruptPriority>
	__asm volatile
 8006afa:	f3ef 8211 	mrs	r2, BASEPRI
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	61ba      	str	r2, [r7, #24]
 8006b10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006b12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d02f      	beq.n	8006b82 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b30:	f000 f89d 	bl	8006c6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	1e5a      	subs	r2, r3, #1
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006b3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d112      	bne.n	8006b6c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d016      	beq.n	8006b7c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	3310      	adds	r3, #16
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fd2e 	bl	80075b4 <xTaskRemoveFromEventList>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e007      	b.n	8006b7c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	b25a      	sxtb	r2, r3
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b80:	e001      	b.n	8006b86 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3738      	adds	r7, #56	; 0x38
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10d      	bne.n	8006bd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d14d      	bne.n	8006c5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fecf 	bl	8007968 <xTaskPriorityDisinherit>
 8006bca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
 8006bd2:	e043      	b.n	8006c5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d119      	bne.n	8006c0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6898      	ldr	r0, [r3, #8]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	461a      	mov	r2, r3
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	f001 fc03 	bl	80083f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d32b      	bcc.n	8006c5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	e026      	b.n	8006c5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68d8      	ldr	r0, [r3, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	461a      	mov	r2, r3
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	f001 fbe9 	bl	80083f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	425b      	negs	r3, r3
 8006c28:	441a      	add	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d207      	bcs.n	8006c4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	425b      	negs	r3, r3
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d105      	bne.n	8006c5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c64:	697b      	ldr	r3, [r7, #20]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d018      	beq.n	8006cb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	441a      	add	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d303      	bcc.n	8006ca2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	461a      	mov	r2, r3
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f001 fb9f 	bl	80083f0 <memcpy>
	}
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cc2:	f001 f863 	bl	8007d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ccc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cce:	e011      	b.n	8006cf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d012      	beq.n	8006cfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fc69 	bl	80075b4 <xTaskRemoveFromEventList>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ce8:	f000 fd3c 	bl	8007764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dce9      	bgt.n	8006cd0 <prvUnlockQueue+0x16>
 8006cfc:	e000      	b.n	8006d00 <prvUnlockQueue+0x46>
					break;
 8006cfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	22ff      	movs	r2, #255	; 0xff
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d08:	f001 f86e 	bl	8007de8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d0c:	f001 f83e 	bl	8007d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d18:	e011      	b.n	8006d3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d012      	beq.n	8006d48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3310      	adds	r3, #16
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fc44 	bl	80075b4 <xTaskRemoveFromEventList>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d32:	f000 fd17 	bl	8007764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dce9      	bgt.n	8006d1a <prvUnlockQueue+0x60>
 8006d46:	e000      	b.n	8006d4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	22ff      	movs	r2, #255	; 0xff
 8006d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d52:	f001 f849 	bl	8007de8 <vPortExitCritical>
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d66:	f001 f811 	bl	8007d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d72:	2301      	movs	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e001      	b.n	8006d7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d7c:	f001 f834 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d92:	f000 fffb 	bl	8007d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d102      	bne.n	8006da8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e001      	b.n	8006dac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dac:	f001 f81c 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 8006db0:	68fb      	ldr	r3, [r7, #12]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b08e      	sub	sp, #56	; 0x38
 8006dbe:	af04      	add	r7, sp, #16
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <xTaskCreateStatic+0x28>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	e7fe      	b.n	8006de0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <xTaskCreateStatic+0x42>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	e7fe      	b.n	8006dfa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dfc:	2354      	movs	r3, #84	; 0x54
 8006dfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b54      	cmp	r3, #84	; 0x54
 8006e04:	d009      	beq.n	8006e1a <xTaskCreateStatic+0x60>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e7fe      	b.n	8006e18 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <xTaskCreateStatic+0xa4>
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d01b      	beq.n	8006e5e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f850 	bl	8006ef6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e58:	f000 f8cc 	bl	8006ff4 <prvAddNewTaskToReadyList>
 8006e5c:	e001      	b.n	8006e62 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e62:	697b      	ldr	r3, [r7, #20]
	}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3728      	adds	r7, #40	; 0x28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	; 0x30
 8006e70:	af04      	add	r7, sp, #16
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f89d 	bl	8007fc0 <pvPortMalloc>
 8006e86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00e      	beq.n	8006eac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e8e:	2054      	movs	r0, #84	; 0x54
 8006e90:	f001 f896 	bl	8007fc0 <pvPortMalloc>
 8006e94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ea2:	e005      	b.n	8006eb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f001 f951 	bl	800814c <vPortFree>
 8006eaa:	e001      	b.n	8006eb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d017      	beq.n	8006ee6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9303      	str	r3, [sp, #12]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	9302      	str	r3, [sp, #8]
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f80e 	bl	8006ef6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eda:	69f8      	ldr	r0, [r7, #28]
 8006edc:	f000 f88a 	bl	8006ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e002      	b.n	8006eec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eec:	69bb      	ldr	r3, [r7, #24]
	}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f023 0307 	bic.w	r3, r3, #7
 8006f1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <prvInitialiseNewTask+0x46>
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	e7fe      	b.n	8006f3a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e012      	b.n	8006f68 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	3334      	adds	r3, #52	; 0x34
 8006f52:	460a      	mov	r2, r1
 8006f54:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	3301      	adds	r3, #1
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	d9e9      	bls.n	8006f42 <prvInitialiseNewTask+0x4c>
 8006f6e:	e000      	b.n	8006f72 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006f70:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	2b06      	cmp	r3, #6
 8006f7e:	d901      	bls.n	8006f84 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f80:	2306      	movs	r3, #6
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2200      	movs	r2, #0
 8006f94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff f94b 	bl	8006236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	3318      	adds	r3, #24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff f946 	bl	8006236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	f1c3 0207 	rsb	r2, r3, #7
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	69b8      	ldr	r0, [r7, #24]
 8006fd4:	f000 fdb2 	bl	8007b3c <pxPortInitialiseStack>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fea:	bf00      	nop
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ffc:	f000 fec6 	bl	8007d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007000:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	4a29      	ldr	r2, [pc, #164]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 8007008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800700a:	4b29      	ldr	r3, [pc, #164]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007012:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007018:	4b24      	ldr	r3, [pc, #144]	; (80070ac <prvAddNewTaskToReadyList+0xb8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d110      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007020:	f000 fbc4 	bl	80077ac <prvInitialiseTaskLists>
 8007024:	e00d      	b.n	8007042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007026:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <prvAddNewTaskToReadyList+0xc0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d802      	bhi.n	8007042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800703c:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <prvAddNewTaskToReadyList+0xc4>)
 800704a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4313      	orrs	r3, r2
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <prvAddNewTaskToReadyList+0xc8>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <prvAddNewTaskToReadyList+0xcc>)
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7ff f8eb 	bl	8006250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800707a:	f000 feb5 	bl	8007de8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <prvAddNewTaskToReadyList+0xc0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvAddNewTaskToReadyList+0xbc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d207      	bcs.n	80070a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <prvAddNewTaskToReadyList+0xd0>)
 8007096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000670 	.word	0x20000670
 80070b0:	20000570 	.word	0x20000570
 80070b4:	2000067c 	.word	0x2000067c
 80070b8:	2000068c 	.word	0x2000068c
 80070bc:	20000678 	.word	0x20000678
 80070c0:	20000574 	.word	0x20000574
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <vTaskDelay+0x60>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <vTaskDelay+0x2e>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	e7fe      	b.n	80070f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80070f6:	f000 f879 	bl	80071ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fcb7 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007102:	f000 f881 	bl	8007208 <xTaskResumeAll>
 8007106:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <vTaskDelay+0x64>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000698 	.word	0x20000698
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800713e:	463a      	mov	r2, r7
 8007140:	1d39      	adds	r1, r7, #4
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 fed6 	bl	8000ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	9202      	str	r2, [sp, #8]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	2300      	movs	r3, #0
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	460a      	mov	r2, r1
 800715e:	491d      	ldr	r1, [pc, #116]	; (80071d4 <vTaskStartScheduler+0xa4>)
 8007160:	481d      	ldr	r0, [pc, #116]	; (80071d8 <vTaskStartScheduler+0xa8>)
 8007162:	f7ff fe2a 	bl	8006dba <xTaskCreateStatic>
 8007166:	4602      	mov	r2, r0
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <vTaskStartScheduler+0xac>)
 800716a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <vTaskStartScheduler+0xac>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007174:	2301      	movs	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	e001      	b.n	800717e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d115      	bne.n	80071b0 <vTaskStartScheduler+0x80>
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007196:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <vTaskStartScheduler+0xb0>)
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <vTaskStartScheduler+0xb4>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <vTaskStartScheduler+0xb8>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071aa:	f000 fd51 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071ae:	e00d      	b.n	80071cc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d109      	bne.n	80071cc <vTaskStartScheduler+0x9c>
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e7fe      	b.n	80071ca <vTaskStartScheduler+0x9a>
}
 80071cc:	bf00      	nop
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	0800a5c4 	.word	0x0800a5c4
 80071d8:	0800777d 	.word	0x0800777d
 80071dc:	20000694 	.word	0x20000694
 80071e0:	20000690 	.word	0x20000690
 80071e4:	2000067c 	.word	0x2000067c
 80071e8:	20000674 	.word	0x20000674

080071ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071f0:	4b04      	ldr	r3, [pc, #16]	; (8007204 <vTaskSuspendAll+0x18>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	4a03      	ldr	r2, [pc, #12]	; (8007204 <vTaskSuspendAll+0x18>)
 80071f8:	6013      	str	r3, [r2, #0]
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20000698 	.word	0x20000698

08007208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007216:	4b41      	ldr	r3, [pc, #260]	; (800731c <xTaskResumeAll+0x114>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <xTaskResumeAll+0x2a>
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	e7fe      	b.n	8007230 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007232:	f000 fdab 	bl	8007d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <xTaskResumeAll+0x114>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3b01      	subs	r3, #1
 800723c:	4a37      	ldr	r2, [pc, #220]	; (800731c <xTaskResumeAll+0x114>)
 800723e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007240:	4b36      	ldr	r3, [pc, #216]	; (800731c <xTaskResumeAll+0x114>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d161      	bne.n	800730c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007248:	4b35      	ldr	r3, [pc, #212]	; (8007320 <xTaskResumeAll+0x118>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d05d      	beq.n	800730c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007250:	e02e      	b.n	80072b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007252:	4b34      	ldr	r3, [pc, #208]	; (8007324 <xTaskResumeAll+0x11c>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3318      	adds	r3, #24
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff f853 	bl	800630a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff f84e 	bl	800630a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	2201      	movs	r2, #1
 8007274:	409a      	lsls	r2, r3
 8007276:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <xTaskResumeAll+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4313      	orrs	r3, r2
 800727c:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <xTaskResumeAll+0x120>)
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a27      	ldr	r2, [pc, #156]	; (800732c <xTaskResumeAll+0x124>)
 800728e:	441a      	add	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3304      	adds	r3, #4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f7fe ffda 	bl	8006250 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	4b23      	ldr	r3, [pc, #140]	; (8007330 <xTaskResumeAll+0x128>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80072aa:	4b22      	ldr	r3, [pc, #136]	; (8007334 <xTaskResumeAll+0x12c>)
 80072ac:	2201      	movs	r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072b0:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <xTaskResumeAll+0x11c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1cc      	bne.n	8007252 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072be:	f000 fb0f 	bl	80078e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80072c2:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <xTaskResumeAll+0x130>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d010      	beq.n	80072f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072ce:	f000 f837 	bl	8007340 <xTaskIncrementTick>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80072d8:	4b16      	ldr	r3, [pc, #88]	; (8007334 <xTaskResumeAll+0x12c>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f1      	bne.n	80072ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <xTaskResumeAll+0x130>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072f0:	4b10      	ldr	r3, [pc, #64]	; (8007334 <xTaskResumeAll+0x12c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <xTaskResumeAll+0x134>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800730c:	f000 fd6c 	bl	8007de8 <vPortExitCritical>

	return xAlreadyYielded;
 8007310:	68bb      	ldr	r3, [r7, #8]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000698 	.word	0x20000698
 8007320:	20000670 	.word	0x20000670
 8007324:	20000630 	.word	0x20000630
 8007328:	20000678 	.word	0x20000678
 800732c:	20000574 	.word	0x20000574
 8007330:	20000570 	.word	0x20000570
 8007334:	20000684 	.word	0x20000684
 8007338:	20000680 	.word	0x20000680
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800734a:	4b50      	ldr	r3, [pc, #320]	; (800748c <xTaskIncrementTick+0x14c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 808c 	bne.w	800746c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007354:	4b4e      	ldr	r3, [pc, #312]	; (8007490 <xTaskIncrementTick+0x150>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800735c:	4a4c      	ldr	r2, [pc, #304]	; (8007490 <xTaskIncrementTick+0x150>)
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11f      	bne.n	80073a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007368:	4b4a      	ldr	r3, [pc, #296]	; (8007494 <xTaskIncrementTick+0x154>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <xTaskIncrementTick+0x46>
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	e7fe      	b.n	8007384 <xTaskIncrementTick+0x44>
 8007386:	4b43      	ldr	r3, [pc, #268]	; (8007494 <xTaskIncrementTick+0x154>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	4b42      	ldr	r3, [pc, #264]	; (8007498 <xTaskIncrementTick+0x158>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a40      	ldr	r2, [pc, #256]	; (8007494 <xTaskIncrementTick+0x154>)
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	4a40      	ldr	r2, [pc, #256]	; (8007498 <xTaskIncrementTick+0x158>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b40      	ldr	r3, [pc, #256]	; (800749c <xTaskIncrementTick+0x15c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	4a3e      	ldr	r2, [pc, #248]	; (800749c <xTaskIncrementTick+0x15c>)
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	f000 fa9c 	bl	80078e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073a8:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <xTaskIncrementTick+0x160>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d34d      	bcc.n	800744e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b2:	4b38      	ldr	r3, [pc, #224]	; (8007494 <xTaskIncrementTick+0x154>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <xTaskIncrementTick+0x80>
 80073bc:	2301      	movs	r3, #1
 80073be:	e000      	b.n	80073c2 <xTaskIncrementTick+0x82>
 80073c0:	2300      	movs	r3, #0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <xTaskIncrementTick+0x160>)
 80073c8:	f04f 32ff 	mov.w	r2, #4294967295
 80073cc:	601a      	str	r2, [r3, #0]
					break;
 80073ce:	e03e      	b.n	800744e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073d0:	4b30      	ldr	r3, [pc, #192]	; (8007494 <xTaskIncrementTick+0x154>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d203      	bcs.n	80073f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <xTaskIncrementTick+0x160>)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6013      	str	r3, [r2, #0]
						break;
 80073ee:	e02e      	b.n	800744e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe ff88 	bl	800630a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3318      	adds	r3, #24
 8007406:	4618      	mov	r0, r3
 8007408:	f7fe ff7f 	bl	800630a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <xTaskIncrementTick+0x164>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4313      	orrs	r3, r2
 800741a:	4a22      	ldr	r2, [pc, #136]	; (80074a4 <xTaskIncrementTick+0x164>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <xTaskIncrementTick+0x168>)
 800742c:	441a      	add	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe ff0b 	bl	8006250 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <xTaskIncrementTick+0x16c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	429a      	cmp	r2, r3
 8007446:	d3b4      	bcc.n	80073b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800744c:	e7b1      	b.n	80073b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800744e:	4b17      	ldr	r3, [pc, #92]	; (80074ac <xTaskIncrementTick+0x16c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4914      	ldr	r1, [pc, #80]	; (80074a8 <xTaskIncrementTick+0x168>)
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d907      	bls.n	8007476 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e004      	b.n	8007476 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800746c:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <xTaskIncrementTick+0x170>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <xTaskIncrementTick+0x170>)
 8007474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <xTaskIncrementTick+0x174>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000698 	.word	0x20000698
 8007490:	20000674 	.word	0x20000674
 8007494:	20000628 	.word	0x20000628
 8007498:	2000062c 	.word	0x2000062c
 800749c:	20000688 	.word	0x20000688
 80074a0:	20000690 	.word	0x20000690
 80074a4:	20000678 	.word	0x20000678
 80074a8:	20000574 	.word	0x20000574
 80074ac:	20000570 	.word	0x20000570
 80074b0:	20000680 	.word	0x20000680
 80074b4:	20000684 	.word	0x20000684

080074b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074be:	4b26      	ldr	r3, [pc, #152]	; (8007558 <vTaskSwitchContext+0xa0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074c6:	4b25      	ldr	r3, [pc, #148]	; (800755c <vTaskSwitchContext+0xa4>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074cc:	e03e      	b.n	800754c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <vTaskSwitchContext+0xa4>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80074d4:	4b22      	ldr	r3, [pc, #136]	; (8007560 <vTaskSwitchContext+0xa8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	fab3 f383 	clz	r3, r3
 80074e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	f1c3 031f 	rsb	r3, r3, #31
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	491e      	ldr	r1, [pc, #120]	; (8007564 <vTaskSwitchContext+0xac>)
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <vTaskSwitchContext+0x5a>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	607b      	str	r3, [r7, #4]
 8007510:	e7fe      	b.n	8007510 <vTaskSwitchContext+0x58>
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a11      	ldr	r2, [pc, #68]	; (8007564 <vTaskSwitchContext+0xac>)
 800751e:	4413      	add	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3308      	adds	r3, #8
 8007534:	429a      	cmp	r2, r3
 8007536:	d104      	bne.n	8007542 <vTaskSwitchContext+0x8a>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a07      	ldr	r2, [pc, #28]	; (8007568 <vTaskSwitchContext+0xb0>)
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20000698 	.word	0x20000698
 800755c:	20000684 	.word	0x20000684
 8007560:	20000678 	.word	0x20000678
 8007564:	20000574 	.word	0x20000574
 8007568:	20000570 	.word	0x20000570

0800756c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <vTaskPlaceOnEventList+0x24>
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e7fe      	b.n	800758e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vTaskPlaceOnEventList+0x44>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3318      	adds	r3, #24
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fe fe7d 	bl	8006298 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800759e:	2101      	movs	r1, #1
 80075a0:	6838      	ldr	r0, [r7, #0]
 80075a2:	f000 fa65 	bl	8007a70 <prvAddCurrentTaskToDelayedList>
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000570 	.word	0x20000570

080075b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <xTaskRemoveFromEventList+0x2a>
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	e7fe      	b.n	80075dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3318      	adds	r3, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fe91 	bl	800630a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <xTaskRemoveFromEventList+0xac>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11c      	bne.n	800762a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fe88 	bl	800630a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	2201      	movs	r2, #1
 8007600:	409a      	lsls	r2, r3
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <xTaskRemoveFromEventList+0xb0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4313      	orrs	r3, r2
 8007608:	4a16      	ldr	r2, [pc, #88]	; (8007664 <xTaskRemoveFromEventList+0xb0>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a13      	ldr	r2, [pc, #76]	; (8007668 <xTaskRemoveFromEventList+0xb4>)
 800761a:	441a      	add	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fe fe14 	bl	8006250 <vListInsertEnd>
 8007628:	e005      	b.n	8007636 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3318      	adds	r3, #24
 800762e:	4619      	mov	r1, r3
 8007630:	480e      	ldr	r0, [pc, #56]	; (800766c <xTaskRemoveFromEventList+0xb8>)
 8007632:	f7fe fe0d 	bl	8006250 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <xTaskRemoveFromEventList+0xbc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	429a      	cmp	r2, r3
 8007642:	d905      	bls.n	8007650 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <xTaskRemoveFromEventList+0xc0>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e001      	b.n	8007654 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007654:	697b      	ldr	r3, [r7, #20]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000698 	.word	0x20000698
 8007664:	20000678 	.word	0x20000678
 8007668:	20000574 	.word	0x20000574
 800766c:	20000630 	.word	0x20000630
 8007670:	20000570 	.word	0x20000570
 8007674:	20000684 	.word	0x20000684

08007678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007680:	4b06      	ldr	r3, [pc, #24]	; (800769c <vTaskInternalSetTimeOutState+0x24>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <vTaskInternalSetTimeOutState+0x28>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	605a      	str	r2, [r3, #4]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20000688 	.word	0x20000688
 80076a0:	20000674 	.word	0x20000674

080076a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <xTaskCheckForTimeOut+0x24>
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e7fe      	b.n	80076c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <xTaskCheckForTimeOut+0x3e>
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e7fe      	b.n	80076e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80076e2:	f000 fb53 	bl	8007d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076e6:	4b1d      	ldr	r3, [pc, #116]	; (800775c <xTaskCheckForTimeOut+0xb8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d102      	bne.n	8007706 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e023      	b.n	800774e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b15      	ldr	r3, [pc, #84]	; (8007760 <xTaskCheckForTimeOut+0xbc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d007      	beq.n	8007722 <xTaskCheckForTimeOut+0x7e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	429a      	cmp	r2, r3
 800771a:	d302      	bcc.n	8007722 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	61fb      	str	r3, [r7, #28]
 8007720:	e015      	b.n	800774e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	429a      	cmp	r2, r3
 800772a:	d20b      	bcs.n	8007744 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	1ad2      	subs	r2, r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff ff9d 	bl	8007678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
 8007742:	e004      	b.n	800774e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800774a:	2301      	movs	r3, #1
 800774c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800774e:	f000 fb4b 	bl	8007de8 <vPortExitCritical>

	return xReturn;
 8007752:	69fb      	ldr	r3, [r7, #28]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000674 	.word	0x20000674
 8007760:	20000688 	.word	0x20000688

08007764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <vTaskMissedYield+0x14>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	20000684 	.word	0x20000684

0800777c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007784:	f000 f852 	bl	800782c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <prvIdleTask+0x28>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d9f9      	bls.n	8007784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <prvIdleTask+0x2c>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077a0:	e7f0      	b.n	8007784 <prvIdleTask+0x8>
 80077a2:	bf00      	nop
 80077a4:	20000574 	.word	0x20000574
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	e00c      	b.n	80077d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a12      	ldr	r2, [pc, #72]	; (800780c <prvInitialiseTaskLists+0x60>)
 80077c4:	4413      	add	r3, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fd15 	bl	80061f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3301      	adds	r3, #1
 80077d0:	607b      	str	r3, [r7, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b06      	cmp	r3, #6
 80077d6:	d9ef      	bls.n	80077b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077d8:	480d      	ldr	r0, [pc, #52]	; (8007810 <prvInitialiseTaskLists+0x64>)
 80077da:	f7fe fd0c 	bl	80061f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077de:	480d      	ldr	r0, [pc, #52]	; (8007814 <prvInitialiseTaskLists+0x68>)
 80077e0:	f7fe fd09 	bl	80061f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077e4:	480c      	ldr	r0, [pc, #48]	; (8007818 <prvInitialiseTaskLists+0x6c>)
 80077e6:	f7fe fd06 	bl	80061f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077ea:	480c      	ldr	r0, [pc, #48]	; (800781c <prvInitialiseTaskLists+0x70>)
 80077ec:	f7fe fd03 	bl	80061f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077f0:	480b      	ldr	r0, [pc, #44]	; (8007820 <prvInitialiseTaskLists+0x74>)
 80077f2:	f7fe fd00 	bl	80061f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077f6:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <prvInitialiseTaskLists+0x78>)
 80077f8:	4a05      	ldr	r2, [pc, #20]	; (8007810 <prvInitialiseTaskLists+0x64>)
 80077fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <prvInitialiseTaskLists+0x7c>)
 80077fe:	4a05      	ldr	r2, [pc, #20]	; (8007814 <prvInitialiseTaskLists+0x68>)
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000574 	.word	0x20000574
 8007810:	20000600 	.word	0x20000600
 8007814:	20000614 	.word	0x20000614
 8007818:	20000630 	.word	0x20000630
 800781c:	20000644 	.word	0x20000644
 8007820:	2000065c 	.word	0x2000065c
 8007824:	20000628 	.word	0x20000628
 8007828:	2000062c 	.word	0x2000062c

0800782c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007832:	e019      	b.n	8007868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007834:	f000 faaa 	bl	8007d8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007838:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <prvCheckTasksWaitingTermination+0x4c>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fd60 	bl	800630a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <prvCheckTasksWaitingTermination+0x50>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3b01      	subs	r3, #1
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <prvCheckTasksWaitingTermination+0x50>)
 8007852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvCheckTasksWaitingTermination+0x54>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3b01      	subs	r3, #1
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <prvCheckTasksWaitingTermination+0x54>)
 800785c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800785e:	f000 fac3 	bl	8007de8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f80e 	bl	8007884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <prvCheckTasksWaitingTermination+0x54>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e1      	bne.n	8007834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000644 	.word	0x20000644
 800787c:	20000670 	.word	0x20000670
 8007880:	20000658 	.word	0x20000658

08007884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007892:	2b00      	cmp	r3, #0
 8007894:	d108      	bne.n	80078a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fc56 	bl	800814c <vPortFree>
				vPortFree( pxTCB );
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc53 	bl	800814c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078a6:	e017      	b.n	80078d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d103      	bne.n	80078ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc4a 	bl	800814c <vPortFree>
	}
 80078b8:	e00e      	b.n	80078d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d009      	beq.n	80078d8 <prvDeleteTCB+0x54>
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e7fe      	b.n	80078d6 <prvDeleteTCB+0x52>
	}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <prvResetNextTaskUnblockTime+0x44>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <prvResetNextTaskUnblockTime+0x14>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <prvResetNextTaskUnblockTime+0x16>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <prvResetNextTaskUnblockTime+0x48>)
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007900:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007902:	e008      	b.n	8007916 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <prvResetNextTaskUnblockTime+0x44>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a05      	ldr	r2, [pc, #20]	; (8007928 <prvResetNextTaskUnblockTime+0x48>)
 8007914:	6013      	str	r3, [r2, #0]
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000628 	.word	0x20000628
 8007928:	20000690 	.word	0x20000690

0800792c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <xTaskGetSchedulerState+0x34>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800793a:	2301      	movs	r3, #1
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	e008      	b.n	8007952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <xTaskGetSchedulerState+0x38>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007948:	2302      	movs	r3, #2
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	e001      	b.n	8007952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800794e:	2300      	movs	r3, #0
 8007950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007952:	687b      	ldr	r3, [r7, #4]
	}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	2000067c 	.word	0x2000067c
 8007964:	20000698 	.word	0x20000698

08007968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d06c      	beq.n	8007a58 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <xTaskPriorityDisinherit+0xfc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	429a      	cmp	r2, r3
 8007986:	d009      	beq.n	800799c <xTaskPriorityDisinherit+0x34>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	e7fe      	b.n	800799a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <xTaskPriorityDisinherit+0x50>
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	e7fe      	b.n	80079b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079bc:	1e5a      	subs	r2, r3, #1
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d044      	beq.n	8007a58 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d140      	bne.n	8007a58 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3304      	adds	r3, #4
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fc95 	bl	800630a <uxListRemove>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d115      	bne.n	8007a12 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	491f      	ldr	r1, [pc, #124]	; (8007a68 <xTaskPriorityDisinherit+0x100>)
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xTaskPriorityDisinherit+0xaa>
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	2201      	movs	r2, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43da      	mvns	r2, r3
 8007a08:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <xTaskPriorityDisinherit+0x104>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <xTaskPriorityDisinherit+0x104>)
 8007a10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	f1c3 0207 	rsb	r2, r3, #7
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	409a      	lsls	r2, r3
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <xTaskPriorityDisinherit+0x104>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	4a0d      	ldr	r2, [pc, #52]	; (8007a6c <xTaskPriorityDisinherit+0x104>)
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <xTaskPriorityDisinherit+0x100>)
 8007a46:	441a      	add	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7fe fbfe 	bl	8006250 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a54:	2301      	movs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a58:	697b      	ldr	r3, [r7, #20]
	}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000570 	.word	0x20000570
 8007a68:	20000574 	.word	0x20000574
 8007a6c:	20000678 	.word	0x20000678

08007a70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a7a:	4b29      	ldr	r3, [pc, #164]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fc3f 	bl	800630a <uxListRemove>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a92:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	2201      	movs	r2, #1
 8007a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9e:	43da      	mvns	r2, r3
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	4a20      	ldr	r2, [pc, #128]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007aa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d10a      	bne.n	8007ac8 <prvAddCurrentTaskToDelayedList+0x58>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	481a      	ldr	r0, [pc, #104]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ac2:	f7fe fbc5 	bl	8006250 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ac6:	e026      	b.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad0:	4b14      	ldr	r3, [pc, #80]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d209      	bcs.n	8007af4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae0:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe fbd3 	bl	8006298 <vListInsert>
}
 8007af2:	e010      	b.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f7fe fbc9 	bl	8006298 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d202      	bcs.n	8007b16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b10:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6013      	str	r3, [r2, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000674 	.word	0x20000674
 8007b24:	20000570 	.word	0x20000570
 8007b28:	20000678 	.word	0x20000678
 8007b2c:	2000065c 	.word	0x2000065c
 8007b30:	2000062c 	.word	0x2000062c
 8007b34:	20000628 	.word	0x20000628
 8007b38:	20000690 	.word	0x20000690

08007b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ba0 <pxPortInitialiseStack+0x64>)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b14      	subs	r3, #20
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b04      	subs	r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f06f 0202 	mvn.w	r2, #2
 8007b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b20      	subs	r3, #32
 8007b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	08007ba5 	.word	0x08007ba5

08007ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <prvTaskExitError+0x50>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d009      	beq.n	8007bcc <prvTaskExitError+0x28>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e7fe      	b.n	8007bca <prvTaskExitError+0x26>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bde:	bf00      	nop
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0fc      	beq.n	8007be0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000018 	.word	0x20000018
	...

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	; (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c56:	4b44      	ldr	r3, [pc, #272]	; (8007d68 <xPortStartScheduler+0x118>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a44      	ldr	r2, [pc, #272]	; (8007d6c <xPortStartScheduler+0x11c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d109      	bne.n	8007c74 <xPortStartScheduler+0x24>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e7fe      	b.n	8007c72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c74:	4b3c      	ldr	r3, [pc, #240]	; (8007d68 <xPortStartScheduler+0x118>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a3d      	ldr	r2, [pc, #244]	; (8007d70 <xPortStartScheduler+0x120>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d109      	bne.n	8007c92 <xPortStartScheduler+0x42>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e7fe      	b.n	8007c90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c92:	4b38      	ldr	r3, [pc, #224]	; (8007d74 <xPortStartScheduler+0x124>)
 8007c94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <xPortStartScheduler+0x128>)
 8007cb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cba:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc0:	e009      	b.n	8007cd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a2c      	ldr	r2, [pc, #176]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007cca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d0ef      	beq.n	8007cc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1c3 0307 	rsb	r3, r3, #7
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d009      	beq.n	8007d02 <xPortStartScheduler+0xb2>
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60bb      	str	r3, [r7, #8]
 8007d00:	e7fe      	b.n	8007d00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d02:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	4a1c      	ldr	r2, [pc, #112]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d14:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <xPortStartScheduler+0x12c>)
 8007d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d20:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d2c:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a13      	ldr	r2, [pc, #76]	; (8007d80 <xPortStartScheduler+0x130>)
 8007d32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d38:	f000 f8d6 	bl	8007ee8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <xPortStartScheduler+0x134>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d42:	f000 f8f5 	bl	8007f30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d46:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a0f      	ldr	r2, [pc, #60]	; (8007d88 <xPortStartScheduler+0x138>)
 8007d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d52:	f7ff ff69 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d56:	f7ff fbaf 	bl	80074b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d5a:	f7ff ff23 	bl	8007ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	e000ed00 	.word	0xe000ed00
 8007d6c:	410fc271 	.word	0x410fc271
 8007d70:	410fc270 	.word	0x410fc270
 8007d74:	e000e400 	.word	0xe000e400
 8007d78:	2000069c 	.word	0x2000069c
 8007d7c:	200006a0 	.word	0x200006a0
 8007d80:	e000ed20 	.word	0xe000ed20
 8007d84:	20000018 	.word	0x20000018
 8007d88:	e000ef34 	.word	0xe000ef34

08007d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007da4:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <vPortEnterCritical+0x54>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	4a0d      	ldr	r2, [pc, #52]	; (8007de0 <vPortEnterCritical+0x54>)
 8007dac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <vPortEnterCritical+0x54>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10e      	bne.n	8007dd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <vPortEnterCritical+0x58>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <vPortEnterCritical+0x48>
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	e7fe      	b.n	8007dd2 <vPortEnterCritical+0x46>
	}
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000018 	.word	0x20000018
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <vPortExitCritical+0x4c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <vPortExitCritical+0x22>
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	e7fe      	b.n	8007e08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <vPortExitCritical+0x4c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <vPortExitCritical+0x3e>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000018 	.word	0x20000018
	...

08007e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e40:	f3ef 8009 	mrs	r0, PSP
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <pxCurrentTCBConst>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f01e 0f10 	tst.w	lr, #16
 8007e50:	bf08      	it	eq
 8007e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5a:	6010      	str	r0, [r2, #0]
 8007e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e64:	f380 8811 	msr	BASEPRI, r0
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f7ff fb22 	bl	80074b8 <vTaskSwitchContext>
 8007e74:	f04f 0000 	mov.w	r0, #0
 8007e78:	f380 8811 	msr	BASEPRI, r0
 8007e7c:	bc09      	pop	{r0, r3}
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e86:	f01e 0f10 	tst.w	lr, #16
 8007e8a:	bf08      	it	eq
 8007e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e90:	f380 8809 	msr	PSP, r0
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w

08007ea0 <pxCurrentTCBConst>:
 8007ea0:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop

08007ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec0:	f7ff fa3e 	bl	8007340 <xTaskIncrementTick>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <SysTick_Handler+0x3c>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <vPortSetupTimerInterrupt+0x34>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortSetupTimerInterrupt+0x38>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <vPortSetupTimerInterrupt+0x3c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <vPortSetupTimerInterrupt+0x40>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	099b      	lsrs	r3, r3, #6
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <vPortSetupTimerInterrupt+0x44>)
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0a:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <vPortSetupTimerInterrupt+0x34>)
 8007f0c:	2207      	movs	r2, #7
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	e000e010 	.word	0xe000e010
 8007f20:	e000e018 	.word	0xe000e018
 8007f24:	20000000 	.word	0x20000000
 8007f28:	10624dd3 	.word	0x10624dd3
 8007f2c:	e000e014 	.word	0xe000e014

08007f30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f40 <vPortEnableVFP+0x10>
 8007f34:	6801      	ldr	r1, [r0, #0]
 8007f36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f3a:	6001      	str	r1, [r0, #0]
 8007f3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f3e:	bf00      	nop
 8007f40:	e000ed88 	.word	0xe000ed88

08007f44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f4a:	f3ef 8305 	mrs	r3, IPSR
 8007f4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d913      	bls.n	8007f7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <vPortValidateInterruptPriority+0x6c>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f60:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <vPortValidateInterruptPriority+0x70>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	7afa      	ldrb	r2, [r7, #11]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d209      	bcs.n	8007f7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	607b      	str	r3, [r7, #4]
 8007f7c:	e7fe      	b.n	8007f7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f7e:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <vPortValidateInterruptPriority+0x74>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <vPortValidateInterruptPriority+0x78>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d909      	bls.n	8007fa2 <vPortValidateInterruptPriority+0x5e>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	e7fe      	b.n	8007fa0 <vPortValidateInterruptPriority+0x5c>
	}
 8007fa2:	bf00      	nop
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	e000e3f0 	.word	0xe000e3f0
 8007fb4:	2000069c 	.word	0x2000069c
 8007fb8:	e000ed0c 	.word	0xe000ed0c
 8007fbc:	200006a0 	.word	0x200006a0

08007fc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	; 0x28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fcc:	f7ff f90e 	bl	80071ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fd0:	4b59      	ldr	r3, [pc, #356]	; (8008138 <pvPortMalloc+0x178>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fd8:	f000 f910 	bl	80081fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fdc:	4b57      	ldr	r3, [pc, #348]	; (800813c <pvPortMalloc+0x17c>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f040 808c 	bne.w	8008102 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01c      	beq.n	800802a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d013      	beq.n	800802a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f023 0307 	bic.w	r3, r3, #7
 8008008:	3308      	adds	r3, #8
 800800a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b00      	cmp	r3, #0
 8008014:	d009      	beq.n	800802a <pvPortMalloc+0x6a>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	e7fe      	b.n	8008028 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d068      	beq.n	8008102 <pvPortMalloc+0x142>
 8008030:	4b43      	ldr	r3, [pc, #268]	; (8008140 <pvPortMalloc+0x180>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d863      	bhi.n	8008102 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800803a:	4b42      	ldr	r3, [pc, #264]	; (8008144 <pvPortMalloc+0x184>)
 800803c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800803e:	4b41      	ldr	r3, [pc, #260]	; (8008144 <pvPortMalloc+0x184>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008044:	e004      	b.n	8008050 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	429a      	cmp	r2, r3
 8008058:	d903      	bls.n	8008062 <pvPortMalloc+0xa2>
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f1      	bne.n	8008046 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008062:	4b35      	ldr	r3, [pc, #212]	; (8008138 <pvPortMalloc+0x178>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	429a      	cmp	r2, r3
 800806a:	d04a      	beq.n	8008102 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2208      	movs	r2, #8
 8008072:	4413      	add	r3, r2
 8008074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	1ad2      	subs	r2, r2, r3
 8008086:	2308      	movs	r3, #8
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	429a      	cmp	r2, r3
 800808c:	d91e      	bls.n	80080cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800808e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4413      	add	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <pvPortMalloc+0xf4>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e7fe      	b.n	80080b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080c6:	69b8      	ldr	r0, [r7, #24]
 80080c8:	f000 f8fa 	bl	80082c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080cc:	4b1c      	ldr	r3, [pc, #112]	; (8008140 <pvPortMalloc+0x180>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <pvPortMalloc+0x180>)
 80080d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080da:	4b19      	ldr	r3, [pc, #100]	; (8008140 <pvPortMalloc+0x180>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <pvPortMalloc+0x188>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d203      	bcs.n	80080ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <pvPortMalloc+0x180>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <pvPortMalloc+0x188>)
 80080ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <pvPortMalloc+0x17c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008102:	f7ff f881 	bl	8007208 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800810c:	f7f8 feec 	bl	8000ee8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <pvPortMalloc+0x16e>
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e7fe      	b.n	800812c <pvPortMalloc+0x16c>
	return pvReturn;
 800812e:	69fb      	ldr	r3, [r7, #28]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3728      	adds	r7, #40	; 0x28
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200042ac 	.word	0x200042ac
 800813c:	200042b8 	.word	0x200042b8
 8008140:	200042b0 	.word	0x200042b0
 8008144:	200042a4 	.word	0x200042a4
 8008148:	200042b4 	.word	0x200042b4

0800814c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d046      	beq.n	80081ec <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800815e:	2308      	movs	r3, #8
 8008160:	425b      	negs	r3, r3
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4413      	add	r3, r2
 8008166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	4b20      	ldr	r3, [pc, #128]	; (80081f4 <vPortFree+0xa8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4013      	ands	r3, r2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <vPortFree+0x42>
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e7fe      	b.n	800818c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <vPortFree+0x5e>
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	e7fe      	b.n	80081a8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <vPortFree+0xa8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4013      	ands	r3, r2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d019      	beq.n	80081ec <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d115      	bne.n	80081ec <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <vPortFree+0xa8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	401a      	ands	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081d0:	f7ff f80c 	bl	80071ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <vPortFree+0xac>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4413      	add	r3, r2
 80081de:	4a06      	ldr	r2, [pc, #24]	; (80081f8 <vPortFree+0xac>)
 80081e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081e2:	6938      	ldr	r0, [r7, #16]
 80081e4:	f000 f86c 	bl	80082c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081e8:	f7ff f80e 	bl	8007208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ec:	bf00      	nop
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200042b8 	.word	0x200042b8
 80081f8:	200042b0 	.word	0x200042b0

080081fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008202:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008206:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008208:	4b27      	ldr	r3, [pc, #156]	; (80082a8 <prvHeapInit+0xac>)
 800820a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00c      	beq.n	8008230 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3307      	adds	r3, #7
 800821a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f023 0307 	bic.w	r3, r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <prvHeapInit+0xac>)
 800822c:	4413      	add	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008234:	4a1d      	ldr	r2, [pc, #116]	; (80082ac <prvHeapInit+0xb0>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800823a:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <prvHeapInit+0xb0>)
 800823c:	2200      	movs	r2, #0
 800823e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4413      	add	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008248:	2208      	movs	r2, #8
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <prvHeapInit+0xb4>)
 800825c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800825e:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <prvHeapInit+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008266:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <prvHeapInit+0xb4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <prvHeapInit+0xb4>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <prvHeapInit+0xb8>)
 800828a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <prvHeapInit+0xbc>)
 8008292:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <prvHeapInit+0xc0>)
 8008296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800829a:	601a      	str	r2, [r3, #0]
}
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	200006a4 	.word	0x200006a4
 80082ac:	200042a4 	.word	0x200042a4
 80082b0:	200042ac 	.word	0x200042ac
 80082b4:	200042b4 	.word	0x200042b4
 80082b8:	200042b0 	.word	0x200042b0
 80082bc:	200042b8 	.word	0x200042b8

080082c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082c8:	4b28      	ldr	r3, [pc, #160]	; (800836c <prvInsertBlockIntoFreeList+0xac>)
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	e002      	b.n	80082d4 <prvInsertBlockIntoFreeList+0x14>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d8f7      	bhi.n	80082ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d108      	bne.n	8008302 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	441a      	add	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	441a      	add	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d118      	bne.n	8008348 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <prvInsertBlockIntoFreeList+0xb0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d00d      	beq.n	800833e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e008      	b.n	8008350 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <prvInsertBlockIntoFreeList+0xb0>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	e003      	b.n	8008350 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	d002      	beq.n	800835e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835e:	bf00      	nop
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	200042a4 	.word	0x200042a4
 8008370:	200042ac 	.word	0x200042ac

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	; (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	2000001c 	.word	0x2000001c

08008380 <exit>:
 8008380:	b508      	push	{r3, lr}
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <exit+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	b113      	cbz	r3, 800838e <exit+0xe>
 8008388:	2100      	movs	r1, #0
 800838a:	f3af 8000 	nop.w
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <exit+0x24>)
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008394:	b103      	cbz	r3, 8008398 <exit+0x18>
 8008396:	4798      	blx	r3
 8008398:	4620      	mov	r0, r4
 800839a:	f7f9 f90b 	bl	80015b4 <_exit>
 800839e:	bf00      	nop
 80083a0:	00000000 	.word	0x00000000
 80083a4:	0800ab24 	.word	0x0800ab24

080083a8 <__libc_init_array>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4e0d      	ldr	r6, [pc, #52]	; (80083e0 <__libc_init_array+0x38>)
 80083ac:	4c0d      	ldr	r4, [pc, #52]	; (80083e4 <__libc_init_array+0x3c>)
 80083ae:	1ba4      	subs	r4, r4, r6
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	2500      	movs	r5, #0
 80083b4:	42a5      	cmp	r5, r4
 80083b6:	d109      	bne.n	80083cc <__libc_init_array+0x24>
 80083b8:	4e0b      	ldr	r6, [pc, #44]	; (80083e8 <__libc_init_array+0x40>)
 80083ba:	4c0c      	ldr	r4, [pc, #48]	; (80083ec <__libc_init_array+0x44>)
 80083bc:	f002 f892 	bl	800a4e4 <_init>
 80083c0:	1ba4      	subs	r4, r4, r6
 80083c2:	10a4      	asrs	r4, r4, #2
 80083c4:	2500      	movs	r5, #0
 80083c6:	42a5      	cmp	r5, r4
 80083c8:	d105      	bne.n	80083d6 <__libc_init_array+0x2e>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083d0:	4798      	blx	r3
 80083d2:	3501      	adds	r5, #1
 80083d4:	e7ee      	b.n	80083b4 <__libc_init_array+0xc>
 80083d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083da:	4798      	blx	r3
 80083dc:	3501      	adds	r5, #1
 80083de:	e7f2      	b.n	80083c6 <__libc_init_array+0x1e>
 80083e0:	0800ad90 	.word	0x0800ad90
 80083e4:	0800ad90 	.word	0x0800ad90
 80083e8:	0800ad90 	.word	0x0800ad90
 80083ec:	0800ad94 	.word	0x0800ad94

080083f0 <memcpy>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	1e43      	subs	r3, r0, #1
 80083f4:	440a      	add	r2, r1
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d100      	bne.n	80083fc <memcpy+0xc>
 80083fa:	bd10      	pop	{r4, pc}
 80083fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008404:	e7f7      	b.n	80083f6 <memcpy+0x6>

08008406 <memset>:
 8008406:	4402      	add	r2, r0
 8008408:	4603      	mov	r3, r0
 800840a:	4293      	cmp	r3, r2
 800840c:	d100      	bne.n	8008410 <memset+0xa>
 800840e:	4770      	bx	lr
 8008410:	f803 1b01 	strb.w	r1, [r3], #1
 8008414:	e7f9      	b.n	800840a <memset+0x4>

08008416 <__cvt>:
 8008416:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800841a:	ec55 4b10 	vmov	r4, r5, d0
 800841e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008424:	2d00      	cmp	r5, #0
 8008426:	460e      	mov	r6, r1
 8008428:	4691      	mov	r9, r2
 800842a:	4619      	mov	r1, r3
 800842c:	bfb8      	it	lt
 800842e:	4622      	movlt	r2, r4
 8008430:	462b      	mov	r3, r5
 8008432:	f027 0720 	bic.w	r7, r7, #32
 8008436:	bfbb      	ittet	lt
 8008438:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800843c:	461d      	movlt	r5, r3
 800843e:	2300      	movge	r3, #0
 8008440:	232d      	movlt	r3, #45	; 0x2d
 8008442:	bfb8      	it	lt
 8008444:	4614      	movlt	r4, r2
 8008446:	2f46      	cmp	r7, #70	; 0x46
 8008448:	700b      	strb	r3, [r1, #0]
 800844a:	d004      	beq.n	8008456 <__cvt+0x40>
 800844c:	2f45      	cmp	r7, #69	; 0x45
 800844e:	d100      	bne.n	8008452 <__cvt+0x3c>
 8008450:	3601      	adds	r6, #1
 8008452:	2102      	movs	r1, #2
 8008454:	e000      	b.n	8008458 <__cvt+0x42>
 8008456:	2103      	movs	r1, #3
 8008458:	ab03      	add	r3, sp, #12
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	ab02      	add	r3, sp, #8
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	4632      	mov	r2, r6
 8008462:	4653      	mov	r3, sl
 8008464:	ec45 4b10 	vmov	d0, r4, r5
 8008468:	f000 fd12 	bl	8008e90 <_dtoa_r>
 800846c:	2f47      	cmp	r7, #71	; 0x47
 800846e:	4680      	mov	r8, r0
 8008470:	d102      	bne.n	8008478 <__cvt+0x62>
 8008472:	f019 0f01 	tst.w	r9, #1
 8008476:	d026      	beq.n	80084c6 <__cvt+0xb0>
 8008478:	2f46      	cmp	r7, #70	; 0x46
 800847a:	eb08 0906 	add.w	r9, r8, r6
 800847e:	d111      	bne.n	80084a4 <__cvt+0x8e>
 8008480:	f898 3000 	ldrb.w	r3, [r8]
 8008484:	2b30      	cmp	r3, #48	; 0x30
 8008486:	d10a      	bne.n	800849e <__cvt+0x88>
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f8 fb3a 	bl	8000b08 <__aeabi_dcmpeq>
 8008494:	b918      	cbnz	r0, 800849e <__cvt+0x88>
 8008496:	f1c6 0601 	rsb	r6, r6, #1
 800849a:	f8ca 6000 	str.w	r6, [sl]
 800849e:	f8da 3000 	ldr.w	r3, [sl]
 80084a2:	4499      	add	r9, r3
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f8 fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80084b0:	b938      	cbnz	r0, 80084c2 <__cvt+0xac>
 80084b2:	2230      	movs	r2, #48	; 0x30
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	454b      	cmp	r3, r9
 80084b8:	d205      	bcs.n	80084c6 <__cvt+0xb0>
 80084ba:	1c59      	adds	r1, r3, #1
 80084bc:	9103      	str	r1, [sp, #12]
 80084be:	701a      	strb	r2, [r3, #0]
 80084c0:	e7f8      	b.n	80084b4 <__cvt+0x9e>
 80084c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ca:	eba3 0308 	sub.w	r3, r3, r8
 80084ce:	4640      	mov	r0, r8
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	b004      	add	sp, #16
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084d8 <__exponent>:
 80084d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084da:	2900      	cmp	r1, #0
 80084dc:	4604      	mov	r4, r0
 80084de:	bfba      	itte	lt
 80084e0:	4249      	neglt	r1, r1
 80084e2:	232d      	movlt	r3, #45	; 0x2d
 80084e4:	232b      	movge	r3, #43	; 0x2b
 80084e6:	2909      	cmp	r1, #9
 80084e8:	f804 2b02 	strb.w	r2, [r4], #2
 80084ec:	7043      	strb	r3, [r0, #1]
 80084ee:	dd20      	ble.n	8008532 <__exponent+0x5a>
 80084f0:	f10d 0307 	add.w	r3, sp, #7
 80084f4:	461f      	mov	r7, r3
 80084f6:	260a      	movs	r6, #10
 80084f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80084fc:	fb06 1115 	mls	r1, r6, r5, r1
 8008500:	3130      	adds	r1, #48	; 0x30
 8008502:	2d09      	cmp	r5, #9
 8008504:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008508:	f103 32ff 	add.w	r2, r3, #4294967295
 800850c:	4629      	mov	r1, r5
 800850e:	dc09      	bgt.n	8008524 <__exponent+0x4c>
 8008510:	3130      	adds	r1, #48	; 0x30
 8008512:	3b02      	subs	r3, #2
 8008514:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008518:	42bb      	cmp	r3, r7
 800851a:	4622      	mov	r2, r4
 800851c:	d304      	bcc.n	8008528 <__exponent+0x50>
 800851e:	1a10      	subs	r0, r2, r0
 8008520:	b003      	add	sp, #12
 8008522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008524:	4613      	mov	r3, r2
 8008526:	e7e7      	b.n	80084f8 <__exponent+0x20>
 8008528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852c:	f804 2b01 	strb.w	r2, [r4], #1
 8008530:	e7f2      	b.n	8008518 <__exponent+0x40>
 8008532:	2330      	movs	r3, #48	; 0x30
 8008534:	4419      	add	r1, r3
 8008536:	7083      	strb	r3, [r0, #2]
 8008538:	1d02      	adds	r2, r0, #4
 800853a:	70c1      	strb	r1, [r0, #3]
 800853c:	e7ef      	b.n	800851e <__exponent+0x46>
	...

08008540 <_printf_float>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	b08d      	sub	sp, #52	; 0x34
 8008546:	460c      	mov	r4, r1
 8008548:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800854c:	4616      	mov	r6, r2
 800854e:	461f      	mov	r7, r3
 8008550:	4605      	mov	r5, r0
 8008552:	f001 fa55 	bl	8009a00 <_localeconv_r>
 8008556:	6803      	ldr	r3, [r0, #0]
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	4618      	mov	r0, r3
 800855c:	f7f7 fe58 	bl	8000210 <strlen>
 8008560:	2300      	movs	r3, #0
 8008562:	930a      	str	r3, [sp, #40]	; 0x28
 8008564:	f8d8 3000 	ldr.w	r3, [r8]
 8008568:	9005      	str	r0, [sp, #20]
 800856a:	3307      	adds	r3, #7
 800856c:	f023 0307 	bic.w	r3, r3, #7
 8008570:	f103 0208 	add.w	r2, r3, #8
 8008574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008578:	f8d4 b000 	ldr.w	fp, [r4]
 800857c:	f8c8 2000 	str.w	r2, [r8]
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008588:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800858c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008590:	9307      	str	r3, [sp, #28]
 8008592:	f8cd 8018 	str.w	r8, [sp, #24]
 8008596:	f04f 32ff 	mov.w	r2, #4294967295
 800859a:	4ba7      	ldr	r3, [pc, #668]	; (8008838 <_printf_float+0x2f8>)
 800859c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085a0:	f7f8 fae4 	bl	8000b6c <__aeabi_dcmpun>
 80085a4:	bb70      	cbnz	r0, 8008604 <_printf_float+0xc4>
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	4ba3      	ldr	r3, [pc, #652]	; (8008838 <_printf_float+0x2f8>)
 80085ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085b0:	f7f8 fabe 	bl	8000b30 <__aeabi_dcmple>
 80085b4:	bb30      	cbnz	r0, 8008604 <_printf_float+0xc4>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 faad 	bl	8000b1c <__aeabi_dcmplt>
 80085c2:	b110      	cbz	r0, 80085ca <_printf_float+0x8a>
 80085c4:	232d      	movs	r3, #45	; 0x2d
 80085c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ca:	4a9c      	ldr	r2, [pc, #624]	; (800883c <_printf_float+0x2fc>)
 80085cc:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <_printf_float+0x300>)
 80085ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80085d2:	bf8c      	ite	hi
 80085d4:	4690      	movhi	r8, r2
 80085d6:	4698      	movls	r8, r3
 80085d8:	2303      	movs	r3, #3
 80085da:	f02b 0204 	bic.w	r2, fp, #4
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	f04f 0900 	mov.w	r9, #0
 80085e6:	9700      	str	r7, [sp, #0]
 80085e8:	4633      	mov	r3, r6
 80085ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80085ec:	4621      	mov	r1, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 f9e6 	bl	80089c0 <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	f040 808d 	bne.w	8008714 <_printf_float+0x1d4>
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295
 80085fe:	b00d      	add	sp, #52	; 0x34
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f8 faae 	bl	8000b6c <__aeabi_dcmpun>
 8008610:	b110      	cbz	r0, 8008618 <_printf_float+0xd8>
 8008612:	4a8c      	ldr	r2, [pc, #560]	; (8008844 <_printf_float+0x304>)
 8008614:	4b8c      	ldr	r3, [pc, #560]	; (8008848 <_printf_float+0x308>)
 8008616:	e7da      	b.n	80085ce <_printf_float+0x8e>
 8008618:	6861      	ldr	r1, [r4, #4]
 800861a:	1c4b      	adds	r3, r1, #1
 800861c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008620:	a80a      	add	r0, sp, #40	; 0x28
 8008622:	d13e      	bne.n	80086a2 <_printf_float+0x162>
 8008624:	2306      	movs	r3, #6
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	2300      	movs	r3, #0
 800862a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800862e:	ab09      	add	r3, sp, #36	; 0x24
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	ec49 8b10 	vmov	d0, r8, r9
 8008636:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	f8cd a004 	str.w	sl, [sp, #4]
 8008640:	6861      	ldr	r1, [r4, #4]
 8008642:	4628      	mov	r0, r5
 8008644:	f7ff fee7 	bl	8008416 <__cvt>
 8008648:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800864c:	2b47      	cmp	r3, #71	; 0x47
 800864e:	4680      	mov	r8, r0
 8008650:	d109      	bne.n	8008666 <_printf_float+0x126>
 8008652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008654:	1cd8      	adds	r0, r3, #3
 8008656:	db02      	blt.n	800865e <_printf_float+0x11e>
 8008658:	6862      	ldr	r2, [r4, #4]
 800865a:	4293      	cmp	r3, r2
 800865c:	dd47      	ble.n	80086ee <_printf_float+0x1ae>
 800865e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008662:	fa5f fa8a 	uxtb.w	sl, sl
 8008666:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800866a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866c:	d824      	bhi.n	80086b8 <_printf_float+0x178>
 800866e:	3901      	subs	r1, #1
 8008670:	4652      	mov	r2, sl
 8008672:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008676:	9109      	str	r1, [sp, #36]	; 0x24
 8008678:	f7ff ff2e 	bl	80084d8 <__exponent>
 800867c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867e:	1813      	adds	r3, r2, r0
 8008680:	2a01      	cmp	r2, #1
 8008682:	4681      	mov	r9, r0
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	dc02      	bgt.n	800868e <_printf_float+0x14e>
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	07d1      	lsls	r1, r2, #31
 800868c:	d501      	bpl.n	8008692 <_printf_float+0x152>
 800868e:	3301      	adds	r3, #1
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0a5      	beq.n	80085e6 <_printf_float+0xa6>
 800869a:	232d      	movs	r3, #45	; 0x2d
 800869c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a0:	e7a1      	b.n	80085e6 <_printf_float+0xa6>
 80086a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80086a6:	f000 8177 	beq.w	8008998 <_printf_float+0x458>
 80086aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086ae:	d1bb      	bne.n	8008628 <_printf_float+0xe8>
 80086b0:	2900      	cmp	r1, #0
 80086b2:	d1b9      	bne.n	8008628 <_printf_float+0xe8>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e7b6      	b.n	8008626 <_printf_float+0xe6>
 80086b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80086bc:	d119      	bne.n	80086f2 <_printf_float+0x1b2>
 80086be:	2900      	cmp	r1, #0
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	dd0c      	ble.n	80086de <_printf_float+0x19e>
 80086c4:	6121      	str	r1, [r4, #16]
 80086c6:	b913      	cbnz	r3, 80086ce <_printf_float+0x18e>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	07d2      	lsls	r2, r2, #31
 80086cc:	d502      	bpl.n	80086d4 <_printf_float+0x194>
 80086ce:	3301      	adds	r3, #1
 80086d0:	440b      	add	r3, r1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	e7d9      	b.n	8008692 <_printf_float+0x152>
 80086de:	b913      	cbnz	r3, 80086e6 <_printf_float+0x1a6>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	07d0      	lsls	r0, r2, #31
 80086e4:	d501      	bpl.n	80086ea <_printf_float+0x1aa>
 80086e6:	3302      	adds	r3, #2
 80086e8:	e7f3      	b.n	80086d2 <_printf_float+0x192>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7f1      	b.n	80086d2 <_printf_float+0x192>
 80086ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80086f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80086f6:	4293      	cmp	r3, r2
 80086f8:	db05      	blt.n	8008706 <_printf_float+0x1c6>
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	07d1      	lsls	r1, r2, #31
 8008700:	d5e8      	bpl.n	80086d4 <_printf_float+0x194>
 8008702:	3301      	adds	r3, #1
 8008704:	e7e5      	b.n	80086d2 <_printf_float+0x192>
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfd4      	ite	le
 800870a:	f1c3 0302 	rsble	r3, r3, #2
 800870e:	2301      	movgt	r3, #1
 8008710:	4413      	add	r3, r2
 8008712:	e7de      	b.n	80086d2 <_printf_float+0x192>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	055a      	lsls	r2, r3, #21
 8008718:	d407      	bmi.n	800872a <_printf_float+0x1ea>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	4642      	mov	r2, r8
 800871e:	4631      	mov	r1, r6
 8008720:	4628      	mov	r0, r5
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	d12b      	bne.n	8008780 <_printf_float+0x240>
 8008728:	e767      	b.n	80085fa <_printf_float+0xba>
 800872a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800872e:	f240 80dc 	bls.w	80088ea <_printf_float+0x3aa>
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800873a:	f7f8 f9e5 	bl	8000b08 <__aeabi_dcmpeq>
 800873e:	2800      	cmp	r0, #0
 8008740:	d033      	beq.n	80087aa <_printf_float+0x26a>
 8008742:	2301      	movs	r3, #1
 8008744:	4a41      	ldr	r2, [pc, #260]	; (800884c <_printf_float+0x30c>)
 8008746:	4631      	mov	r1, r6
 8008748:	4628      	mov	r0, r5
 800874a:	47b8      	blx	r7
 800874c:	3001      	adds	r0, #1
 800874e:	f43f af54 	beq.w	80085fa <_printf_float+0xba>
 8008752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008756:	429a      	cmp	r2, r3
 8008758:	db02      	blt.n	8008760 <_printf_float+0x220>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	07d8      	lsls	r0, r3, #31
 800875e:	d50f      	bpl.n	8008780 <_printf_float+0x240>
 8008760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	f43f af45 	beq.w	80085fa <_printf_float+0xba>
 8008770:	f04f 0800 	mov.w	r8, #0
 8008774:	f104 091a 	add.w	r9, r4, #26
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	3b01      	subs	r3, #1
 800877c:	4543      	cmp	r3, r8
 800877e:	dc09      	bgt.n	8008794 <_printf_float+0x254>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	079b      	lsls	r3, r3, #30
 8008784:	f100 8103 	bmi.w	800898e <_printf_float+0x44e>
 8008788:	68e0      	ldr	r0, [r4, #12]
 800878a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878c:	4298      	cmp	r0, r3
 800878e:	bfb8      	it	lt
 8008790:	4618      	movlt	r0, r3
 8008792:	e734      	b.n	80085fe <_printf_float+0xbe>
 8008794:	2301      	movs	r3, #1
 8008796:	464a      	mov	r2, r9
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f af2b 	beq.w	80085fa <_printf_float+0xba>
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	e7e6      	b.n	8008778 <_printf_float+0x238>
 80087aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc2b      	bgt.n	8008808 <_printf_float+0x2c8>
 80087b0:	2301      	movs	r3, #1
 80087b2:	4a26      	ldr	r2, [pc, #152]	; (800884c <_printf_float+0x30c>)
 80087b4:	4631      	mov	r1, r6
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b8      	blx	r7
 80087ba:	3001      	adds	r0, #1
 80087bc:	f43f af1d 	beq.w	80085fa <_printf_float+0xba>
 80087c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c2:	b923      	cbnz	r3, 80087ce <_printf_float+0x28e>
 80087c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x28e>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	d5d8      	bpl.n	8008780 <_printf_float+0x240>
 80087ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b8      	blx	r7
 80087d8:	3001      	adds	r0, #1
 80087da:	f43f af0e 	beq.w	80085fa <_printf_float+0xba>
 80087de:	f04f 0900 	mov.w	r9, #0
 80087e2:	f104 0a1a 	add.w	sl, r4, #26
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	425b      	negs	r3, r3
 80087ea:	454b      	cmp	r3, r9
 80087ec:	dc01      	bgt.n	80087f2 <_printf_float+0x2b2>
 80087ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f0:	e794      	b.n	800871c <_printf_float+0x1dc>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f aefc 	beq.w	80085fa <_printf_float+0xba>
 8008802:	f109 0901 	add.w	r9, r9, #1
 8008806:	e7ee      	b.n	80087e6 <_printf_float+0x2a6>
 8008808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800880a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800880c:	429a      	cmp	r2, r3
 800880e:	bfa8      	it	ge
 8008810:	461a      	movge	r2, r3
 8008812:	2a00      	cmp	r2, #0
 8008814:	4691      	mov	r9, r2
 8008816:	dd07      	ble.n	8008828 <_printf_float+0x2e8>
 8008818:	4613      	mov	r3, r2
 800881a:	4631      	mov	r1, r6
 800881c:	4642      	mov	r2, r8
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f aee9 	beq.w	80085fa <_printf_float+0xba>
 8008828:	f104 031a 	add.w	r3, r4, #26
 800882c:	f04f 0b00 	mov.w	fp, #0
 8008830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	e015      	b.n	8008864 <_printf_float+0x324>
 8008838:	7fefffff 	.word	0x7fefffff
 800883c:	0800ab2c 	.word	0x0800ab2c
 8008840:	0800ab28 	.word	0x0800ab28
 8008844:	0800ab34 	.word	0x0800ab34
 8008848:	0800ab30 	.word	0x0800ab30
 800884c:	0800ab38 	.word	0x0800ab38
 8008850:	2301      	movs	r3, #1
 8008852:	9a06      	ldr	r2, [sp, #24]
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f aecd 	beq.w	80085fa <_printf_float+0xba>
 8008860:	f10b 0b01 	add.w	fp, fp, #1
 8008864:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008868:	ebaa 0309 	sub.w	r3, sl, r9
 800886c:	455b      	cmp	r3, fp
 800886e:	dcef      	bgt.n	8008850 <_printf_float+0x310>
 8008870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008874:	429a      	cmp	r2, r3
 8008876:	44d0      	add	r8, sl
 8008878:	db15      	blt.n	80088a6 <_printf_float+0x366>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	07da      	lsls	r2, r3, #31
 800887e:	d412      	bmi.n	80088a6 <_printf_float+0x366>
 8008880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008884:	eba3 020a 	sub.w	r2, r3, sl
 8008888:	eba3 0a01 	sub.w	sl, r3, r1
 800888c:	4592      	cmp	sl, r2
 800888e:	bfa8      	it	ge
 8008890:	4692      	movge	sl, r2
 8008892:	f1ba 0f00 	cmp.w	sl, #0
 8008896:	dc0e      	bgt.n	80088b6 <_printf_float+0x376>
 8008898:	f04f 0800 	mov.w	r8, #0
 800889c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088a0:	f104 091a 	add.w	r9, r4, #26
 80088a4:	e019      	b.n	80088da <_printf_float+0x39a>
 80088a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1e5      	bne.n	8008880 <_printf_float+0x340>
 80088b4:	e6a1      	b.n	80085fa <_printf_float+0xba>
 80088b6:	4653      	mov	r3, sl
 80088b8:	4642      	mov	r2, r8
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1e9      	bne.n	8008898 <_printf_float+0x358>
 80088c4:	e699      	b.n	80085fa <_printf_float+0xba>
 80088c6:	2301      	movs	r3, #1
 80088c8:	464a      	mov	r2, r9
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f ae92 	beq.w	80085fa <_printf_float+0xba>
 80088d6:	f108 0801 	add.w	r8, r8, #1
 80088da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	eba3 030a 	sub.w	r3, r3, sl
 80088e4:	4543      	cmp	r3, r8
 80088e6:	dcee      	bgt.n	80088c6 <_printf_float+0x386>
 80088e8:	e74a      	b.n	8008780 <_printf_float+0x240>
 80088ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ec:	2a01      	cmp	r2, #1
 80088ee:	dc01      	bgt.n	80088f4 <_printf_float+0x3b4>
 80088f0:	07db      	lsls	r3, r3, #31
 80088f2:	d53a      	bpl.n	800896a <_printf_float+0x42a>
 80088f4:	2301      	movs	r3, #1
 80088f6:	4642      	mov	r2, r8
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f ae7b 	beq.w	80085fa <_printf_float+0xba>
 8008904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f108 0801 	add.w	r8, r8, #1
 8008914:	f43f ae71 	beq.w	80085fa <_printf_float+0xba>
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	2200      	movs	r2, #0
 800891c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008924:	2300      	movs	r3, #0
 8008926:	f7f8 f8ef 	bl	8000b08 <__aeabi_dcmpeq>
 800892a:	b9c8      	cbnz	r0, 8008960 <_printf_float+0x420>
 800892c:	4653      	mov	r3, sl
 800892e:	4642      	mov	r2, r8
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	d10e      	bne.n	8008958 <_printf_float+0x418>
 800893a:	e65e      	b.n	80085fa <_printf_float+0xba>
 800893c:	2301      	movs	r3, #1
 800893e:	4652      	mov	r2, sl
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f ae57 	beq.w	80085fa <_printf_float+0xba>
 800894c:	f108 0801 	add.w	r8, r8, #1
 8008950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008952:	3b01      	subs	r3, #1
 8008954:	4543      	cmp	r3, r8
 8008956:	dcf1      	bgt.n	800893c <_printf_float+0x3fc>
 8008958:	464b      	mov	r3, r9
 800895a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800895e:	e6de      	b.n	800871e <_printf_float+0x1de>
 8008960:	f04f 0800 	mov.w	r8, #0
 8008964:	f104 0a1a 	add.w	sl, r4, #26
 8008968:	e7f2      	b.n	8008950 <_printf_float+0x410>
 800896a:	2301      	movs	r3, #1
 800896c:	e7df      	b.n	800892e <_printf_float+0x3ee>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae3e 	beq.w	80085fa <_printf_float+0xba>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	4543      	cmp	r3, r8
 800898a:	dcf0      	bgt.n	800896e <_printf_float+0x42e>
 800898c:	e6fc      	b.n	8008788 <_printf_float+0x248>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0919 	add.w	r9, r4, #25
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x442>
 8008998:	2900      	cmp	r1, #0
 800899a:	f43f ae8b 	beq.w	80086b4 <_printf_float+0x174>
 800899e:	2300      	movs	r3, #0
 80089a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089a4:	ab09      	add	r3, sp, #36	; 0x24
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	ec49 8b10 	vmov	d0, r8, r9
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	f8cd a004 	str.w	sl, [sp, #4]
 80089b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7ff fd2d 	bl	8008416 <__cvt>
 80089bc:	4680      	mov	r8, r0
 80089be:	e648      	b.n	8008652 <_printf_float+0x112>

080089c0 <_printf_common>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	4691      	mov	r9, r2
 80089c6:	461f      	mov	r7, r3
 80089c8:	688a      	ldr	r2, [r1, #8]
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089d0:	4293      	cmp	r3, r2
 80089d2:	bfb8      	it	lt
 80089d4:	4613      	movlt	r3, r2
 80089d6:	f8c9 3000 	str.w	r3, [r9]
 80089da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089de:	4606      	mov	r6, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	b112      	cbz	r2, 80089ea <_printf_common+0x2a>
 80089e4:	3301      	adds	r3, #1
 80089e6:	f8c9 3000 	str.w	r3, [r9]
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	0699      	lsls	r1, r3, #26
 80089ee:	bf42      	ittt	mi
 80089f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089f4:	3302      	addmi	r3, #2
 80089f6:	f8c9 3000 	strmi.w	r3, [r9]
 80089fa:	6825      	ldr	r5, [r4, #0]
 80089fc:	f015 0506 	ands.w	r5, r5, #6
 8008a00:	d107      	bne.n	8008a12 <_printf_common+0x52>
 8008a02:	f104 0a19 	add.w	sl, r4, #25
 8008a06:	68e3      	ldr	r3, [r4, #12]
 8008a08:	f8d9 2000 	ldr.w	r2, [r9]
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	42ab      	cmp	r3, r5
 8008a10:	dc28      	bgt.n	8008a64 <_printf_common+0xa4>
 8008a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	3300      	adds	r3, #0
 8008a1a:	bf18      	it	ne
 8008a1c:	2301      	movne	r3, #1
 8008a1e:	0692      	lsls	r2, r2, #26
 8008a20:	d42d      	bmi.n	8008a7e <_printf_common+0xbe>
 8008a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a26:	4639      	mov	r1, r7
 8008a28:	4630      	mov	r0, r6
 8008a2a:	47c0      	blx	r8
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d020      	beq.n	8008a72 <_printf_common+0xb2>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	68e5      	ldr	r5, [r4, #12]
 8008a34:	f8d9 2000 	ldr.w	r2, [r9]
 8008a38:	f003 0306 	and.w	r3, r3, #6
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	bf08      	it	eq
 8008a40:	1aad      	subeq	r5, r5, r2
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	6922      	ldr	r2, [r4, #16]
 8008a46:	bf0c      	ite	eq
 8008a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a4c:	2500      	movne	r5, #0
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	bfc4      	itt	gt
 8008a52:	1a9b      	subgt	r3, r3, r2
 8008a54:	18ed      	addgt	r5, r5, r3
 8008a56:	f04f 0900 	mov.w	r9, #0
 8008a5a:	341a      	adds	r4, #26
 8008a5c:	454d      	cmp	r5, r9
 8008a5e:	d11a      	bne.n	8008a96 <_printf_common+0xd6>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e008      	b.n	8008a76 <_printf_common+0xb6>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4652      	mov	r2, sl
 8008a68:	4639      	mov	r1, r7
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d103      	bne.n	8008a7a <_printf_common+0xba>
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7a:	3501      	adds	r5, #1
 8008a7c:	e7c3      	b.n	8008a06 <_printf_common+0x46>
 8008a7e:	18e1      	adds	r1, r4, r3
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	2030      	movs	r0, #48	; 0x30
 8008a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a88:	4422      	add	r2, r4
 8008a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a92:	3302      	adds	r3, #2
 8008a94:	e7c5      	b.n	8008a22 <_printf_common+0x62>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	47c0      	blx	r8
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d0e6      	beq.n	8008a72 <_printf_common+0xb2>
 8008aa4:	f109 0901 	add.w	r9, r9, #1
 8008aa8:	e7d8      	b.n	8008a5c <_printf_common+0x9c>
	...

08008aac <_printf_i>:
 8008aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	7e09      	ldrb	r1, [r1, #24]
 8008ab8:	b085      	sub	sp, #20
 8008aba:	296e      	cmp	r1, #110	; 0x6e
 8008abc:	4617      	mov	r7, r2
 8008abe:	4606      	mov	r6, r0
 8008ac0:	4698      	mov	r8, r3
 8008ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ac4:	f000 80b3 	beq.w	8008c2e <_printf_i+0x182>
 8008ac8:	d822      	bhi.n	8008b10 <_printf_i+0x64>
 8008aca:	2963      	cmp	r1, #99	; 0x63
 8008acc:	d036      	beq.n	8008b3c <_printf_i+0x90>
 8008ace:	d80a      	bhi.n	8008ae6 <_printf_i+0x3a>
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	f000 80b9 	beq.w	8008c48 <_printf_i+0x19c>
 8008ad6:	2958      	cmp	r1, #88	; 0x58
 8008ad8:	f000 8083 	beq.w	8008be2 <_printf_i+0x136>
 8008adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ae4:	e032      	b.n	8008b4c <_printf_i+0xa0>
 8008ae6:	2964      	cmp	r1, #100	; 0x64
 8008ae8:	d001      	beq.n	8008aee <_printf_i+0x42>
 8008aea:	2969      	cmp	r1, #105	; 0x69
 8008aec:	d1f6      	bne.n	8008adc <_printf_i+0x30>
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	6813      	ldr	r3, [r2, #0]
 8008af2:	0605      	lsls	r5, r0, #24
 8008af4:	f103 0104 	add.w	r1, r3, #4
 8008af8:	d52a      	bpl.n	8008b50 <_printf_i+0xa4>
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6011      	str	r1, [r2, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	da03      	bge.n	8008b0a <_printf_i+0x5e>
 8008b02:	222d      	movs	r2, #45	; 0x2d
 8008b04:	425b      	negs	r3, r3
 8008b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b0a:	486f      	ldr	r0, [pc, #444]	; (8008cc8 <_printf_i+0x21c>)
 8008b0c:	220a      	movs	r2, #10
 8008b0e:	e039      	b.n	8008b84 <_printf_i+0xd8>
 8008b10:	2973      	cmp	r1, #115	; 0x73
 8008b12:	f000 809d 	beq.w	8008c50 <_printf_i+0x1a4>
 8008b16:	d808      	bhi.n	8008b2a <_printf_i+0x7e>
 8008b18:	296f      	cmp	r1, #111	; 0x6f
 8008b1a:	d020      	beq.n	8008b5e <_printf_i+0xb2>
 8008b1c:	2970      	cmp	r1, #112	; 0x70
 8008b1e:	d1dd      	bne.n	8008adc <_printf_i+0x30>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f043 0320 	orr.w	r3, r3, #32
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	e003      	b.n	8008b32 <_printf_i+0x86>
 8008b2a:	2975      	cmp	r1, #117	; 0x75
 8008b2c:	d017      	beq.n	8008b5e <_printf_i+0xb2>
 8008b2e:	2978      	cmp	r1, #120	; 0x78
 8008b30:	d1d4      	bne.n	8008adc <_printf_i+0x30>
 8008b32:	2378      	movs	r3, #120	; 0x78
 8008b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b38:	4864      	ldr	r0, [pc, #400]	; (8008ccc <_printf_i+0x220>)
 8008b3a:	e055      	b.n	8008be8 <_printf_i+0x13c>
 8008b3c:	6813      	ldr	r3, [r2, #0]
 8008b3e:	1d19      	adds	r1, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6011      	str	r1, [r2, #0]
 8008b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e08c      	b.n	8008c6a <_printf_i+0x1be>
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6011      	str	r1, [r2, #0]
 8008b54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b58:	bf18      	it	ne
 8008b5a:	b21b      	sxthne	r3, r3
 8008b5c:	e7cf      	b.n	8008afe <_printf_i+0x52>
 8008b5e:	6813      	ldr	r3, [r2, #0]
 8008b60:	6825      	ldr	r5, [r4, #0]
 8008b62:	1d18      	adds	r0, r3, #4
 8008b64:	6010      	str	r0, [r2, #0]
 8008b66:	0628      	lsls	r0, r5, #24
 8008b68:	d501      	bpl.n	8008b6e <_printf_i+0xc2>
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	e002      	b.n	8008b74 <_printf_i+0xc8>
 8008b6e:	0668      	lsls	r0, r5, #25
 8008b70:	d5fb      	bpl.n	8008b6a <_printf_i+0xbe>
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	4854      	ldr	r0, [pc, #336]	; (8008cc8 <_printf_i+0x21c>)
 8008b76:	296f      	cmp	r1, #111	; 0x6f
 8008b78:	bf14      	ite	ne
 8008b7a:	220a      	movne	r2, #10
 8008b7c:	2208      	moveq	r2, #8
 8008b7e:	2100      	movs	r1, #0
 8008b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b84:	6865      	ldr	r5, [r4, #4]
 8008b86:	60a5      	str	r5, [r4, #8]
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	f2c0 8095 	blt.w	8008cb8 <_printf_i+0x20c>
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	f021 0104 	bic.w	r1, r1, #4
 8008b94:	6021      	str	r1, [r4, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d13d      	bne.n	8008c16 <_printf_i+0x16a>
 8008b9a:	2d00      	cmp	r5, #0
 8008b9c:	f040 808e 	bne.w	8008cbc <_printf_i+0x210>
 8008ba0:	4665      	mov	r5, ip
 8008ba2:	2a08      	cmp	r2, #8
 8008ba4:	d10b      	bne.n	8008bbe <_printf_i+0x112>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	07db      	lsls	r3, r3, #31
 8008baa:	d508      	bpl.n	8008bbe <_printf_i+0x112>
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	6862      	ldr	r2, [r4, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bfde      	ittt	le
 8008bb4:	2330      	movle	r3, #48	; 0x30
 8008bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bbe:	ebac 0305 	sub.w	r3, ip, r5
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	f8cd 8000 	str.w	r8, [sp]
 8008bc8:	463b      	mov	r3, r7
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f7ff fef6 	bl	80089c0 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14d      	bne.n	8008c74 <_printf_i+0x1c8>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b005      	add	sp, #20
 8008bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be2:	4839      	ldr	r0, [pc, #228]	; (8008cc8 <_printf_i+0x21c>)
 8008be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008be8:	6813      	ldr	r3, [r2, #0]
 8008bea:	6821      	ldr	r1, [r4, #0]
 8008bec:	1d1d      	adds	r5, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6015      	str	r5, [r2, #0]
 8008bf2:	060a      	lsls	r2, r1, #24
 8008bf4:	d50b      	bpl.n	8008c0e <_printf_i+0x162>
 8008bf6:	07ca      	lsls	r2, r1, #31
 8008bf8:	bf44      	itt	mi
 8008bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8008bfe:	6021      	strmi	r1, [r4, #0]
 8008c00:	b91b      	cbnz	r3, 8008c0a <_printf_i+0x15e>
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	f022 0220 	bic.w	r2, r2, #32
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	2210      	movs	r2, #16
 8008c0c:	e7b7      	b.n	8008b7e <_printf_i+0xd2>
 8008c0e:	064d      	lsls	r5, r1, #25
 8008c10:	bf48      	it	mi
 8008c12:	b29b      	uxthmi	r3, r3
 8008c14:	e7ef      	b.n	8008bf6 <_printf_i+0x14a>
 8008c16:	4665      	mov	r5, ip
 8008c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8008c20:	5cc3      	ldrb	r3, [r0, r3]
 8008c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c26:	460b      	mov	r3, r1
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d1f5      	bne.n	8008c18 <_printf_i+0x16c>
 8008c2c:	e7b9      	b.n	8008ba2 <_printf_i+0xf6>
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	6825      	ldr	r5, [r4, #0]
 8008c32:	6961      	ldr	r1, [r4, #20]
 8008c34:	1d18      	adds	r0, r3, #4
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	0628      	lsls	r0, r5, #24
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	d501      	bpl.n	8008c42 <_printf_i+0x196>
 8008c3e:	6019      	str	r1, [r3, #0]
 8008c40:	e002      	b.n	8008c48 <_printf_i+0x19c>
 8008c42:	066a      	lsls	r2, r5, #25
 8008c44:	d5fb      	bpl.n	8008c3e <_printf_i+0x192>
 8008c46:	8019      	strh	r1, [r3, #0]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	4665      	mov	r5, ip
 8008c4e:	e7b9      	b.n	8008bc4 <_printf_i+0x118>
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	1d19      	adds	r1, r3, #4
 8008c54:	6011      	str	r1, [r2, #0]
 8008c56:	681d      	ldr	r5, [r3, #0]
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f7f7 fadf 	bl	8000220 <memchr>
 8008c62:	b108      	cbz	r0, 8008c68 <_printf_i+0x1bc>
 8008c64:	1b40      	subs	r0, r0, r5
 8008c66:	6060      	str	r0, [r4, #4]
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	6123      	str	r3, [r4, #16]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c72:	e7a7      	b.n	8008bc4 <_printf_i+0x118>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	462a      	mov	r2, r5
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	47c0      	blx	r8
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d0aa      	beq.n	8008bd8 <_printf_i+0x12c>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	079b      	lsls	r3, r3, #30
 8008c86:	d413      	bmi.n	8008cb0 <_printf_i+0x204>
 8008c88:	68e0      	ldr	r0, [r4, #12]
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	4298      	cmp	r0, r3
 8008c8e:	bfb8      	it	lt
 8008c90:	4618      	movlt	r0, r3
 8008c92:	e7a3      	b.n	8008bdc <_printf_i+0x130>
 8008c94:	2301      	movs	r3, #1
 8008c96:	464a      	mov	r2, r9
 8008c98:	4639      	mov	r1, r7
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	47c0      	blx	r8
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d09a      	beq.n	8008bd8 <_printf_i+0x12c>
 8008ca2:	3501      	adds	r5, #1
 8008ca4:	68e3      	ldr	r3, [r4, #12]
 8008ca6:	9a03      	ldr	r2, [sp, #12]
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	42ab      	cmp	r3, r5
 8008cac:	dcf2      	bgt.n	8008c94 <_printf_i+0x1e8>
 8008cae:	e7eb      	b.n	8008c88 <_printf_i+0x1dc>
 8008cb0:	2500      	movs	r5, #0
 8008cb2:	f104 0919 	add.w	r9, r4, #25
 8008cb6:	e7f5      	b.n	8008ca4 <_printf_i+0x1f8>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1ac      	bne.n	8008c16 <_printf_i+0x16a>
 8008cbc:	7803      	ldrb	r3, [r0, #0]
 8008cbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc6:	e76c      	b.n	8008ba2 <_printf_i+0xf6>
 8008cc8:	0800ab3a 	.word	0x0800ab3a
 8008ccc:	0800ab4b 	.word	0x0800ab4b

08008cd0 <sniprintf>:
 8008cd0:	b40c      	push	{r2, r3}
 8008cd2:	b530      	push	{r4, r5, lr}
 8008cd4:	4b17      	ldr	r3, [pc, #92]	; (8008d34 <sniprintf+0x64>)
 8008cd6:	1e0c      	subs	r4, r1, #0
 8008cd8:	b09d      	sub	sp, #116	; 0x74
 8008cda:	681d      	ldr	r5, [r3, #0]
 8008cdc:	da08      	bge.n	8008cf0 <sniprintf+0x20>
 8008cde:	238b      	movs	r3, #139	; 0x8b
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	b01d      	add	sp, #116	; 0x74
 8008ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cec:	b002      	add	sp, #8
 8008cee:	4770      	bx	lr
 8008cf0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008cf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008cf8:	bf14      	ite	ne
 8008cfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cfe:	4623      	moveq	r3, r4
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	9307      	str	r3, [sp, #28]
 8008d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d08:	9002      	str	r0, [sp, #8]
 8008d0a:	9006      	str	r0, [sp, #24]
 8008d0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d12:	ab21      	add	r3, sp, #132	; 0x84
 8008d14:	a902      	add	r1, sp, #8
 8008d16:	4628      	mov	r0, r5
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	f001 fa73 	bl	800a204 <_svfiprintf_r>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	bfbc      	itt	lt
 8008d22:	238b      	movlt	r3, #139	; 0x8b
 8008d24:	602b      	strlt	r3, [r5, #0]
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	d0dd      	beq.n	8008ce6 <sniprintf+0x16>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e7d9      	b.n	8008ce6 <sniprintf+0x16>
 8008d32:	bf00      	nop
 8008d34:	2000001c 	.word	0x2000001c

08008d38 <_vsiprintf_r>:
 8008d38:	b500      	push	{lr}
 8008d3a:	b09b      	sub	sp, #108	; 0x6c
 8008d3c:	9100      	str	r1, [sp, #0]
 8008d3e:	9104      	str	r1, [sp, #16]
 8008d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d44:	9105      	str	r1, [sp, #20]
 8008d46:	9102      	str	r1, [sp, #8]
 8008d48:	4905      	ldr	r1, [pc, #20]	; (8008d60 <_vsiprintf_r+0x28>)
 8008d4a:	9103      	str	r1, [sp, #12]
 8008d4c:	4669      	mov	r1, sp
 8008d4e:	f001 fa59 	bl	800a204 <_svfiprintf_r>
 8008d52:	9b00      	ldr	r3, [sp, #0]
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	b01b      	add	sp, #108	; 0x6c
 8008d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d5e:	bf00      	nop
 8008d60:	ffff0208 	.word	0xffff0208

08008d64 <vsiprintf>:
 8008d64:	4613      	mov	r3, r2
 8008d66:	460a      	mov	r2, r1
 8008d68:	4601      	mov	r1, r0
 8008d6a:	4802      	ldr	r0, [pc, #8]	; (8008d74 <vsiprintf+0x10>)
 8008d6c:	6800      	ldr	r0, [r0, #0]
 8008d6e:	f7ff bfe3 	b.w	8008d38 <_vsiprintf_r>
 8008d72:	bf00      	nop
 8008d74:	2000001c 	.word	0x2000001c

08008d78 <quorem>:
 8008d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	6903      	ldr	r3, [r0, #16]
 8008d7e:	690c      	ldr	r4, [r1, #16]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	4680      	mov	r8, r0
 8008d84:	f2c0 8082 	blt.w	8008e8c <quorem+0x114>
 8008d88:	3c01      	subs	r4, #1
 8008d8a:	f101 0714 	add.w	r7, r1, #20
 8008d8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008d92:	f100 0614 	add.w	r6, r0, #20
 8008d96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008d9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008d9e:	eb06 030c 	add.w	r3, r6, ip
 8008da2:	3501      	adds	r5, #1
 8008da4:	eb07 090c 	add.w	r9, r7, ip
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	fbb0 f5f5 	udiv	r5, r0, r5
 8008dae:	b395      	cbz	r5, 8008e16 <quorem+0x9e>
 8008db0:	f04f 0a00 	mov.w	sl, #0
 8008db4:	4638      	mov	r0, r7
 8008db6:	46b6      	mov	lr, r6
 8008db8:	46d3      	mov	fp, sl
 8008dba:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dbe:	b293      	uxth	r3, r2
 8008dc0:	fb05 a303 	mla	r3, r5, r3, sl
 8008dc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ebab 0303 	sub.w	r3, fp, r3
 8008dce:	0c12      	lsrs	r2, r2, #16
 8008dd0:	f8de b000 	ldr.w	fp, [lr]
 8008dd4:	fb05 a202 	mla	r2, r5, r2, sl
 8008dd8:	fa13 f38b 	uxtah	r3, r3, fp
 8008ddc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008de0:	fa1f fb82 	uxth.w	fp, r2
 8008de4:	f8de 2000 	ldr.w	r2, [lr]
 8008de8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df6:	4581      	cmp	r9, r0
 8008df8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008dfc:	f84e 3b04 	str.w	r3, [lr], #4
 8008e00:	d2db      	bcs.n	8008dba <quorem+0x42>
 8008e02:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e06:	b933      	cbnz	r3, 8008e16 <quorem+0x9e>
 8008e08:	9b01      	ldr	r3, [sp, #4]
 8008e0a:	3b04      	subs	r3, #4
 8008e0c:	429e      	cmp	r6, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	d330      	bcc.n	8008e74 <quorem+0xfc>
 8008e12:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e16:	4640      	mov	r0, r8
 8008e18:	f001 f81e 	bl	8009e58 <__mcmp>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	db25      	blt.n	8008e6c <quorem+0xf4>
 8008e20:	3501      	adds	r5, #1
 8008e22:	4630      	mov	r0, r6
 8008e24:	f04f 0c00 	mov.w	ip, #0
 8008e28:	f857 2b04 	ldr.w	r2, [r7], #4
 8008e2c:	f8d0 e000 	ldr.w	lr, [r0]
 8008e30:	b293      	uxth	r3, r2
 8008e32:	ebac 0303 	sub.w	r3, ip, r3
 8008e36:	0c12      	lsrs	r2, r2, #16
 8008e38:	fa13 f38e 	uxtah	r3, r3, lr
 8008e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e4a:	45b9      	cmp	r9, r7
 8008e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e50:	f840 3b04 	str.w	r3, [r0], #4
 8008e54:	d2e8      	bcs.n	8008e28 <quorem+0xb0>
 8008e56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008e5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008e5e:	b92a      	cbnz	r2, 8008e6c <quorem+0xf4>
 8008e60:	3b04      	subs	r3, #4
 8008e62:	429e      	cmp	r6, r3
 8008e64:	461a      	mov	r2, r3
 8008e66:	d30b      	bcc.n	8008e80 <quorem+0x108>
 8008e68:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	b003      	add	sp, #12
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	3b04      	subs	r3, #4
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d1ca      	bne.n	8008e12 <quorem+0x9a>
 8008e7c:	3c01      	subs	r4, #1
 8008e7e:	e7c5      	b.n	8008e0c <quorem+0x94>
 8008e80:	6812      	ldr	r2, [r2, #0]
 8008e82:	3b04      	subs	r3, #4
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	d1ef      	bne.n	8008e68 <quorem+0xf0>
 8008e88:	3c01      	subs	r4, #1
 8008e8a:	e7ea      	b.n	8008e62 <quorem+0xea>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7ee      	b.n	8008e6e <quorem+0xf6>

08008e90 <_dtoa_r>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	ec57 6b10 	vmov	r6, r7, d0
 8008e98:	b097      	sub	sp, #92	; 0x5c
 8008e9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e9c:	9106      	str	r1, [sp, #24]
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ea4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ea8:	e9cd 6700 	strd	r6, r7, [sp]
 8008eac:	b93d      	cbnz	r5, 8008ebe <_dtoa_r+0x2e>
 8008eae:	2010      	movs	r0, #16
 8008eb0:	f000 fdb4 	bl	8009a1c <malloc>
 8008eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8008eb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008eba:	6005      	str	r5, [r0, #0]
 8008ebc:	60c5      	str	r5, [r0, #12]
 8008ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	b151      	cbz	r1, 8008eda <_dtoa_r+0x4a>
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	604a      	str	r2, [r1, #4]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4093      	lsls	r3, r2
 8008ecc:	608b      	str	r3, [r1, #8]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fde0 	bl	8009a94 <_Bfree>
 8008ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	1e3b      	subs	r3, r7, #0
 8008edc:	bfbb      	ittet	lt
 8008ede:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ee2:	9301      	strlt	r3, [sp, #4]
 8008ee4:	2300      	movge	r3, #0
 8008ee6:	2201      	movlt	r2, #1
 8008ee8:	bfac      	ite	ge
 8008eea:	f8c8 3000 	strge.w	r3, [r8]
 8008eee:	f8c8 2000 	strlt.w	r2, [r8]
 8008ef2:	4baf      	ldr	r3, [pc, #700]	; (80091b0 <_dtoa_r+0x320>)
 8008ef4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ef8:	ea33 0308 	bics.w	r3, r3, r8
 8008efc:	d114      	bne.n	8008f28 <_dtoa_r+0x98>
 8008efe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f00:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	9b00      	ldr	r3, [sp, #0]
 8008f08:	b923      	cbnz	r3, 8008f14 <_dtoa_r+0x84>
 8008f0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	f000 8542 	beq.w	8009998 <_dtoa_r+0xb08>
 8008f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80091c4 <_dtoa_r+0x334>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 8544 	beq.w	80099a8 <_dtoa_r+0xb18>
 8008f20:	f10b 0303 	add.w	r3, fp, #3
 8008f24:	f000 bd3e 	b.w	80099a4 <_dtoa_r+0xb14>
 8008f28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 8008f38:	4681      	mov	r9, r0
 8008f3a:	b168      	cbz	r0, 8008f58 <_dtoa_r+0xc8>
 8008f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f3e:	2301      	movs	r3, #1
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8524 	beq.w	8009992 <_dtoa_r+0xb02>
 8008f4a:	4b9a      	ldr	r3, [pc, #616]	; (80091b4 <_dtoa_r+0x324>)
 8008f4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	f000 bd28 	b.w	80099a8 <_dtoa_r+0xb18>
 8008f58:	aa14      	add	r2, sp, #80	; 0x50
 8008f5a:	a915      	add	r1, sp, #84	; 0x54
 8008f5c:	ec47 6b10 	vmov	d0, r6, r7
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fff0 	bl	8009f46 <__d2b>
 8008f66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008f6a:	9004      	str	r0, [sp, #16]
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	d07c      	beq.n	800906a <_dtoa_r+0x1da>
 8008f70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008f78:	46b2      	mov	sl, r6
 8008f7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008f7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008f86:	2200      	movs	r2, #0
 8008f88:	4b8b      	ldr	r3, [pc, #556]	; (80091b8 <_dtoa_r+0x328>)
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 f99b 	bl	80002c8 <__aeabi_dsub>
 8008f92:	a381      	add	r3, pc, #516	; (adr r3, 8009198 <_dtoa_r+0x308>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 fb4e 	bl	8000638 <__aeabi_dmul>
 8008f9c:	a380      	add	r3, pc, #512	; (adr r3, 80091a0 <_dtoa_r+0x310>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f993 	bl	80002cc <__adddf3>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	460f      	mov	r7, r1
 8008fac:	f7f7 fada 	bl	8000564 <__aeabi_i2d>
 8008fb0:	a37d      	add	r3, pc, #500	; (adr r3, 80091a8 <_dtoa_r+0x318>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 fb3f 	bl	8000638 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 f983 	bl	80002cc <__adddf3>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460f      	mov	r7, r1
 8008fca:	f7f7 fde5 	bl	8000b98 <__aeabi_d2iz>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fda0 	bl	8000b1c <__aeabi_dcmplt>
 8008fdc:	b148      	cbz	r0, 8008ff2 <_dtoa_r+0x162>
 8008fde:	4650      	mov	r0, sl
 8008fe0:	f7f7 fac0 	bl	8000564 <__aeabi_i2d>
 8008fe4:	4632      	mov	r2, r6
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	f7f7 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008fec:	b908      	cbnz	r0, 8008ff2 <_dtoa_r+0x162>
 8008fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ff2:	f1ba 0f16 	cmp.w	sl, #22
 8008ff6:	d859      	bhi.n	80090ac <_dtoa_r+0x21c>
 8008ff8:	4970      	ldr	r1, [pc, #448]	; (80091bc <_dtoa_r+0x32c>)
 8008ffa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009006:	f7f7 fda7 	bl	8000b58 <__aeabi_dcmpgt>
 800900a:	2800      	cmp	r0, #0
 800900c:	d050      	beq.n	80090b0 <_dtoa_r+0x220>
 800900e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009012:	2300      	movs	r3, #0
 8009014:	930f      	str	r3, [sp, #60]	; 0x3c
 8009016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009018:	1b5d      	subs	r5, r3, r5
 800901a:	f1b5 0801 	subs.w	r8, r5, #1
 800901e:	bf49      	itett	mi
 8009020:	f1c5 0301 	rsbmi	r3, r5, #1
 8009024:	2300      	movpl	r3, #0
 8009026:	9305      	strmi	r3, [sp, #20]
 8009028:	f04f 0800 	movmi.w	r8, #0
 800902c:	bf58      	it	pl
 800902e:	9305      	strpl	r3, [sp, #20]
 8009030:	f1ba 0f00 	cmp.w	sl, #0
 8009034:	db3e      	blt.n	80090b4 <_dtoa_r+0x224>
 8009036:	2300      	movs	r3, #0
 8009038:	44d0      	add	r8, sl
 800903a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	9b06      	ldr	r3, [sp, #24]
 8009042:	2b09      	cmp	r3, #9
 8009044:	f200 8090 	bhi.w	8009168 <_dtoa_r+0x2d8>
 8009048:	2b05      	cmp	r3, #5
 800904a:	bfc4      	itt	gt
 800904c:	3b04      	subgt	r3, #4
 800904e:	9306      	strgt	r3, [sp, #24]
 8009050:	9b06      	ldr	r3, [sp, #24]
 8009052:	f1a3 0302 	sub.w	r3, r3, #2
 8009056:	bfcc      	ite	gt
 8009058:	2500      	movgt	r5, #0
 800905a:	2501      	movle	r5, #1
 800905c:	2b03      	cmp	r3, #3
 800905e:	f200 808f 	bhi.w	8009180 <_dtoa_r+0x2f0>
 8009062:	e8df f003 	tbb	[pc, r3]
 8009066:	7f7d      	.short	0x7f7d
 8009068:	7131      	.short	0x7131
 800906a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800906e:	441d      	add	r5, r3
 8009070:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009074:	2820      	cmp	r0, #32
 8009076:	dd13      	ble.n	80090a0 <_dtoa_r+0x210>
 8009078:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	fa08 f800 	lsl.w	r8, r8, r0
 8009082:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009086:	fa23 f000 	lsr.w	r0, r3, r0
 800908a:	ea48 0000 	orr.w	r0, r8, r0
 800908e:	f7f7 fa59 	bl	8000544 <__aeabi_ui2d>
 8009092:	2301      	movs	r3, #1
 8009094:	4682      	mov	sl, r0
 8009096:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800909a:	3d01      	subs	r5, #1
 800909c:	9313      	str	r3, [sp, #76]	; 0x4c
 800909e:	e772      	b.n	8008f86 <_dtoa_r+0xf6>
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	f1c0 0020 	rsb	r0, r0, #32
 80090a6:	fa03 f000 	lsl.w	r0, r3, r0
 80090aa:	e7f0      	b.n	800908e <_dtoa_r+0x1fe>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7b1      	b.n	8009014 <_dtoa_r+0x184>
 80090b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80090b2:	e7b0      	b.n	8009016 <_dtoa_r+0x186>
 80090b4:	9b05      	ldr	r3, [sp, #20]
 80090b6:	eba3 030a 	sub.w	r3, r3, sl
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	f1ca 0300 	rsb	r3, sl, #0
 80090c0:	9307      	str	r3, [sp, #28]
 80090c2:	2300      	movs	r3, #0
 80090c4:	930e      	str	r3, [sp, #56]	; 0x38
 80090c6:	e7bb      	b.n	8009040 <_dtoa_r+0x1b0>
 80090c8:	2301      	movs	r3, #1
 80090ca:	930a      	str	r3, [sp, #40]	; 0x28
 80090cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd59      	ble.n	8009186 <_dtoa_r+0x2f6>
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	4699      	mov	r9, r3
 80090d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090d8:	2200      	movs	r2, #0
 80090da:	6072      	str	r2, [r6, #4]
 80090dc:	2204      	movs	r2, #4
 80090de:	f102 0014 	add.w	r0, r2, #20
 80090e2:	4298      	cmp	r0, r3
 80090e4:	6871      	ldr	r1, [r6, #4]
 80090e6:	d953      	bls.n	8009190 <_dtoa_r+0x300>
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fc9f 	bl	8009a2c <_Balloc>
 80090ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f0:	6030      	str	r0, [r6, #0]
 80090f2:	f1b9 0f0e 	cmp.w	r9, #14
 80090f6:	f8d3 b000 	ldr.w	fp, [r3]
 80090fa:	f200 80e6 	bhi.w	80092ca <_dtoa_r+0x43a>
 80090fe:	2d00      	cmp	r5, #0
 8009100:	f000 80e3 	beq.w	80092ca <_dtoa_r+0x43a>
 8009104:	ed9d 7b00 	vldr	d7, [sp]
 8009108:	f1ba 0f00 	cmp.w	sl, #0
 800910c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009110:	dd74      	ble.n	80091fc <_dtoa_r+0x36c>
 8009112:	4a2a      	ldr	r2, [pc, #168]	; (80091bc <_dtoa_r+0x32c>)
 8009114:	f00a 030f 	and.w	r3, sl, #15
 8009118:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800911c:	ed93 7b00 	vldr	d7, [r3]
 8009120:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009124:	06f0      	lsls	r0, r6, #27
 8009126:	ed8d 7b08 	vstr	d7, [sp, #32]
 800912a:	d565      	bpl.n	80091f8 <_dtoa_r+0x368>
 800912c:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <_dtoa_r+0x330>)
 800912e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009132:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009136:	f7f7 fba9 	bl	800088c <__aeabi_ddiv>
 800913a:	e9cd 0100 	strd	r0, r1, [sp]
 800913e:	f006 060f 	and.w	r6, r6, #15
 8009142:	2503      	movs	r5, #3
 8009144:	4f1e      	ldr	r7, [pc, #120]	; (80091c0 <_dtoa_r+0x330>)
 8009146:	e04c      	b.n	80091e2 <_dtoa_r+0x352>
 8009148:	2301      	movs	r3, #1
 800914a:	930a      	str	r3, [sp, #40]	; 0x28
 800914c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914e:	4453      	add	r3, sl
 8009150:	f103 0901 	add.w	r9, r3, #1
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	464b      	mov	r3, r9
 8009158:	2b01      	cmp	r3, #1
 800915a:	bfb8      	it	lt
 800915c:	2301      	movlt	r3, #1
 800915e:	e7ba      	b.n	80090d6 <_dtoa_r+0x246>
 8009160:	2300      	movs	r3, #0
 8009162:	e7b2      	b.n	80090ca <_dtoa_r+0x23a>
 8009164:	2300      	movs	r3, #0
 8009166:	e7f0      	b.n	800914a <_dtoa_r+0x2ba>
 8009168:	2501      	movs	r5, #1
 800916a:	2300      	movs	r3, #0
 800916c:	9306      	str	r3, [sp, #24]
 800916e:	950a      	str	r5, [sp, #40]	; 0x28
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	4699      	mov	r9, r3
 8009178:	2200      	movs	r2, #0
 800917a:	2312      	movs	r3, #18
 800917c:	920b      	str	r2, [sp, #44]	; 0x2c
 800917e:	e7aa      	b.n	80090d6 <_dtoa_r+0x246>
 8009180:	2301      	movs	r3, #1
 8009182:	930a      	str	r3, [sp, #40]	; 0x28
 8009184:	e7f4      	b.n	8009170 <_dtoa_r+0x2e0>
 8009186:	2301      	movs	r3, #1
 8009188:	9302      	str	r3, [sp, #8]
 800918a:	4699      	mov	r9, r3
 800918c:	461a      	mov	r2, r3
 800918e:	e7f5      	b.n	800917c <_dtoa_r+0x2ec>
 8009190:	3101      	adds	r1, #1
 8009192:	6071      	str	r1, [r6, #4]
 8009194:	0052      	lsls	r2, r2, #1
 8009196:	e7a2      	b.n	80090de <_dtoa_r+0x24e>
 8009198:	636f4361 	.word	0x636f4361
 800919c:	3fd287a7 	.word	0x3fd287a7
 80091a0:	8b60c8b3 	.word	0x8b60c8b3
 80091a4:	3fc68a28 	.word	0x3fc68a28
 80091a8:	509f79fb 	.word	0x509f79fb
 80091ac:	3fd34413 	.word	0x3fd34413
 80091b0:	7ff00000 	.word	0x7ff00000
 80091b4:	0800ab39 	.word	0x0800ab39
 80091b8:	3ff80000 	.word	0x3ff80000
 80091bc:	0800ab98 	.word	0x0800ab98
 80091c0:	0800ab70 	.word	0x0800ab70
 80091c4:	0800ab65 	.word	0x0800ab65
 80091c8:	07f1      	lsls	r1, r6, #31
 80091ca:	d508      	bpl.n	80091de <_dtoa_r+0x34e>
 80091cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d4:	f7f7 fa30 	bl	8000638 <__aeabi_dmul>
 80091d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091dc:	3501      	adds	r5, #1
 80091de:	1076      	asrs	r6, r6, #1
 80091e0:	3708      	adds	r7, #8
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d1f0      	bne.n	80091c8 <_dtoa_r+0x338>
 80091e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ee:	f7f7 fb4d 	bl	800088c <__aeabi_ddiv>
 80091f2:	e9cd 0100 	strd	r0, r1, [sp]
 80091f6:	e01a      	b.n	800922e <_dtoa_r+0x39e>
 80091f8:	2502      	movs	r5, #2
 80091fa:	e7a3      	b.n	8009144 <_dtoa_r+0x2b4>
 80091fc:	f000 80a0 	beq.w	8009340 <_dtoa_r+0x4b0>
 8009200:	f1ca 0600 	rsb	r6, sl, #0
 8009204:	4b9f      	ldr	r3, [pc, #636]	; (8009484 <_dtoa_r+0x5f4>)
 8009206:	4fa0      	ldr	r7, [pc, #640]	; (8009488 <_dtoa_r+0x5f8>)
 8009208:	f006 020f 	and.w	r2, r6, #15
 800920c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009218:	f7f7 fa0e 	bl	8000638 <__aeabi_dmul>
 800921c:	e9cd 0100 	strd	r0, r1, [sp]
 8009220:	1136      	asrs	r6, r6, #4
 8009222:	2300      	movs	r3, #0
 8009224:	2502      	movs	r5, #2
 8009226:	2e00      	cmp	r6, #0
 8009228:	d17f      	bne.n	800932a <_dtoa_r+0x49a>
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e1      	bne.n	80091f2 <_dtoa_r+0x362>
 800922e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8087 	beq.w	8009344 <_dtoa_r+0x4b4>
 8009236:	e9dd 6700 	ldrd	r6, r7, [sp]
 800923a:	2200      	movs	r2, #0
 800923c:	4b93      	ldr	r3, [pc, #588]	; (800948c <_dtoa_r+0x5fc>)
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 fc6b 	bl	8000b1c <__aeabi_dcmplt>
 8009246:	2800      	cmp	r0, #0
 8009248:	d07c      	beq.n	8009344 <_dtoa_r+0x4b4>
 800924a:	f1b9 0f00 	cmp.w	r9, #0
 800924e:	d079      	beq.n	8009344 <_dtoa_r+0x4b4>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dd35      	ble.n	80092c2 <_dtoa_r+0x432>
 8009256:	f10a 33ff 	add.w	r3, sl, #4294967295
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	4639      	mov	r1, r7
 800925e:	2200      	movs	r2, #0
 8009260:	4b8b      	ldr	r3, [pc, #556]	; (8009490 <_dtoa_r+0x600>)
 8009262:	4630      	mov	r0, r6
 8009264:	f7f7 f9e8 	bl	8000638 <__aeabi_dmul>
 8009268:	e9cd 0100 	strd	r0, r1, [sp]
 800926c:	9f02      	ldr	r7, [sp, #8]
 800926e:	3501      	adds	r5, #1
 8009270:	4628      	mov	r0, r5
 8009272:	f7f7 f977 	bl	8000564 <__aeabi_i2d>
 8009276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800927a:	f7f7 f9dd 	bl	8000638 <__aeabi_dmul>
 800927e:	2200      	movs	r2, #0
 8009280:	4b84      	ldr	r3, [pc, #528]	; (8009494 <_dtoa_r+0x604>)
 8009282:	f7f7 f823 	bl	80002cc <__adddf3>
 8009286:	4605      	mov	r5, r0
 8009288:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800928c:	2f00      	cmp	r7, #0
 800928e:	d15d      	bne.n	800934c <_dtoa_r+0x4bc>
 8009290:	2200      	movs	r2, #0
 8009292:	4b81      	ldr	r3, [pc, #516]	; (8009498 <_dtoa_r+0x608>)
 8009294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009298:	f7f7 f816 	bl	80002c8 <__aeabi_dsub>
 800929c:	462a      	mov	r2, r5
 800929e:	4633      	mov	r3, r6
 80092a0:	e9cd 0100 	strd	r0, r1, [sp]
 80092a4:	f7f7 fc58 	bl	8000b58 <__aeabi_dcmpgt>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f040 8288 	bne.w	80097be <_dtoa_r+0x92e>
 80092ae:	462a      	mov	r2, r5
 80092b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092b8:	f7f7 fc30 	bl	8000b1c <__aeabi_dcmplt>
 80092bc:	2800      	cmp	r0, #0
 80092be:	f040 827c 	bne.w	80097ba <_dtoa_r+0x92a>
 80092c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80092c6:	e9cd 2300 	strd	r2, r3, [sp]
 80092ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f2c0 8150 	blt.w	8009572 <_dtoa_r+0x6e2>
 80092d2:	f1ba 0f0e 	cmp.w	sl, #14
 80092d6:	f300 814c 	bgt.w	8009572 <_dtoa_r+0x6e2>
 80092da:	4b6a      	ldr	r3, [pc, #424]	; (8009484 <_dtoa_r+0x5f4>)
 80092dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092e0:	ed93 7b00 	vldr	d7, [r3]
 80092e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092ec:	f280 80d8 	bge.w	80094a0 <_dtoa_r+0x610>
 80092f0:	f1b9 0f00 	cmp.w	r9, #0
 80092f4:	f300 80d4 	bgt.w	80094a0 <_dtoa_r+0x610>
 80092f8:	f040 825e 	bne.w	80097b8 <_dtoa_r+0x928>
 80092fc:	2200      	movs	r2, #0
 80092fe:	4b66      	ldr	r3, [pc, #408]	; (8009498 <_dtoa_r+0x608>)
 8009300:	ec51 0b17 	vmov	r0, r1, d7
 8009304:	f7f7 f998 	bl	8000638 <__aeabi_dmul>
 8009308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800930c:	f7f7 fc1a 	bl	8000b44 <__aeabi_dcmpge>
 8009310:	464f      	mov	r7, r9
 8009312:	464e      	mov	r6, r9
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 8234 	bne.w	8009782 <_dtoa_r+0x8f2>
 800931a:	2331      	movs	r3, #49	; 0x31
 800931c:	f10b 0501 	add.w	r5, fp, #1
 8009320:	f88b 3000 	strb.w	r3, [fp]
 8009324:	f10a 0a01 	add.w	sl, sl, #1
 8009328:	e22f      	b.n	800978a <_dtoa_r+0x8fa>
 800932a:	07f2      	lsls	r2, r6, #31
 800932c:	d505      	bpl.n	800933a <_dtoa_r+0x4aa>
 800932e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009332:	f7f7 f981 	bl	8000638 <__aeabi_dmul>
 8009336:	3501      	adds	r5, #1
 8009338:	2301      	movs	r3, #1
 800933a:	1076      	asrs	r6, r6, #1
 800933c:	3708      	adds	r7, #8
 800933e:	e772      	b.n	8009226 <_dtoa_r+0x396>
 8009340:	2502      	movs	r5, #2
 8009342:	e774      	b.n	800922e <_dtoa_r+0x39e>
 8009344:	f8cd a020 	str.w	sl, [sp, #32]
 8009348:	464f      	mov	r7, r9
 800934a:	e791      	b.n	8009270 <_dtoa_r+0x3e0>
 800934c:	4b4d      	ldr	r3, [pc, #308]	; (8009484 <_dtoa_r+0x5f4>)
 800934e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009352:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009358:	2b00      	cmp	r3, #0
 800935a:	d047      	beq.n	80093ec <_dtoa_r+0x55c>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	2000      	movs	r0, #0
 8009362:	494e      	ldr	r1, [pc, #312]	; (800949c <_dtoa_r+0x60c>)
 8009364:	f7f7 fa92 	bl	800088c <__aeabi_ddiv>
 8009368:	462a      	mov	r2, r5
 800936a:	4633      	mov	r3, r6
 800936c:	f7f6 ffac 	bl	80002c8 <__aeabi_dsub>
 8009370:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009374:	465d      	mov	r5, fp
 8009376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800937a:	f7f7 fc0d 	bl	8000b98 <__aeabi_d2iz>
 800937e:	4606      	mov	r6, r0
 8009380:	f7f7 f8f0 	bl	8000564 <__aeabi_i2d>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800938c:	f7f6 ff9c 	bl	80002c8 <__aeabi_dsub>
 8009390:	3630      	adds	r6, #48	; 0x30
 8009392:	f805 6b01 	strb.w	r6, [r5], #1
 8009396:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800939a:	e9cd 0100 	strd	r0, r1, [sp]
 800939e:	f7f7 fbbd 	bl	8000b1c <__aeabi_dcmplt>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d163      	bne.n	800946e <_dtoa_r+0x5de>
 80093a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093aa:	2000      	movs	r0, #0
 80093ac:	4937      	ldr	r1, [pc, #220]	; (800948c <_dtoa_r+0x5fc>)
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093b6:	f7f7 fbb1 	bl	8000b1c <__aeabi_dcmplt>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	f040 80b7 	bne.w	800952e <_dtoa_r+0x69e>
 80093c0:	eba5 030b 	sub.w	r3, r5, fp
 80093c4:	429f      	cmp	r7, r3
 80093c6:	f77f af7c 	ble.w	80092c2 <_dtoa_r+0x432>
 80093ca:	2200      	movs	r2, #0
 80093cc:	4b30      	ldr	r3, [pc, #192]	; (8009490 <_dtoa_r+0x600>)
 80093ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093d2:	f7f7 f931 	bl	8000638 <__aeabi_dmul>
 80093d6:	2200      	movs	r2, #0
 80093d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093dc:	4b2c      	ldr	r3, [pc, #176]	; (8009490 <_dtoa_r+0x600>)
 80093de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e2:	f7f7 f929 	bl	8000638 <__aeabi_dmul>
 80093e6:	e9cd 0100 	strd	r0, r1, [sp]
 80093ea:	e7c4      	b.n	8009376 <_dtoa_r+0x4e6>
 80093ec:	462a      	mov	r2, r5
 80093ee:	4633      	mov	r3, r6
 80093f0:	f7f7 f922 	bl	8000638 <__aeabi_dmul>
 80093f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80093f8:	eb0b 0507 	add.w	r5, fp, r7
 80093fc:	465e      	mov	r6, fp
 80093fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009402:	f7f7 fbc9 	bl	8000b98 <__aeabi_d2iz>
 8009406:	4607      	mov	r7, r0
 8009408:	f7f7 f8ac 	bl	8000564 <__aeabi_i2d>
 800940c:	3730      	adds	r7, #48	; 0x30
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009416:	f7f6 ff57 	bl	80002c8 <__aeabi_dsub>
 800941a:	f806 7b01 	strb.w	r7, [r6], #1
 800941e:	42ae      	cmp	r6, r5
 8009420:	e9cd 0100 	strd	r0, r1, [sp]
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	d126      	bne.n	8009478 <_dtoa_r+0x5e8>
 800942a:	4b1c      	ldr	r3, [pc, #112]	; (800949c <_dtoa_r+0x60c>)
 800942c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009430:	f7f6 ff4c 	bl	80002cc <__adddf3>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800943c:	f7f7 fb8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009440:	2800      	cmp	r0, #0
 8009442:	d174      	bne.n	800952e <_dtoa_r+0x69e>
 8009444:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009448:	2000      	movs	r0, #0
 800944a:	4914      	ldr	r1, [pc, #80]	; (800949c <_dtoa_r+0x60c>)
 800944c:	f7f6 ff3c 	bl	80002c8 <__aeabi_dsub>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009458:	f7f7 fb60 	bl	8000b1c <__aeabi_dcmplt>
 800945c:	2800      	cmp	r0, #0
 800945e:	f43f af30 	beq.w	80092c2 <_dtoa_r+0x432>
 8009462:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009466:	2b30      	cmp	r3, #48	; 0x30
 8009468:	f105 32ff 	add.w	r2, r5, #4294967295
 800946c:	d002      	beq.n	8009474 <_dtoa_r+0x5e4>
 800946e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009472:	e04a      	b.n	800950a <_dtoa_r+0x67a>
 8009474:	4615      	mov	r5, r2
 8009476:	e7f4      	b.n	8009462 <_dtoa_r+0x5d2>
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <_dtoa_r+0x600>)
 800947a:	f7f7 f8dd 	bl	8000638 <__aeabi_dmul>
 800947e:	e9cd 0100 	strd	r0, r1, [sp]
 8009482:	e7bc      	b.n	80093fe <_dtoa_r+0x56e>
 8009484:	0800ab98 	.word	0x0800ab98
 8009488:	0800ab70 	.word	0x0800ab70
 800948c:	3ff00000 	.word	0x3ff00000
 8009490:	40240000 	.word	0x40240000
 8009494:	401c0000 	.word	0x401c0000
 8009498:	40140000 	.word	0x40140000
 800949c:	3fe00000 	.word	0x3fe00000
 80094a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094a4:	465d      	mov	r5, fp
 80094a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094aa:	4630      	mov	r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	f7f7 f9ed 	bl	800088c <__aeabi_ddiv>
 80094b2:	f7f7 fb71 	bl	8000b98 <__aeabi_d2iz>
 80094b6:	4680      	mov	r8, r0
 80094b8:	f7f7 f854 	bl	8000564 <__aeabi_i2d>
 80094bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80094d0:	f7f6 fefa 	bl	80002c8 <__aeabi_dsub>
 80094d4:	f805 6b01 	strb.w	r6, [r5], #1
 80094d8:	eba5 060b 	sub.w	r6, r5, fp
 80094dc:	45b1      	cmp	r9, r6
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	d139      	bne.n	8009558 <_dtoa_r+0x6c8>
 80094e4:	f7f6 fef2 	bl	80002cc <__adddf3>
 80094e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	f7f7 fb32 	bl	8000b58 <__aeabi_dcmpgt>
 80094f4:	b9c8      	cbnz	r0, 800952a <_dtoa_r+0x69a>
 80094f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 fb03 	bl	8000b08 <__aeabi_dcmpeq>
 8009502:	b110      	cbz	r0, 800950a <_dtoa_r+0x67a>
 8009504:	f018 0f01 	tst.w	r8, #1
 8009508:	d10f      	bne.n	800952a <_dtoa_r+0x69a>
 800950a:	9904      	ldr	r1, [sp, #16]
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fac1 	bl	8009a94 <_Bfree>
 8009512:	2300      	movs	r3, #0
 8009514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009516:	702b      	strb	r3, [r5, #0]
 8009518:	f10a 0301 	add.w	r3, sl, #1
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8241 	beq.w	80099a8 <_dtoa_r+0xb18>
 8009526:	601d      	str	r5, [r3, #0]
 8009528:	e23e      	b.n	80099a8 <_dtoa_r+0xb18>
 800952a:	f8cd a020 	str.w	sl, [sp, #32]
 800952e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009532:	2a39      	cmp	r2, #57	; 0x39
 8009534:	f105 33ff 	add.w	r3, r5, #4294967295
 8009538:	d108      	bne.n	800954c <_dtoa_r+0x6bc>
 800953a:	459b      	cmp	fp, r3
 800953c:	d10a      	bne.n	8009554 <_dtoa_r+0x6c4>
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	3301      	adds	r3, #1
 8009542:	9308      	str	r3, [sp, #32]
 8009544:	2330      	movs	r3, #48	; 0x30
 8009546:	f88b 3000 	strb.w	r3, [fp]
 800954a:	465b      	mov	r3, fp
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	3201      	adds	r2, #1
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	e78c      	b.n	800946e <_dtoa_r+0x5de>
 8009554:	461d      	mov	r5, r3
 8009556:	e7ea      	b.n	800952e <_dtoa_r+0x69e>
 8009558:	2200      	movs	r2, #0
 800955a:	4b9b      	ldr	r3, [pc, #620]	; (80097c8 <_dtoa_r+0x938>)
 800955c:	f7f7 f86c 	bl	8000638 <__aeabi_dmul>
 8009560:	2200      	movs	r2, #0
 8009562:	2300      	movs	r3, #0
 8009564:	4606      	mov	r6, r0
 8009566:	460f      	mov	r7, r1
 8009568:	f7f7 face 	bl	8000b08 <__aeabi_dcmpeq>
 800956c:	2800      	cmp	r0, #0
 800956e:	d09a      	beq.n	80094a6 <_dtoa_r+0x616>
 8009570:	e7cb      	b.n	800950a <_dtoa_r+0x67a>
 8009572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009574:	2a00      	cmp	r2, #0
 8009576:	f000 808b 	beq.w	8009690 <_dtoa_r+0x800>
 800957a:	9a06      	ldr	r2, [sp, #24]
 800957c:	2a01      	cmp	r2, #1
 800957e:	dc6e      	bgt.n	800965e <_dtoa_r+0x7ce>
 8009580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009582:	2a00      	cmp	r2, #0
 8009584:	d067      	beq.n	8009656 <_dtoa_r+0x7c6>
 8009586:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800958a:	9f07      	ldr	r7, [sp, #28]
 800958c:	9d05      	ldr	r5, [sp, #20]
 800958e:	9a05      	ldr	r2, [sp, #20]
 8009590:	2101      	movs	r1, #1
 8009592:	441a      	add	r2, r3
 8009594:	4620      	mov	r0, r4
 8009596:	9205      	str	r2, [sp, #20]
 8009598:	4498      	add	r8, r3
 800959a:	f000 fb1b 	bl	8009bd4 <__i2b>
 800959e:	4606      	mov	r6, r0
 80095a0:	2d00      	cmp	r5, #0
 80095a2:	dd0c      	ble.n	80095be <_dtoa_r+0x72e>
 80095a4:	f1b8 0f00 	cmp.w	r8, #0
 80095a8:	dd09      	ble.n	80095be <_dtoa_r+0x72e>
 80095aa:	4545      	cmp	r5, r8
 80095ac:	9a05      	ldr	r2, [sp, #20]
 80095ae:	462b      	mov	r3, r5
 80095b0:	bfa8      	it	ge
 80095b2:	4643      	movge	r3, r8
 80095b4:	1ad2      	subs	r2, r2, r3
 80095b6:	9205      	str	r2, [sp, #20]
 80095b8:	1aed      	subs	r5, r5, r3
 80095ba:	eba8 0803 	sub.w	r8, r8, r3
 80095be:	9b07      	ldr	r3, [sp, #28]
 80095c0:	b1eb      	cbz	r3, 80095fe <_dtoa_r+0x76e>
 80095c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d067      	beq.n	8009698 <_dtoa_r+0x808>
 80095c8:	b18f      	cbz	r7, 80095ee <_dtoa_r+0x75e>
 80095ca:	4631      	mov	r1, r6
 80095cc:	463a      	mov	r2, r7
 80095ce:	4620      	mov	r0, r4
 80095d0:	f000 fba0 	bl	8009d14 <__pow5mult>
 80095d4:	9a04      	ldr	r2, [sp, #16]
 80095d6:	4601      	mov	r1, r0
 80095d8:	4606      	mov	r6, r0
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fb03 	bl	8009be6 <__multiply>
 80095e0:	9904      	ldr	r1, [sp, #16]
 80095e2:	9008      	str	r0, [sp, #32]
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fa55 	bl	8009a94 <_Bfree>
 80095ea:	9b08      	ldr	r3, [sp, #32]
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	1bda      	subs	r2, r3, r7
 80095f2:	d004      	beq.n	80095fe <_dtoa_r+0x76e>
 80095f4:	9904      	ldr	r1, [sp, #16]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fb8c 	bl	8009d14 <__pow5mult>
 80095fc:	9004      	str	r0, [sp, #16]
 80095fe:	2101      	movs	r1, #1
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fae7 	bl	8009bd4 <__i2b>
 8009606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009608:	4607      	mov	r7, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 81d0 	beq.w	80099b0 <_dtoa_r+0xb20>
 8009610:	461a      	mov	r2, r3
 8009612:	4601      	mov	r1, r0
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fb7d 	bl	8009d14 <__pow5mult>
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	2b01      	cmp	r3, #1
 800961e:	4607      	mov	r7, r0
 8009620:	dc40      	bgt.n	80096a4 <_dtoa_r+0x814>
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d139      	bne.n	800969c <_dtoa_r+0x80c>
 8009628:	9b01      	ldr	r3, [sp, #4]
 800962a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800962e:	2b00      	cmp	r3, #0
 8009630:	d136      	bne.n	80096a0 <_dtoa_r+0x810>
 8009632:	9b01      	ldr	r3, [sp, #4]
 8009634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009638:	0d1b      	lsrs	r3, r3, #20
 800963a:	051b      	lsls	r3, r3, #20
 800963c:	b12b      	cbz	r3, 800964a <_dtoa_r+0x7ba>
 800963e:	9b05      	ldr	r3, [sp, #20]
 8009640:	3301      	adds	r3, #1
 8009642:	9305      	str	r3, [sp, #20]
 8009644:	f108 0801 	add.w	r8, r8, #1
 8009648:	2301      	movs	r3, #1
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d12a      	bne.n	80096a8 <_dtoa_r+0x818>
 8009652:	2001      	movs	r0, #1
 8009654:	e030      	b.n	80096b8 <_dtoa_r+0x828>
 8009656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009658:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800965c:	e795      	b.n	800958a <_dtoa_r+0x6fa>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	f109 37ff 	add.w	r7, r9, #4294967295
 8009664:	42bb      	cmp	r3, r7
 8009666:	bfbf      	itttt	lt
 8009668:	9b07      	ldrlt	r3, [sp, #28]
 800966a:	9707      	strlt	r7, [sp, #28]
 800966c:	1afa      	sublt	r2, r7, r3
 800966e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009670:	bfbb      	ittet	lt
 8009672:	189b      	addlt	r3, r3, r2
 8009674:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009676:	1bdf      	subge	r7, r3, r7
 8009678:	2700      	movlt	r7, #0
 800967a:	f1b9 0f00 	cmp.w	r9, #0
 800967e:	bfb5      	itete	lt
 8009680:	9b05      	ldrlt	r3, [sp, #20]
 8009682:	9d05      	ldrge	r5, [sp, #20]
 8009684:	eba3 0509 	sublt.w	r5, r3, r9
 8009688:	464b      	movge	r3, r9
 800968a:	bfb8      	it	lt
 800968c:	2300      	movlt	r3, #0
 800968e:	e77e      	b.n	800958e <_dtoa_r+0x6fe>
 8009690:	9f07      	ldr	r7, [sp, #28]
 8009692:	9d05      	ldr	r5, [sp, #20]
 8009694:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009696:	e783      	b.n	80095a0 <_dtoa_r+0x710>
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	e7ab      	b.n	80095f4 <_dtoa_r+0x764>
 800969c:	2300      	movs	r3, #0
 800969e:	e7d4      	b.n	800964a <_dtoa_r+0x7ba>
 80096a0:	9b00      	ldr	r3, [sp, #0]
 80096a2:	e7d2      	b.n	800964a <_dtoa_r+0x7ba>
 80096a4:	2300      	movs	r3, #0
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80096ae:	6918      	ldr	r0, [r3, #16]
 80096b0:	f000 fa42 	bl	8009b38 <__hi0bits>
 80096b4:	f1c0 0020 	rsb	r0, r0, #32
 80096b8:	4440      	add	r0, r8
 80096ba:	f010 001f 	ands.w	r0, r0, #31
 80096be:	d047      	beq.n	8009750 <_dtoa_r+0x8c0>
 80096c0:	f1c0 0320 	rsb	r3, r0, #32
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	dd3b      	ble.n	8009740 <_dtoa_r+0x8b0>
 80096c8:	9b05      	ldr	r3, [sp, #20]
 80096ca:	f1c0 001c 	rsb	r0, r0, #28
 80096ce:	4403      	add	r3, r0
 80096d0:	9305      	str	r3, [sp, #20]
 80096d2:	4405      	add	r5, r0
 80096d4:	4480      	add	r8, r0
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dd05      	ble.n	80096e8 <_dtoa_r+0x858>
 80096dc:	461a      	mov	r2, r3
 80096de:	9904      	ldr	r1, [sp, #16]
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fb65 	bl	8009db0 <__lshift>
 80096e6:	9004      	str	r0, [sp, #16]
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	dd05      	ble.n	80096fa <_dtoa_r+0x86a>
 80096ee:	4639      	mov	r1, r7
 80096f0:	4642      	mov	r2, r8
 80096f2:	4620      	mov	r0, r4
 80096f4:	f000 fb5c 	bl	8009db0 <__lshift>
 80096f8:	4607      	mov	r7, r0
 80096fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096fc:	b353      	cbz	r3, 8009754 <_dtoa_r+0x8c4>
 80096fe:	4639      	mov	r1, r7
 8009700:	9804      	ldr	r0, [sp, #16]
 8009702:	f000 fba9 	bl	8009e58 <__mcmp>
 8009706:	2800      	cmp	r0, #0
 8009708:	da24      	bge.n	8009754 <_dtoa_r+0x8c4>
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	9904      	ldr	r1, [sp, #16]
 8009710:	4620      	mov	r0, r4
 8009712:	f000 f9d6 	bl	8009ac2 <__multadd>
 8009716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009718:	9004      	str	r0, [sp, #16]
 800971a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 814d 	beq.w	80099be <_dtoa_r+0xb2e>
 8009724:	2300      	movs	r3, #0
 8009726:	4631      	mov	r1, r6
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f9c9 	bl	8009ac2 <__multadd>
 8009730:	9b02      	ldr	r3, [sp, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	4606      	mov	r6, r0
 8009736:	dc4f      	bgt.n	80097d8 <_dtoa_r+0x948>
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	2b02      	cmp	r3, #2
 800973c:	dd4c      	ble.n	80097d8 <_dtoa_r+0x948>
 800973e:	e011      	b.n	8009764 <_dtoa_r+0x8d4>
 8009740:	d0c9      	beq.n	80096d6 <_dtoa_r+0x846>
 8009742:	9a05      	ldr	r2, [sp, #20]
 8009744:	331c      	adds	r3, #28
 8009746:	441a      	add	r2, r3
 8009748:	9205      	str	r2, [sp, #20]
 800974a:	441d      	add	r5, r3
 800974c:	4498      	add	r8, r3
 800974e:	e7c2      	b.n	80096d6 <_dtoa_r+0x846>
 8009750:	4603      	mov	r3, r0
 8009752:	e7f6      	b.n	8009742 <_dtoa_r+0x8b2>
 8009754:	f1b9 0f00 	cmp.w	r9, #0
 8009758:	dc38      	bgt.n	80097cc <_dtoa_r+0x93c>
 800975a:	9b06      	ldr	r3, [sp, #24]
 800975c:	2b02      	cmp	r3, #2
 800975e:	dd35      	ble.n	80097cc <_dtoa_r+0x93c>
 8009760:	f8cd 9008 	str.w	r9, [sp, #8]
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	b963      	cbnz	r3, 8009782 <_dtoa_r+0x8f2>
 8009768:	4639      	mov	r1, r7
 800976a:	2205      	movs	r2, #5
 800976c:	4620      	mov	r0, r4
 800976e:	f000 f9a8 	bl	8009ac2 <__multadd>
 8009772:	4601      	mov	r1, r0
 8009774:	4607      	mov	r7, r0
 8009776:	9804      	ldr	r0, [sp, #16]
 8009778:	f000 fb6e 	bl	8009e58 <__mcmp>
 800977c:	2800      	cmp	r0, #0
 800977e:	f73f adcc 	bgt.w	800931a <_dtoa_r+0x48a>
 8009782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009784:	465d      	mov	r5, fp
 8009786:	ea6f 0a03 	mvn.w	sl, r3
 800978a:	f04f 0900 	mov.w	r9, #0
 800978e:	4639      	mov	r1, r7
 8009790:	4620      	mov	r0, r4
 8009792:	f000 f97f 	bl	8009a94 <_Bfree>
 8009796:	2e00      	cmp	r6, #0
 8009798:	f43f aeb7 	beq.w	800950a <_dtoa_r+0x67a>
 800979c:	f1b9 0f00 	cmp.w	r9, #0
 80097a0:	d005      	beq.n	80097ae <_dtoa_r+0x91e>
 80097a2:	45b1      	cmp	r9, r6
 80097a4:	d003      	beq.n	80097ae <_dtoa_r+0x91e>
 80097a6:	4649      	mov	r1, r9
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 f973 	bl	8009a94 <_Bfree>
 80097ae:	4631      	mov	r1, r6
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 f96f 	bl	8009a94 <_Bfree>
 80097b6:	e6a8      	b.n	800950a <_dtoa_r+0x67a>
 80097b8:	2700      	movs	r7, #0
 80097ba:	463e      	mov	r6, r7
 80097bc:	e7e1      	b.n	8009782 <_dtoa_r+0x8f2>
 80097be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80097c2:	463e      	mov	r6, r7
 80097c4:	e5a9      	b.n	800931a <_dtoa_r+0x48a>
 80097c6:	bf00      	nop
 80097c8:	40240000 	.word	0x40240000
 80097cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 80fa 	beq.w	80099cc <_dtoa_r+0xb3c>
 80097d8:	2d00      	cmp	r5, #0
 80097da:	dd05      	ble.n	80097e8 <_dtoa_r+0x958>
 80097dc:	4631      	mov	r1, r6
 80097de:	462a      	mov	r2, r5
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fae5 	bl	8009db0 <__lshift>
 80097e6:	4606      	mov	r6, r0
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d04c      	beq.n	8009888 <_dtoa_r+0x9f8>
 80097ee:	6871      	ldr	r1, [r6, #4]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 f91b 	bl	8009a2c <_Balloc>
 80097f6:	6932      	ldr	r2, [r6, #16]
 80097f8:	3202      	adds	r2, #2
 80097fa:	4605      	mov	r5, r0
 80097fc:	0092      	lsls	r2, r2, #2
 80097fe:	f106 010c 	add.w	r1, r6, #12
 8009802:	300c      	adds	r0, #12
 8009804:	f7fe fdf4 	bl	80083f0 <memcpy>
 8009808:	2201      	movs	r2, #1
 800980a:	4629      	mov	r1, r5
 800980c:	4620      	mov	r0, r4
 800980e:	f000 facf 	bl	8009db0 <__lshift>
 8009812:	9b00      	ldr	r3, [sp, #0]
 8009814:	f8cd b014 	str.w	fp, [sp, #20]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	46b1      	mov	r9, r6
 800981e:	9307      	str	r3, [sp, #28]
 8009820:	4606      	mov	r6, r0
 8009822:	4639      	mov	r1, r7
 8009824:	9804      	ldr	r0, [sp, #16]
 8009826:	f7ff faa7 	bl	8008d78 <quorem>
 800982a:	4649      	mov	r1, r9
 800982c:	4605      	mov	r5, r0
 800982e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009832:	9804      	ldr	r0, [sp, #16]
 8009834:	f000 fb10 	bl	8009e58 <__mcmp>
 8009838:	4632      	mov	r2, r6
 800983a:	9000      	str	r0, [sp, #0]
 800983c:	4639      	mov	r1, r7
 800983e:	4620      	mov	r0, r4
 8009840:	f000 fb24 	bl	8009e8c <__mdiff>
 8009844:	68c3      	ldr	r3, [r0, #12]
 8009846:	4602      	mov	r2, r0
 8009848:	bb03      	cbnz	r3, 800988c <_dtoa_r+0x9fc>
 800984a:	4601      	mov	r1, r0
 800984c:	9008      	str	r0, [sp, #32]
 800984e:	9804      	ldr	r0, [sp, #16]
 8009850:	f000 fb02 	bl	8009e58 <__mcmp>
 8009854:	9a08      	ldr	r2, [sp, #32]
 8009856:	4603      	mov	r3, r0
 8009858:	4611      	mov	r1, r2
 800985a:	4620      	mov	r0, r4
 800985c:	9308      	str	r3, [sp, #32]
 800985e:	f000 f919 	bl	8009a94 <_Bfree>
 8009862:	9b08      	ldr	r3, [sp, #32]
 8009864:	b9a3      	cbnz	r3, 8009890 <_dtoa_r+0xa00>
 8009866:	9a06      	ldr	r2, [sp, #24]
 8009868:	b992      	cbnz	r2, 8009890 <_dtoa_r+0xa00>
 800986a:	9a07      	ldr	r2, [sp, #28]
 800986c:	b982      	cbnz	r2, 8009890 <_dtoa_r+0xa00>
 800986e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009872:	d029      	beq.n	80098c8 <_dtoa_r+0xa38>
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dd01      	ble.n	800987e <_dtoa_r+0x9ee>
 800987a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800987e:	9b05      	ldr	r3, [sp, #20]
 8009880:	1c5d      	adds	r5, r3, #1
 8009882:	f883 8000 	strb.w	r8, [r3]
 8009886:	e782      	b.n	800978e <_dtoa_r+0x8fe>
 8009888:	4630      	mov	r0, r6
 800988a:	e7c2      	b.n	8009812 <_dtoa_r+0x982>
 800988c:	2301      	movs	r3, #1
 800988e:	e7e3      	b.n	8009858 <_dtoa_r+0x9c8>
 8009890:	9a00      	ldr	r2, [sp, #0]
 8009892:	2a00      	cmp	r2, #0
 8009894:	db04      	blt.n	80098a0 <_dtoa_r+0xa10>
 8009896:	d125      	bne.n	80098e4 <_dtoa_r+0xa54>
 8009898:	9a06      	ldr	r2, [sp, #24]
 800989a:	bb1a      	cbnz	r2, 80098e4 <_dtoa_r+0xa54>
 800989c:	9a07      	ldr	r2, [sp, #28]
 800989e:	bb0a      	cbnz	r2, 80098e4 <_dtoa_r+0xa54>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	ddec      	ble.n	800987e <_dtoa_r+0x9ee>
 80098a4:	2201      	movs	r2, #1
 80098a6:	9904      	ldr	r1, [sp, #16]
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fa81 	bl	8009db0 <__lshift>
 80098ae:	4639      	mov	r1, r7
 80098b0:	9004      	str	r0, [sp, #16]
 80098b2:	f000 fad1 	bl	8009e58 <__mcmp>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	dc03      	bgt.n	80098c2 <_dtoa_r+0xa32>
 80098ba:	d1e0      	bne.n	800987e <_dtoa_r+0x9ee>
 80098bc:	f018 0f01 	tst.w	r8, #1
 80098c0:	d0dd      	beq.n	800987e <_dtoa_r+0x9ee>
 80098c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098c6:	d1d8      	bne.n	800987a <_dtoa_r+0x9ea>
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	9a05      	ldr	r2, [sp, #20]
 80098cc:	1c5d      	adds	r5, r3, #1
 80098ce:	2339      	movs	r3, #57	; 0x39
 80098d0:	7013      	strb	r3, [r2, #0]
 80098d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098d6:	2b39      	cmp	r3, #57	; 0x39
 80098d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80098dc:	d04f      	beq.n	800997e <_dtoa_r+0xaee>
 80098de:	3301      	adds	r3, #1
 80098e0:	7013      	strb	r3, [r2, #0]
 80098e2:	e754      	b.n	800978e <_dtoa_r+0x8fe>
 80098e4:	9a05      	ldr	r2, [sp, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f102 0501 	add.w	r5, r2, #1
 80098ec:	dd06      	ble.n	80098fc <_dtoa_r+0xa6c>
 80098ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098f2:	d0e9      	beq.n	80098c8 <_dtoa_r+0xa38>
 80098f4:	f108 0801 	add.w	r8, r8, #1
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	e7c2      	b.n	8009882 <_dtoa_r+0x9f2>
 80098fc:	9a02      	ldr	r2, [sp, #8]
 80098fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009902:	eba5 030b 	sub.w	r3, r5, fp
 8009906:	4293      	cmp	r3, r2
 8009908:	d021      	beq.n	800994e <_dtoa_r+0xabe>
 800990a:	2300      	movs	r3, #0
 800990c:	220a      	movs	r2, #10
 800990e:	9904      	ldr	r1, [sp, #16]
 8009910:	4620      	mov	r0, r4
 8009912:	f000 f8d6 	bl	8009ac2 <__multadd>
 8009916:	45b1      	cmp	r9, r6
 8009918:	9004      	str	r0, [sp, #16]
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	f04f 020a 	mov.w	r2, #10
 8009922:	4649      	mov	r1, r9
 8009924:	4620      	mov	r0, r4
 8009926:	d105      	bne.n	8009934 <_dtoa_r+0xaa4>
 8009928:	f000 f8cb 	bl	8009ac2 <__multadd>
 800992c:	4681      	mov	r9, r0
 800992e:	4606      	mov	r6, r0
 8009930:	9505      	str	r5, [sp, #20]
 8009932:	e776      	b.n	8009822 <_dtoa_r+0x992>
 8009934:	f000 f8c5 	bl	8009ac2 <__multadd>
 8009938:	4631      	mov	r1, r6
 800993a:	4681      	mov	r9, r0
 800993c:	2300      	movs	r3, #0
 800993e:	220a      	movs	r2, #10
 8009940:	4620      	mov	r0, r4
 8009942:	f000 f8be 	bl	8009ac2 <__multadd>
 8009946:	4606      	mov	r6, r0
 8009948:	e7f2      	b.n	8009930 <_dtoa_r+0xaa0>
 800994a:	f04f 0900 	mov.w	r9, #0
 800994e:	2201      	movs	r2, #1
 8009950:	9904      	ldr	r1, [sp, #16]
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fa2c 	bl	8009db0 <__lshift>
 8009958:	4639      	mov	r1, r7
 800995a:	9004      	str	r0, [sp, #16]
 800995c:	f000 fa7c 	bl	8009e58 <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	dcb6      	bgt.n	80098d2 <_dtoa_r+0xa42>
 8009964:	d102      	bne.n	800996c <_dtoa_r+0xadc>
 8009966:	f018 0f01 	tst.w	r8, #1
 800996a:	d1b2      	bne.n	80098d2 <_dtoa_r+0xa42>
 800996c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009970:	2b30      	cmp	r3, #48	; 0x30
 8009972:	f105 32ff 	add.w	r2, r5, #4294967295
 8009976:	f47f af0a 	bne.w	800978e <_dtoa_r+0x8fe>
 800997a:	4615      	mov	r5, r2
 800997c:	e7f6      	b.n	800996c <_dtoa_r+0xadc>
 800997e:	4593      	cmp	fp, r2
 8009980:	d105      	bne.n	800998e <_dtoa_r+0xafe>
 8009982:	2331      	movs	r3, #49	; 0x31
 8009984:	f10a 0a01 	add.w	sl, sl, #1
 8009988:	f88b 3000 	strb.w	r3, [fp]
 800998c:	e6ff      	b.n	800978e <_dtoa_r+0x8fe>
 800998e:	4615      	mov	r5, r2
 8009990:	e79f      	b.n	80098d2 <_dtoa_r+0xa42>
 8009992:	f8df b064 	ldr.w	fp, [pc, #100]	; 80099f8 <_dtoa_r+0xb68>
 8009996:	e007      	b.n	80099a8 <_dtoa_r+0xb18>
 8009998:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800999a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80099fc <_dtoa_r+0xb6c>
 800999e:	b11b      	cbz	r3, 80099a8 <_dtoa_r+0xb18>
 80099a0:	f10b 0308 	add.w	r3, fp, #8
 80099a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	4658      	mov	r0, fp
 80099aa:	b017      	add	sp, #92	; 0x5c
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	f77f ae35 	ble.w	8009622 <_dtoa_r+0x792>
 80099b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ba:	9307      	str	r3, [sp, #28]
 80099bc:	e649      	b.n	8009652 <_dtoa_r+0x7c2>
 80099be:	9b02      	ldr	r3, [sp, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc03      	bgt.n	80099cc <_dtoa_r+0xb3c>
 80099c4:	9b06      	ldr	r3, [sp, #24]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	f73f aecc 	bgt.w	8009764 <_dtoa_r+0x8d4>
 80099cc:	465d      	mov	r5, fp
 80099ce:	4639      	mov	r1, r7
 80099d0:	9804      	ldr	r0, [sp, #16]
 80099d2:	f7ff f9d1 	bl	8008d78 <quorem>
 80099d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80099da:	f805 8b01 	strb.w	r8, [r5], #1
 80099de:	9a02      	ldr	r2, [sp, #8]
 80099e0:	eba5 030b 	sub.w	r3, r5, fp
 80099e4:	429a      	cmp	r2, r3
 80099e6:	ddb0      	ble.n	800994a <_dtoa_r+0xaba>
 80099e8:	2300      	movs	r3, #0
 80099ea:	220a      	movs	r2, #10
 80099ec:	9904      	ldr	r1, [sp, #16]
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 f867 	bl	8009ac2 <__multadd>
 80099f4:	9004      	str	r0, [sp, #16]
 80099f6:	e7ea      	b.n	80099ce <_dtoa_r+0xb3e>
 80099f8:	0800ab38 	.word	0x0800ab38
 80099fc:	0800ab5c 	.word	0x0800ab5c

08009a00 <_localeconv_r>:
 8009a00:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <_localeconv_r+0x14>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6a18      	ldr	r0, [r3, #32]
 8009a06:	4b04      	ldr	r3, [pc, #16]	; (8009a18 <_localeconv_r+0x18>)
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	bf08      	it	eq
 8009a0c:	4618      	moveq	r0, r3
 8009a0e:	30f0      	adds	r0, #240	; 0xf0
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	2000001c 	.word	0x2000001c
 8009a18:	20000080 	.word	0x20000080

08009a1c <malloc>:
 8009a1c:	4b02      	ldr	r3, [pc, #8]	; (8009a28 <malloc+0xc>)
 8009a1e:	4601      	mov	r1, r0
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	f000 bb3b 	b.w	800a09c <_malloc_r>
 8009a26:	bf00      	nop
 8009a28:	2000001c 	.word	0x2000001c

08009a2c <_Balloc>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a30:	4604      	mov	r4, r0
 8009a32:	460e      	mov	r6, r1
 8009a34:	b93d      	cbnz	r5, 8009a46 <_Balloc+0x1a>
 8009a36:	2010      	movs	r0, #16
 8009a38:	f7ff fff0 	bl	8009a1c <malloc>
 8009a3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a42:	6005      	str	r5, [r0, #0]
 8009a44:	60c5      	str	r5, [r0, #12]
 8009a46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a48:	68eb      	ldr	r3, [r5, #12]
 8009a4a:	b183      	cbz	r3, 8009a6e <_Balloc+0x42>
 8009a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a54:	b9b8      	cbnz	r0, 8009a86 <_Balloc+0x5a>
 8009a56:	2101      	movs	r1, #1
 8009a58:	fa01 f506 	lsl.w	r5, r1, r6
 8009a5c:	1d6a      	adds	r2, r5, #5
 8009a5e:	0092      	lsls	r2, r2, #2
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 fabf 	bl	8009fe4 <_calloc_r>
 8009a66:	b160      	cbz	r0, 8009a82 <_Balloc+0x56>
 8009a68:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009a6c:	e00e      	b.n	8009a8c <_Balloc+0x60>
 8009a6e:	2221      	movs	r2, #33	; 0x21
 8009a70:	2104      	movs	r1, #4
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fab6 	bl	8009fe4 <_calloc_r>
 8009a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a7a:	60e8      	str	r0, [r5, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e4      	bne.n	8009a4c <_Balloc+0x20>
 8009a82:	2000      	movs	r0, #0
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	6802      	ldr	r2, [r0, #0]
 8009a88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a92:	e7f7      	b.n	8009a84 <_Balloc+0x58>

08009a94 <_Bfree>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	b93c      	cbnz	r4, 8009aae <_Bfree+0x1a>
 8009a9e:	2010      	movs	r0, #16
 8009aa0:	f7ff ffbc 	bl	8009a1c <malloc>
 8009aa4:	6270      	str	r0, [r6, #36]	; 0x24
 8009aa6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aaa:	6004      	str	r4, [r0, #0]
 8009aac:	60c4      	str	r4, [r0, #12]
 8009aae:	b13d      	cbz	r5, 8009ac0 <_Bfree+0x2c>
 8009ab0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ab2:	686a      	ldr	r2, [r5, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aba:	6029      	str	r1, [r5, #0]
 8009abc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}

08009ac2 <__multadd>:
 8009ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	690d      	ldr	r5, [r1, #16]
 8009ac8:	461f      	mov	r7, r3
 8009aca:	4606      	mov	r6, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	f101 0c14 	add.w	ip, r1, #20
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f8dc 0000 	ldr.w	r0, [ip]
 8009ad8:	b281      	uxth	r1, r0
 8009ada:	fb02 7101 	mla	r1, r2, r1, r7
 8009ade:	0c0f      	lsrs	r7, r1, #16
 8009ae0:	0c00      	lsrs	r0, r0, #16
 8009ae2:	fb02 7000 	mla	r0, r2, r0, r7
 8009ae6:	b289      	uxth	r1, r1
 8009ae8:	3301      	adds	r3, #1
 8009aea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009aee:	429d      	cmp	r5, r3
 8009af0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009af4:	f84c 1b04 	str.w	r1, [ip], #4
 8009af8:	dcec      	bgt.n	8009ad4 <__multadd+0x12>
 8009afa:	b1d7      	cbz	r7, 8009b32 <__multadd+0x70>
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	42ab      	cmp	r3, r5
 8009b00:	dc12      	bgt.n	8009b28 <__multadd+0x66>
 8009b02:	6861      	ldr	r1, [r4, #4]
 8009b04:	4630      	mov	r0, r6
 8009b06:	3101      	adds	r1, #1
 8009b08:	f7ff ff90 	bl	8009a2c <_Balloc>
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	3202      	adds	r2, #2
 8009b10:	f104 010c 	add.w	r1, r4, #12
 8009b14:	4680      	mov	r8, r0
 8009b16:	0092      	lsls	r2, r2, #2
 8009b18:	300c      	adds	r0, #12
 8009b1a:	f7fe fc69 	bl	80083f0 <memcpy>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7ff ffb7 	bl	8009a94 <_Bfree>
 8009b26:	4644      	mov	r4, r8
 8009b28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	615f      	str	r7, [r3, #20]
 8009b30:	6125      	str	r5, [r4, #16]
 8009b32:	4620      	mov	r0, r4
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b38 <__hi0bits>:
 8009b38:	0c02      	lsrs	r2, r0, #16
 8009b3a:	0412      	lsls	r2, r2, #16
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	b9b2      	cbnz	r2, 8009b6e <__hi0bits+0x36>
 8009b40:	0403      	lsls	r3, r0, #16
 8009b42:	2010      	movs	r0, #16
 8009b44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b48:	bf04      	itt	eq
 8009b4a:	021b      	lsleq	r3, r3, #8
 8009b4c:	3008      	addeq	r0, #8
 8009b4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b52:	bf04      	itt	eq
 8009b54:	011b      	lsleq	r3, r3, #4
 8009b56:	3004      	addeq	r0, #4
 8009b58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b5c:	bf04      	itt	eq
 8009b5e:	009b      	lsleq	r3, r3, #2
 8009b60:	3002      	addeq	r0, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	db06      	blt.n	8009b74 <__hi0bits+0x3c>
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	d503      	bpl.n	8009b72 <__hi0bits+0x3a>
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	4770      	bx	lr
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e7e8      	b.n	8009b44 <__hi0bits+0xc>
 8009b72:	2020      	movs	r0, #32
 8009b74:	4770      	bx	lr

08009b76 <__lo0bits>:
 8009b76:	6803      	ldr	r3, [r0, #0]
 8009b78:	f013 0207 	ands.w	r2, r3, #7
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	d00b      	beq.n	8009b98 <__lo0bits+0x22>
 8009b80:	07da      	lsls	r2, r3, #31
 8009b82:	d423      	bmi.n	8009bcc <__lo0bits+0x56>
 8009b84:	0798      	lsls	r0, r3, #30
 8009b86:	bf49      	itett	mi
 8009b88:	085b      	lsrmi	r3, r3, #1
 8009b8a:	089b      	lsrpl	r3, r3, #2
 8009b8c:	2001      	movmi	r0, #1
 8009b8e:	600b      	strmi	r3, [r1, #0]
 8009b90:	bf5c      	itt	pl
 8009b92:	600b      	strpl	r3, [r1, #0]
 8009b94:	2002      	movpl	r0, #2
 8009b96:	4770      	bx	lr
 8009b98:	b298      	uxth	r0, r3
 8009b9a:	b9a8      	cbnz	r0, 8009bc8 <__lo0bits+0x52>
 8009b9c:	0c1b      	lsrs	r3, r3, #16
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ba4:	bf04      	itt	eq
 8009ba6:	0a1b      	lsreq	r3, r3, #8
 8009ba8:	3008      	addeq	r0, #8
 8009baa:	071a      	lsls	r2, r3, #28
 8009bac:	bf04      	itt	eq
 8009bae:	091b      	lsreq	r3, r3, #4
 8009bb0:	3004      	addeq	r0, #4
 8009bb2:	079a      	lsls	r2, r3, #30
 8009bb4:	bf04      	itt	eq
 8009bb6:	089b      	lsreq	r3, r3, #2
 8009bb8:	3002      	addeq	r0, #2
 8009bba:	07da      	lsls	r2, r3, #31
 8009bbc:	d402      	bmi.n	8009bc4 <__lo0bits+0x4e>
 8009bbe:	085b      	lsrs	r3, r3, #1
 8009bc0:	d006      	beq.n	8009bd0 <__lo0bits+0x5a>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	600b      	str	r3, [r1, #0]
 8009bc6:	4770      	bx	lr
 8009bc8:	4610      	mov	r0, r2
 8009bca:	e7e9      	b.n	8009ba0 <__lo0bits+0x2a>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	4770      	bx	lr
 8009bd0:	2020      	movs	r0, #32
 8009bd2:	4770      	bx	lr

08009bd4 <__i2b>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	2101      	movs	r1, #1
 8009bda:	f7ff ff27 	bl	8009a2c <_Balloc>
 8009bde:	2201      	movs	r2, #1
 8009be0:	6144      	str	r4, [r0, #20]
 8009be2:	6102      	str	r2, [r0, #16]
 8009be4:	bd10      	pop	{r4, pc}

08009be6 <__multiply>:
 8009be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	4614      	mov	r4, r2
 8009bec:	690a      	ldr	r2, [r1, #16]
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	bfb8      	it	lt
 8009bf4:	460b      	movlt	r3, r1
 8009bf6:	4688      	mov	r8, r1
 8009bf8:	bfbc      	itt	lt
 8009bfa:	46a0      	movlt	r8, r4
 8009bfc:	461c      	movlt	r4, r3
 8009bfe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c02:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c0a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c0e:	eb07 0609 	add.w	r6, r7, r9
 8009c12:	42b3      	cmp	r3, r6
 8009c14:	bfb8      	it	lt
 8009c16:	3101      	addlt	r1, #1
 8009c18:	f7ff ff08 	bl	8009a2c <_Balloc>
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c24:	462b      	mov	r3, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	4573      	cmp	r3, lr
 8009c2a:	d316      	bcc.n	8009c5a <__multiply+0x74>
 8009c2c:	f104 0214 	add.w	r2, r4, #20
 8009c30:	f108 0114 	add.w	r1, r8, #20
 8009c34:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c38:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	9201      	str	r2, [sp, #4]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d80c      	bhi.n	8009c60 <__multiply+0x7a>
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	dd03      	ble.n	8009c52 <__multiply+0x6c>
 8009c4a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05d      	beq.n	8009d0e <__multiply+0x128>
 8009c52:	6106      	str	r6, [r0, #16]
 8009c54:	b003      	add	sp, #12
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	f843 2b04 	str.w	r2, [r3], #4
 8009c5e:	e7e3      	b.n	8009c28 <__multiply+0x42>
 8009c60:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c64:	f1bb 0f00 	cmp.w	fp, #0
 8009c68:	d023      	beq.n	8009cb2 <__multiply+0xcc>
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	46ac      	mov	ip, r5
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c76:	f8dc a000 	ldr.w	sl, [ip]
 8009c7a:	b2a3      	uxth	r3, r4
 8009c7c:	fa1f fa8a 	uxth.w	sl, sl
 8009c80:	fb0b a303 	mla	r3, fp, r3, sl
 8009c84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c88:	f8dc 4000 	ldr.w	r4, [ip]
 8009c8c:	4443      	add	r3, r8
 8009c8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c92:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c96:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c9a:	46e2      	mov	sl, ip
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ca2:	454f      	cmp	r7, r9
 8009ca4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ca8:	f84a 3b04 	str.w	r3, [sl], #4
 8009cac:	d82b      	bhi.n	8009d06 <__multiply+0x120>
 8009cae:	f8cc 8004 	str.w	r8, [ip, #4]
 8009cb2:	9b01      	ldr	r3, [sp, #4]
 8009cb4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009cb8:	3204      	adds	r2, #4
 8009cba:	f1ba 0f00 	cmp.w	sl, #0
 8009cbe:	d020      	beq.n	8009d02 <__multiply+0x11c>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	4689      	mov	r9, r1
 8009cc4:	46a8      	mov	r8, r5
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	f8b9 c000 	ldrh.w	ip, [r9]
 8009cce:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009cd2:	fb0a 440c 	mla	r4, sl, ip, r4
 8009cd6:	445c      	add	r4, fp
 8009cd8:	46c4      	mov	ip, r8
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ce0:	f84c 3b04 	str.w	r3, [ip], #4
 8009ce4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ce8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009cec:	0c1b      	lsrs	r3, r3, #16
 8009cee:	fb0a b303 	mla	r3, sl, r3, fp
 8009cf2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cf6:	454f      	cmp	r7, r9
 8009cf8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009cfc:	d805      	bhi.n	8009d0a <__multiply+0x124>
 8009cfe:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d02:	3504      	adds	r5, #4
 8009d04:	e79b      	b.n	8009c3e <__multiply+0x58>
 8009d06:	46d4      	mov	ip, sl
 8009d08:	e7b3      	b.n	8009c72 <__multiply+0x8c>
 8009d0a:	46e0      	mov	r8, ip
 8009d0c:	e7dd      	b.n	8009cca <__multiply+0xe4>
 8009d0e:	3e01      	subs	r6, #1
 8009d10:	e799      	b.n	8009c46 <__multiply+0x60>
	...

08009d14 <__pow5mult>:
 8009d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d18:	4615      	mov	r5, r2
 8009d1a:	f012 0203 	ands.w	r2, r2, #3
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	d007      	beq.n	8009d34 <__pow5mult+0x20>
 8009d24:	3a01      	subs	r2, #1
 8009d26:	4c21      	ldr	r4, [pc, #132]	; (8009dac <__pow5mult+0x98>)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d2e:	f7ff fec8 	bl	8009ac2 <__multadd>
 8009d32:	4607      	mov	r7, r0
 8009d34:	10ad      	asrs	r5, r5, #2
 8009d36:	d035      	beq.n	8009da4 <__pow5mult+0x90>
 8009d38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d3a:	b93c      	cbnz	r4, 8009d4c <__pow5mult+0x38>
 8009d3c:	2010      	movs	r0, #16
 8009d3e:	f7ff fe6d 	bl	8009a1c <malloc>
 8009d42:	6270      	str	r0, [r6, #36]	; 0x24
 8009d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d48:	6004      	str	r4, [r0, #0]
 8009d4a:	60c4      	str	r4, [r0, #12]
 8009d4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d54:	b94c      	cbnz	r4, 8009d6a <__pow5mult+0x56>
 8009d56:	f240 2171 	movw	r1, #625	; 0x271
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ff3a 	bl	8009bd4 <__i2b>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d66:	4604      	mov	r4, r0
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	07eb      	lsls	r3, r5, #31
 8009d70:	d50a      	bpl.n	8009d88 <__pow5mult+0x74>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4622      	mov	r2, r4
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff35 	bl	8009be6 <__multiply>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	4681      	mov	r9, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fe87 	bl	8009a94 <_Bfree>
 8009d86:	464f      	mov	r7, r9
 8009d88:	106d      	asrs	r5, r5, #1
 8009d8a:	d00b      	beq.n	8009da4 <__pow5mult+0x90>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	b938      	cbnz	r0, 8009da0 <__pow5mult+0x8c>
 8009d90:	4622      	mov	r2, r4
 8009d92:	4621      	mov	r1, r4
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff ff26 	bl	8009be6 <__multiply>
 8009d9a:	6020      	str	r0, [r4, #0]
 8009d9c:	f8c0 8000 	str.w	r8, [r0]
 8009da0:	4604      	mov	r4, r0
 8009da2:	e7e4      	b.n	8009d6e <__pow5mult+0x5a>
 8009da4:	4638      	mov	r0, r7
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	bf00      	nop
 8009dac:	0800ac60 	.word	0x0800ac60

08009db0 <__lshift>:
 8009db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db4:	460c      	mov	r4, r1
 8009db6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	6849      	ldr	r1, [r1, #4]
 8009dbe:	eb0a 0903 	add.w	r9, sl, r3
 8009dc2:	68a3      	ldr	r3, [r4, #8]
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	4616      	mov	r6, r2
 8009dc8:	f109 0501 	add.w	r5, r9, #1
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	db32      	blt.n	8009e36 <__lshift+0x86>
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff fe2b 	bl	8009a2c <_Balloc>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4680      	mov	r8, r0
 8009dda:	f100 0114 	add.w	r1, r0, #20
 8009dde:	461a      	mov	r2, r3
 8009de0:	4553      	cmp	r3, sl
 8009de2:	db2b      	blt.n	8009e3c <__lshift+0x8c>
 8009de4:	6920      	ldr	r0, [r4, #16]
 8009de6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dea:	f104 0314 	add.w	r3, r4, #20
 8009dee:	f016 021f 	ands.w	r2, r6, #31
 8009df2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009df6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dfa:	d025      	beq.n	8009e48 <__lshift+0x98>
 8009dfc:	f1c2 0e20 	rsb	lr, r2, #32
 8009e00:	2000      	movs	r0, #0
 8009e02:	681e      	ldr	r6, [r3, #0]
 8009e04:	468a      	mov	sl, r1
 8009e06:	4096      	lsls	r6, r2
 8009e08:	4330      	orrs	r0, r6
 8009e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e0e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e12:	459c      	cmp	ip, r3
 8009e14:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e18:	d814      	bhi.n	8009e44 <__lshift+0x94>
 8009e1a:	6048      	str	r0, [r1, #4]
 8009e1c:	b108      	cbz	r0, 8009e22 <__lshift+0x72>
 8009e1e:	f109 0502 	add.w	r5, r9, #2
 8009e22:	3d01      	subs	r5, #1
 8009e24:	4638      	mov	r0, r7
 8009e26:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	f7ff fe32 	bl	8009a94 <_Bfree>
 8009e30:	4640      	mov	r0, r8
 8009e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e36:	3101      	adds	r1, #1
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	e7c7      	b.n	8009dcc <__lshift+0x1c>
 8009e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e40:	3301      	adds	r3, #1
 8009e42:	e7cd      	b.n	8009de0 <__lshift+0x30>
 8009e44:	4651      	mov	r1, sl
 8009e46:	e7dc      	b.n	8009e02 <__lshift+0x52>
 8009e48:	3904      	subs	r1, #4
 8009e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e52:	459c      	cmp	ip, r3
 8009e54:	d8f9      	bhi.n	8009e4a <__lshift+0x9a>
 8009e56:	e7e4      	b.n	8009e22 <__lshift+0x72>

08009e58 <__mcmp>:
 8009e58:	6903      	ldr	r3, [r0, #16]
 8009e5a:	690a      	ldr	r2, [r1, #16]
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	b530      	push	{r4, r5, lr}
 8009e60:	d10c      	bne.n	8009e7c <__mcmp+0x24>
 8009e62:	0092      	lsls	r2, r2, #2
 8009e64:	3014      	adds	r0, #20
 8009e66:	3114      	adds	r1, #20
 8009e68:	1884      	adds	r4, r0, r2
 8009e6a:	4411      	add	r1, r2
 8009e6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e74:	4295      	cmp	r5, r2
 8009e76:	d003      	beq.n	8009e80 <__mcmp+0x28>
 8009e78:	d305      	bcc.n	8009e86 <__mcmp+0x2e>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	bd30      	pop	{r4, r5, pc}
 8009e80:	42a0      	cmp	r0, r4
 8009e82:	d3f3      	bcc.n	8009e6c <__mcmp+0x14>
 8009e84:	e7fa      	b.n	8009e7c <__mcmp+0x24>
 8009e86:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8a:	e7f7      	b.n	8009e7c <__mcmp+0x24>

08009e8c <__mdiff>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	460d      	mov	r5, r1
 8009e92:	4607      	mov	r7, r0
 8009e94:	4611      	mov	r1, r2
 8009e96:	4628      	mov	r0, r5
 8009e98:	4614      	mov	r4, r2
 8009e9a:	f7ff ffdd 	bl	8009e58 <__mcmp>
 8009e9e:	1e06      	subs	r6, r0, #0
 8009ea0:	d108      	bne.n	8009eb4 <__mdiff+0x28>
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff fdc1 	bl	8009a2c <_Balloc>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb4:	bfa4      	itt	ge
 8009eb6:	4623      	movge	r3, r4
 8009eb8:	462c      	movge	r4, r5
 8009eba:	4638      	mov	r0, r7
 8009ebc:	6861      	ldr	r1, [r4, #4]
 8009ebe:	bfa6      	itte	ge
 8009ec0:	461d      	movge	r5, r3
 8009ec2:	2600      	movge	r6, #0
 8009ec4:	2601      	movlt	r6, #1
 8009ec6:	f7ff fdb1 	bl	8009a2c <_Balloc>
 8009eca:	692b      	ldr	r3, [r5, #16]
 8009ecc:	60c6      	str	r6, [r0, #12]
 8009ece:	6926      	ldr	r6, [r4, #16]
 8009ed0:	f105 0914 	add.w	r9, r5, #20
 8009ed4:	f104 0214 	add.w	r2, r4, #20
 8009ed8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009edc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ee0:	f100 0514 	add.w	r5, r0, #20
 8009ee4:	f04f 0e00 	mov.w	lr, #0
 8009ee8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009eec:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ef0:	fa1e f18a 	uxtah	r1, lr, sl
 8009ef4:	b2a3      	uxth	r3, r4
 8009ef6:	1ac9      	subs	r1, r1, r3
 8009ef8:	0c23      	lsrs	r3, r4, #16
 8009efa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009efe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009f02:	b289      	uxth	r1, r1
 8009f04:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f08:	45c8      	cmp	r8, r9
 8009f0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009f0e:	4694      	mov	ip, r2
 8009f10:	f845 3b04 	str.w	r3, [r5], #4
 8009f14:	d8e8      	bhi.n	8009ee8 <__mdiff+0x5c>
 8009f16:	45bc      	cmp	ip, r7
 8009f18:	d304      	bcc.n	8009f24 <__mdiff+0x98>
 8009f1a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009f1e:	b183      	cbz	r3, 8009f42 <__mdiff+0xb6>
 8009f20:	6106      	str	r6, [r0, #16]
 8009f22:	e7c5      	b.n	8009eb0 <__mdiff+0x24>
 8009f24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f28:	fa1e f381 	uxtah	r3, lr, r1
 8009f2c:	141a      	asrs	r2, r3, #16
 8009f2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f38:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009f3c:	f845 3b04 	str.w	r3, [r5], #4
 8009f40:	e7e9      	b.n	8009f16 <__mdiff+0x8a>
 8009f42:	3e01      	subs	r6, #1
 8009f44:	e7e9      	b.n	8009f1a <__mdiff+0x8e>

08009f46 <__d2b>:
 8009f46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f4a:	460e      	mov	r6, r1
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	ec59 8b10 	vmov	r8, r9, d0
 8009f52:	4615      	mov	r5, r2
 8009f54:	f7ff fd6a 	bl	8009a2c <_Balloc>
 8009f58:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f62:	bb34      	cbnz	r4, 8009fb2 <__d2b+0x6c>
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	f1b8 0300 	subs.w	r3, r8, #0
 8009f6a:	d027      	beq.n	8009fbc <__d2b+0x76>
 8009f6c:	a802      	add	r0, sp, #8
 8009f6e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009f72:	f7ff fe00 	bl	8009b76 <__lo0bits>
 8009f76:	9900      	ldr	r1, [sp, #0]
 8009f78:	b1f0      	cbz	r0, 8009fb8 <__d2b+0x72>
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	f1c0 0320 	rsb	r3, r0, #32
 8009f80:	fa02 f303 	lsl.w	r3, r2, r3
 8009f84:	430b      	orrs	r3, r1
 8009f86:	40c2      	lsrs	r2, r0
 8009f88:	617b      	str	r3, [r7, #20]
 8009f8a:	9201      	str	r2, [sp, #4]
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	61bb      	str	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	bf14      	ite	ne
 8009f94:	2102      	movne	r1, #2
 8009f96:	2101      	moveq	r1, #1
 8009f98:	6139      	str	r1, [r7, #16]
 8009f9a:	b1c4      	cbz	r4, 8009fce <__d2b+0x88>
 8009f9c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009fa0:	4404      	add	r4, r0
 8009fa2:	6034      	str	r4, [r6, #0]
 8009fa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fa8:	6028      	str	r0, [r5, #0]
 8009faa:	4638      	mov	r0, r7
 8009fac:	b003      	add	sp, #12
 8009fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb6:	e7d5      	b.n	8009f64 <__d2b+0x1e>
 8009fb8:	6179      	str	r1, [r7, #20]
 8009fba:	e7e7      	b.n	8009f8c <__d2b+0x46>
 8009fbc:	a801      	add	r0, sp, #4
 8009fbe:	f7ff fdda 	bl	8009b76 <__lo0bits>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	617b      	str	r3, [r7, #20]
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	6139      	str	r1, [r7, #16]
 8009fca:	3020      	adds	r0, #32
 8009fcc:	e7e5      	b.n	8009f9a <__d2b+0x54>
 8009fce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fd6:	6030      	str	r0, [r6, #0]
 8009fd8:	6918      	ldr	r0, [r3, #16]
 8009fda:	f7ff fdad 	bl	8009b38 <__hi0bits>
 8009fde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fe2:	e7e1      	b.n	8009fa8 <__d2b+0x62>

08009fe4 <_calloc_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	fb02 f401 	mul.w	r4, r2, r1
 8009fea:	4621      	mov	r1, r4
 8009fec:	f000 f856 	bl	800a09c <_malloc_r>
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	b118      	cbz	r0, 8009ffc <_calloc_r+0x18>
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	f7fe fa05 	bl	8008406 <memset>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}

0800a000 <_free_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4605      	mov	r5, r0
 800a004:	2900      	cmp	r1, #0
 800a006:	d045      	beq.n	800a094 <_free_r+0x94>
 800a008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a00c:	1f0c      	subs	r4, r1, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	bfb8      	it	lt
 800a012:	18e4      	addlt	r4, r4, r3
 800a014:	f000 fa29 	bl	800a46a <__malloc_lock>
 800a018:	4a1f      	ldr	r2, [pc, #124]	; (800a098 <_free_r+0x98>)
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	4610      	mov	r0, r2
 800a01e:	b933      	cbnz	r3, 800a02e <_free_r+0x2e>
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	6014      	str	r4, [r2, #0]
 800a024:	4628      	mov	r0, r5
 800a026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a02a:	f000 ba1f 	b.w	800a46c <__malloc_unlock>
 800a02e:	42a3      	cmp	r3, r4
 800a030:	d90c      	bls.n	800a04c <_free_r+0x4c>
 800a032:	6821      	ldr	r1, [r4, #0]
 800a034:	1862      	adds	r2, r4, r1
 800a036:	4293      	cmp	r3, r2
 800a038:	bf04      	itt	eq
 800a03a:	681a      	ldreq	r2, [r3, #0]
 800a03c:	685b      	ldreq	r3, [r3, #4]
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	bf04      	itt	eq
 800a042:	1852      	addeq	r2, r2, r1
 800a044:	6022      	streq	r2, [r4, #0]
 800a046:	6004      	str	r4, [r0, #0]
 800a048:	e7ec      	b.n	800a024 <_free_r+0x24>
 800a04a:	4613      	mov	r3, r2
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	b10a      	cbz	r2, 800a054 <_free_r+0x54>
 800a050:	42a2      	cmp	r2, r4
 800a052:	d9fa      	bls.n	800a04a <_free_r+0x4a>
 800a054:	6819      	ldr	r1, [r3, #0]
 800a056:	1858      	adds	r0, r3, r1
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d10b      	bne.n	800a074 <_free_r+0x74>
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	4401      	add	r1, r0
 800a060:	1858      	adds	r0, r3, r1
 800a062:	4282      	cmp	r2, r0
 800a064:	6019      	str	r1, [r3, #0]
 800a066:	d1dd      	bne.n	800a024 <_free_r+0x24>
 800a068:	6810      	ldr	r0, [r2, #0]
 800a06a:	6852      	ldr	r2, [r2, #4]
 800a06c:	605a      	str	r2, [r3, #4]
 800a06e:	4401      	add	r1, r0
 800a070:	6019      	str	r1, [r3, #0]
 800a072:	e7d7      	b.n	800a024 <_free_r+0x24>
 800a074:	d902      	bls.n	800a07c <_free_r+0x7c>
 800a076:	230c      	movs	r3, #12
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	e7d3      	b.n	800a024 <_free_r+0x24>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	1821      	adds	r1, r4, r0
 800a080:	428a      	cmp	r2, r1
 800a082:	bf04      	itt	eq
 800a084:	6811      	ldreq	r1, [r2, #0]
 800a086:	6852      	ldreq	r2, [r2, #4]
 800a088:	6062      	str	r2, [r4, #4]
 800a08a:	bf04      	itt	eq
 800a08c:	1809      	addeq	r1, r1, r0
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	605c      	str	r4, [r3, #4]
 800a092:	e7c7      	b.n	800a024 <_free_r+0x24>
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	200042bc 	.word	0x200042bc

0800a09c <_malloc_r>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	1ccd      	adds	r5, r1, #3
 800a0a0:	f025 0503 	bic.w	r5, r5, #3
 800a0a4:	3508      	adds	r5, #8
 800a0a6:	2d0c      	cmp	r5, #12
 800a0a8:	bf38      	it	cc
 800a0aa:	250c      	movcc	r5, #12
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	db01      	blt.n	800a0b6 <_malloc_r+0x1a>
 800a0b2:	42a9      	cmp	r1, r5
 800a0b4:	d903      	bls.n	800a0be <_malloc_r+0x22>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	bd70      	pop	{r4, r5, r6, pc}
 800a0be:	f000 f9d4 	bl	800a46a <__malloc_lock>
 800a0c2:	4a21      	ldr	r2, [pc, #132]	; (800a148 <_malloc_r+0xac>)
 800a0c4:	6814      	ldr	r4, [r2, #0]
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	b991      	cbnz	r1, 800a0f0 <_malloc_r+0x54>
 800a0ca:	4c20      	ldr	r4, [pc, #128]	; (800a14c <_malloc_r+0xb0>)
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	b91b      	cbnz	r3, 800a0d8 <_malloc_r+0x3c>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f98f 	bl	800a3f4 <_sbrk_r>
 800a0d6:	6020      	str	r0, [r4, #0]
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f98a 	bl	800a3f4 <_sbrk_r>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d124      	bne.n	800a12e <_malloc_r+0x92>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	6033      	str	r3, [r6, #0]
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f000 f9bf 	bl	800a46c <__malloc_unlock>
 800a0ee:	e7e4      	b.n	800a0ba <_malloc_r+0x1e>
 800a0f0:	680b      	ldr	r3, [r1, #0]
 800a0f2:	1b5b      	subs	r3, r3, r5
 800a0f4:	d418      	bmi.n	800a128 <_malloc_r+0x8c>
 800a0f6:	2b0b      	cmp	r3, #11
 800a0f8:	d90f      	bls.n	800a11a <_malloc_r+0x7e>
 800a0fa:	600b      	str	r3, [r1, #0]
 800a0fc:	50cd      	str	r5, [r1, r3]
 800a0fe:	18cc      	adds	r4, r1, r3
 800a100:	4630      	mov	r0, r6
 800a102:	f000 f9b3 	bl	800a46c <__malloc_unlock>
 800a106:	f104 000b 	add.w	r0, r4, #11
 800a10a:	1d23      	adds	r3, r4, #4
 800a10c:	f020 0007 	bic.w	r0, r0, #7
 800a110:	1ac3      	subs	r3, r0, r3
 800a112:	d0d3      	beq.n	800a0bc <_malloc_r+0x20>
 800a114:	425a      	negs	r2, r3
 800a116:	50e2      	str	r2, [r4, r3]
 800a118:	e7d0      	b.n	800a0bc <_malloc_r+0x20>
 800a11a:	428c      	cmp	r4, r1
 800a11c:	684b      	ldr	r3, [r1, #4]
 800a11e:	bf16      	itet	ne
 800a120:	6063      	strne	r3, [r4, #4]
 800a122:	6013      	streq	r3, [r2, #0]
 800a124:	460c      	movne	r4, r1
 800a126:	e7eb      	b.n	800a100 <_malloc_r+0x64>
 800a128:	460c      	mov	r4, r1
 800a12a:	6849      	ldr	r1, [r1, #4]
 800a12c:	e7cc      	b.n	800a0c8 <_malloc_r+0x2c>
 800a12e:	1cc4      	adds	r4, r0, #3
 800a130:	f024 0403 	bic.w	r4, r4, #3
 800a134:	42a0      	cmp	r0, r4
 800a136:	d005      	beq.n	800a144 <_malloc_r+0xa8>
 800a138:	1a21      	subs	r1, r4, r0
 800a13a:	4630      	mov	r0, r6
 800a13c:	f000 f95a 	bl	800a3f4 <_sbrk_r>
 800a140:	3001      	adds	r0, #1
 800a142:	d0cf      	beq.n	800a0e4 <_malloc_r+0x48>
 800a144:	6025      	str	r5, [r4, #0]
 800a146:	e7db      	b.n	800a100 <_malloc_r+0x64>
 800a148:	200042bc 	.word	0x200042bc
 800a14c:	200042c0 	.word	0x200042c0

0800a150 <__ssputs_r>:
 800a150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a154:	688e      	ldr	r6, [r1, #8]
 800a156:	429e      	cmp	r6, r3
 800a158:	4682      	mov	sl, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	4690      	mov	r8, r2
 800a15e:	4699      	mov	r9, r3
 800a160:	d837      	bhi.n	800a1d2 <__ssputs_r+0x82>
 800a162:	898a      	ldrh	r2, [r1, #12]
 800a164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a168:	d031      	beq.n	800a1ce <__ssputs_r+0x7e>
 800a16a:	6825      	ldr	r5, [r4, #0]
 800a16c:	6909      	ldr	r1, [r1, #16]
 800a16e:	1a6f      	subs	r7, r5, r1
 800a170:	6965      	ldr	r5, [r4, #20]
 800a172:	2302      	movs	r3, #2
 800a174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a178:	fb95 f5f3 	sdiv	r5, r5, r3
 800a17c:	f109 0301 	add.w	r3, r9, #1
 800a180:	443b      	add	r3, r7
 800a182:	429d      	cmp	r5, r3
 800a184:	bf38      	it	cc
 800a186:	461d      	movcc	r5, r3
 800a188:	0553      	lsls	r3, r2, #21
 800a18a:	d530      	bpl.n	800a1ee <__ssputs_r+0x9e>
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7ff ff85 	bl	800a09c <_malloc_r>
 800a192:	4606      	mov	r6, r0
 800a194:	b950      	cbnz	r0, 800a1ac <__ssputs_r+0x5c>
 800a196:	230c      	movs	r3, #12
 800a198:	f8ca 3000 	str.w	r3, [sl]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	6921      	ldr	r1, [r4, #16]
 800a1b0:	f7fe f91e 	bl	80083f0 <memcpy>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	6126      	str	r6, [r4, #16]
 800a1c2:	6165      	str	r5, [r4, #20]
 800a1c4:	443e      	add	r6, r7
 800a1c6:	1bed      	subs	r5, r5, r7
 800a1c8:	6026      	str	r6, [r4, #0]
 800a1ca:	60a5      	str	r5, [r4, #8]
 800a1cc:	464e      	mov	r6, r9
 800a1ce:	454e      	cmp	r6, r9
 800a1d0:	d900      	bls.n	800a1d4 <__ssputs_r+0x84>
 800a1d2:	464e      	mov	r6, r9
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	4641      	mov	r1, r8
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	f000 f92d 	bl	800a438 <memmove>
 800a1de:	68a3      	ldr	r3, [r4, #8]
 800a1e0:	1b9b      	subs	r3, r3, r6
 800a1e2:	60a3      	str	r3, [r4, #8]
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	441e      	add	r6, r3
 800a1e8:	6026      	str	r6, [r4, #0]
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e7dc      	b.n	800a1a8 <__ssputs_r+0x58>
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	f000 f93d 	bl	800a46e <_realloc_r>
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d1e2      	bne.n	800a1c0 <__ssputs_r+0x70>
 800a1fa:	6921      	ldr	r1, [r4, #16]
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	f7ff feff 	bl	800a000 <_free_r>
 800a202:	e7c8      	b.n	800a196 <__ssputs_r+0x46>

0800a204 <_svfiprintf_r>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	461d      	mov	r5, r3
 800a20a:	898b      	ldrh	r3, [r1, #12]
 800a20c:	061f      	lsls	r7, r3, #24
 800a20e:	b09d      	sub	sp, #116	; 0x74
 800a210:	4680      	mov	r8, r0
 800a212:	460c      	mov	r4, r1
 800a214:	4616      	mov	r6, r2
 800a216:	d50f      	bpl.n	800a238 <_svfiprintf_r+0x34>
 800a218:	690b      	ldr	r3, [r1, #16]
 800a21a:	b96b      	cbnz	r3, 800a238 <_svfiprintf_r+0x34>
 800a21c:	2140      	movs	r1, #64	; 0x40
 800a21e:	f7ff ff3d 	bl	800a09c <_malloc_r>
 800a222:	6020      	str	r0, [r4, #0]
 800a224:	6120      	str	r0, [r4, #16]
 800a226:	b928      	cbnz	r0, 800a234 <_svfiprintf_r+0x30>
 800a228:	230c      	movs	r3, #12
 800a22a:	f8c8 3000 	str.w	r3, [r8]
 800a22e:	f04f 30ff 	mov.w	r0, #4294967295
 800a232:	e0c8      	b.n	800a3c6 <_svfiprintf_r+0x1c2>
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	6163      	str	r3, [r4, #20]
 800a238:	2300      	movs	r3, #0
 800a23a:	9309      	str	r3, [sp, #36]	; 0x24
 800a23c:	2320      	movs	r3, #32
 800a23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a242:	2330      	movs	r3, #48	; 0x30
 800a244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a248:	9503      	str	r5, [sp, #12]
 800a24a:	f04f 0b01 	mov.w	fp, #1
 800a24e:	4637      	mov	r7, r6
 800a250:	463d      	mov	r5, r7
 800a252:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a256:	b10b      	cbz	r3, 800a25c <_svfiprintf_r+0x58>
 800a258:	2b25      	cmp	r3, #37	; 0x25
 800a25a:	d13e      	bne.n	800a2da <_svfiprintf_r+0xd6>
 800a25c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a260:	d00b      	beq.n	800a27a <_svfiprintf_r+0x76>
 800a262:	4653      	mov	r3, sl
 800a264:	4632      	mov	r2, r6
 800a266:	4621      	mov	r1, r4
 800a268:	4640      	mov	r0, r8
 800a26a:	f7ff ff71 	bl	800a150 <__ssputs_r>
 800a26e:	3001      	adds	r0, #1
 800a270:	f000 80a4 	beq.w	800a3bc <_svfiprintf_r+0x1b8>
 800a274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a276:	4453      	add	r3, sl
 800a278:	9309      	str	r3, [sp, #36]	; 0x24
 800a27a:	783b      	ldrb	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 809d 	beq.w	800a3bc <_svfiprintf_r+0x1b8>
 800a282:	2300      	movs	r3, #0
 800a284:	f04f 32ff 	mov.w	r2, #4294967295
 800a288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	9307      	str	r3, [sp, #28]
 800a290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a294:	931a      	str	r3, [sp, #104]	; 0x68
 800a296:	462f      	mov	r7, r5
 800a298:	2205      	movs	r2, #5
 800a29a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a29e:	4850      	ldr	r0, [pc, #320]	; (800a3e0 <_svfiprintf_r+0x1dc>)
 800a2a0:	f7f5 ffbe 	bl	8000220 <memchr>
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	b9d0      	cbnz	r0, 800a2de <_svfiprintf_r+0xda>
 800a2a8:	06d9      	lsls	r1, r3, #27
 800a2aa:	bf44      	itt	mi
 800a2ac:	2220      	movmi	r2, #32
 800a2ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2b2:	071a      	lsls	r2, r3, #28
 800a2b4:	bf44      	itt	mi
 800a2b6:	222b      	movmi	r2, #43	; 0x2b
 800a2b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2bc:	782a      	ldrb	r2, [r5, #0]
 800a2be:	2a2a      	cmp	r2, #42	; 0x2a
 800a2c0:	d015      	beq.n	800a2ee <_svfiprintf_r+0xea>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	462f      	mov	r7, r5
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	250a      	movs	r5, #10
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d0:	3b30      	subs	r3, #48	; 0x30
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d94d      	bls.n	800a372 <_svfiprintf_r+0x16e>
 800a2d6:	b1b8      	cbz	r0, 800a308 <_svfiprintf_r+0x104>
 800a2d8:	e00f      	b.n	800a2fa <_svfiprintf_r+0xf6>
 800a2da:	462f      	mov	r7, r5
 800a2dc:	e7b8      	b.n	800a250 <_svfiprintf_r+0x4c>
 800a2de:	4a40      	ldr	r2, [pc, #256]	; (800a3e0 <_svfiprintf_r+0x1dc>)
 800a2e0:	1a80      	subs	r0, r0, r2
 800a2e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a2e6:	4318      	orrs	r0, r3
 800a2e8:	9004      	str	r0, [sp, #16]
 800a2ea:	463d      	mov	r5, r7
 800a2ec:	e7d3      	b.n	800a296 <_svfiprintf_r+0x92>
 800a2ee:	9a03      	ldr	r2, [sp, #12]
 800a2f0:	1d11      	adds	r1, r2, #4
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	9103      	str	r1, [sp, #12]
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	db01      	blt.n	800a2fe <_svfiprintf_r+0xfa>
 800a2fa:	9207      	str	r2, [sp, #28]
 800a2fc:	e004      	b.n	800a308 <_svfiprintf_r+0x104>
 800a2fe:	4252      	negs	r2, r2
 800a300:	f043 0302 	orr.w	r3, r3, #2
 800a304:	9207      	str	r2, [sp, #28]
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	783b      	ldrb	r3, [r7, #0]
 800a30a:	2b2e      	cmp	r3, #46	; 0x2e
 800a30c:	d10c      	bne.n	800a328 <_svfiprintf_r+0x124>
 800a30e:	787b      	ldrb	r3, [r7, #1]
 800a310:	2b2a      	cmp	r3, #42	; 0x2a
 800a312:	d133      	bne.n	800a37c <_svfiprintf_r+0x178>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9203      	str	r2, [sp, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfb8      	it	lt
 800a320:	f04f 33ff 	movlt.w	r3, #4294967295
 800a324:	3702      	adds	r7, #2
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	4d2e      	ldr	r5, [pc, #184]	; (800a3e4 <_svfiprintf_r+0x1e0>)
 800a32a:	7839      	ldrb	r1, [r7, #0]
 800a32c:	2203      	movs	r2, #3
 800a32e:	4628      	mov	r0, r5
 800a330:	f7f5 ff76 	bl	8000220 <memchr>
 800a334:	b138      	cbz	r0, 800a346 <_svfiprintf_r+0x142>
 800a336:	2340      	movs	r3, #64	; 0x40
 800a338:	1b40      	subs	r0, r0, r5
 800a33a:	fa03 f000 	lsl.w	r0, r3, r0
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	4303      	orrs	r3, r0
 800a342:	3701      	adds	r7, #1
 800a344:	9304      	str	r3, [sp, #16]
 800a346:	7839      	ldrb	r1, [r7, #0]
 800a348:	4827      	ldr	r0, [pc, #156]	; (800a3e8 <_svfiprintf_r+0x1e4>)
 800a34a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a34e:	2206      	movs	r2, #6
 800a350:	1c7e      	adds	r6, r7, #1
 800a352:	f7f5 ff65 	bl	8000220 <memchr>
 800a356:	2800      	cmp	r0, #0
 800a358:	d038      	beq.n	800a3cc <_svfiprintf_r+0x1c8>
 800a35a:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <_svfiprintf_r+0x1e8>)
 800a35c:	bb13      	cbnz	r3, 800a3a4 <_svfiprintf_r+0x1a0>
 800a35e:	9b03      	ldr	r3, [sp, #12]
 800a360:	3307      	adds	r3, #7
 800a362:	f023 0307 	bic.w	r3, r3, #7
 800a366:	3308      	adds	r3, #8
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	444b      	add	r3, r9
 800a36e:	9309      	str	r3, [sp, #36]	; 0x24
 800a370:	e76d      	b.n	800a24e <_svfiprintf_r+0x4a>
 800a372:	fb05 3202 	mla	r2, r5, r2, r3
 800a376:	2001      	movs	r0, #1
 800a378:	460f      	mov	r7, r1
 800a37a:	e7a6      	b.n	800a2ca <_svfiprintf_r+0xc6>
 800a37c:	2300      	movs	r3, #0
 800a37e:	3701      	adds	r7, #1
 800a380:	9305      	str	r3, [sp, #20]
 800a382:	4619      	mov	r1, r3
 800a384:	250a      	movs	r5, #10
 800a386:	4638      	mov	r0, r7
 800a388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38c:	3a30      	subs	r2, #48	; 0x30
 800a38e:	2a09      	cmp	r2, #9
 800a390:	d903      	bls.n	800a39a <_svfiprintf_r+0x196>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0c8      	beq.n	800a328 <_svfiprintf_r+0x124>
 800a396:	9105      	str	r1, [sp, #20]
 800a398:	e7c6      	b.n	800a328 <_svfiprintf_r+0x124>
 800a39a:	fb05 2101 	mla	r1, r5, r1, r2
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	e7f0      	b.n	800a386 <_svfiprintf_r+0x182>
 800a3a4:	ab03      	add	r3, sp, #12
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <_svfiprintf_r+0x1ec>)
 800a3ac:	a904      	add	r1, sp, #16
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	f7fe f8c6 	bl	8008540 <_printf_float>
 800a3b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a3b8:	4681      	mov	r9, r0
 800a3ba:	d1d6      	bne.n	800a36a <_svfiprintf_r+0x166>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	065b      	lsls	r3, r3, #25
 800a3c0:	f53f af35 	bmi.w	800a22e <_svfiprintf_r+0x2a>
 800a3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3c6:	b01d      	add	sp, #116	; 0x74
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	ab03      	add	r3, sp, #12
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <_svfiprintf_r+0x1ec>)
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f7fe fb68 	bl	8008aac <_printf_i>
 800a3dc:	e7ea      	b.n	800a3b4 <_svfiprintf_r+0x1b0>
 800a3de:	bf00      	nop
 800a3e0:	0800ac6c 	.word	0x0800ac6c
 800a3e4:	0800ac72 	.word	0x0800ac72
 800a3e8:	0800ac76 	.word	0x0800ac76
 800a3ec:	08008541 	.word	0x08008541
 800a3f0:	0800a151 	.word	0x0800a151

0800a3f4 <_sbrk_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4c06      	ldr	r4, [pc, #24]	; (800a410 <_sbrk_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	f7f7 f8e2 	bl	80015c8 <_sbrk>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_sbrk_r+0x1a>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_sbrk_r+0x1a>
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	200043ac 	.word	0x200043ac

0800a414 <__ascii_mbtowc>:
 800a414:	b082      	sub	sp, #8
 800a416:	b901      	cbnz	r1, 800a41a <__ascii_mbtowc+0x6>
 800a418:	a901      	add	r1, sp, #4
 800a41a:	b142      	cbz	r2, 800a42e <__ascii_mbtowc+0x1a>
 800a41c:	b14b      	cbz	r3, 800a432 <__ascii_mbtowc+0x1e>
 800a41e:	7813      	ldrb	r3, [r2, #0]
 800a420:	600b      	str	r3, [r1, #0]
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	1c10      	adds	r0, r2, #0
 800a426:	bf18      	it	ne
 800a428:	2001      	movne	r0, #1
 800a42a:	b002      	add	sp, #8
 800a42c:	4770      	bx	lr
 800a42e:	4610      	mov	r0, r2
 800a430:	e7fb      	b.n	800a42a <__ascii_mbtowc+0x16>
 800a432:	f06f 0001 	mvn.w	r0, #1
 800a436:	e7f8      	b.n	800a42a <__ascii_mbtowc+0x16>

0800a438 <memmove>:
 800a438:	4288      	cmp	r0, r1
 800a43a:	b510      	push	{r4, lr}
 800a43c:	eb01 0302 	add.w	r3, r1, r2
 800a440:	d807      	bhi.n	800a452 <memmove+0x1a>
 800a442:	1e42      	subs	r2, r0, #1
 800a444:	4299      	cmp	r1, r3
 800a446:	d00a      	beq.n	800a45e <memmove+0x26>
 800a448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a44c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a450:	e7f8      	b.n	800a444 <memmove+0xc>
 800a452:	4283      	cmp	r3, r0
 800a454:	d9f5      	bls.n	800a442 <memmove+0xa>
 800a456:	1881      	adds	r1, r0, r2
 800a458:	1ad2      	subs	r2, r2, r3
 800a45a:	42d3      	cmn	r3, r2
 800a45c:	d100      	bne.n	800a460 <memmove+0x28>
 800a45e:	bd10      	pop	{r4, pc}
 800a460:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a464:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a468:	e7f7      	b.n	800a45a <memmove+0x22>

0800a46a <__malloc_lock>:
 800a46a:	4770      	bx	lr

0800a46c <__malloc_unlock>:
 800a46c:	4770      	bx	lr

0800a46e <_realloc_r>:
 800a46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a470:	4607      	mov	r7, r0
 800a472:	4614      	mov	r4, r2
 800a474:	460e      	mov	r6, r1
 800a476:	b921      	cbnz	r1, 800a482 <_realloc_r+0x14>
 800a478:	4611      	mov	r1, r2
 800a47a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a47e:	f7ff be0d 	b.w	800a09c <_malloc_r>
 800a482:	b922      	cbnz	r2, 800a48e <_realloc_r+0x20>
 800a484:	f7ff fdbc 	bl	800a000 <_free_r>
 800a488:	4625      	mov	r5, r4
 800a48a:	4628      	mov	r0, r5
 800a48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48e:	f000 f821 	bl	800a4d4 <_malloc_usable_size_r>
 800a492:	42a0      	cmp	r0, r4
 800a494:	d20f      	bcs.n	800a4b6 <_realloc_r+0x48>
 800a496:	4621      	mov	r1, r4
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff fdff 	bl	800a09c <_malloc_r>
 800a49e:	4605      	mov	r5, r0
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d0f2      	beq.n	800a48a <_realloc_r+0x1c>
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	f7fd ffa2 	bl	80083f0 <memcpy>
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7ff fda6 	bl	800a000 <_free_r>
 800a4b4:	e7e9      	b.n	800a48a <_realloc_r+0x1c>
 800a4b6:	4635      	mov	r5, r6
 800a4b8:	e7e7      	b.n	800a48a <_realloc_r+0x1c>

0800a4ba <__ascii_wctomb>:
 800a4ba:	b149      	cbz	r1, 800a4d0 <__ascii_wctomb+0x16>
 800a4bc:	2aff      	cmp	r2, #255	; 0xff
 800a4be:	bf85      	ittet	hi
 800a4c0:	238a      	movhi	r3, #138	; 0x8a
 800a4c2:	6003      	strhi	r3, [r0, #0]
 800a4c4:	700a      	strbls	r2, [r1, #0]
 800a4c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4ca:	bf98      	it	ls
 800a4cc:	2001      	movls	r0, #1
 800a4ce:	4770      	bx	lr
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4770      	bx	lr

0800a4d4 <_malloc_usable_size_r>:
 800a4d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d8:	1f18      	subs	r0, r3, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bfbc      	itt	lt
 800a4de:	580b      	ldrlt	r3, [r1, r0]
 800a4e0:	18c0      	addlt	r0, r0, r3
 800a4e2:	4770      	bx	lr

0800a4e4 <_init>:
 800a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e6:	bf00      	nop
 800a4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ea:	bc08      	pop	{r3}
 800a4ec:	469e      	mov	lr, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <_fini>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr
